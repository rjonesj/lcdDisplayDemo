
LCDDisplayDemo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a80  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000377a0  08003c08  08003c08  00013c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803b3a8  0803b3a8  0005003c  2**0
                  CONTENTS
  4 .ARM          00000000  0803b3a8  0803b3a8  0005003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0803b3a8  0803b3a8  0005003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803b3a8  0803b3a8  0004b3a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803b3ac  0803b3ac  0004b3ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  0803b3b0  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000003c  0803b3ec  0005003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  0803b3ec  0005012c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0005003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009fe3  00000000  00000000  0005006c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001867  00000000  00000000  0005a04f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000730  00000000  00000000  0005b8b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000668  00000000  00000000  0005bfe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019bd2  00000000  00000000  0005c650  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000074ca  00000000  00000000  00076222  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009113f  00000000  00000000  0007d6ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010e82b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b84  00000000  00000000  0010e8a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000003c 	.word	0x2000003c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003bf0 	.word	0x08003bf0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000040 	.word	0x20000040
 80001c4:	08003bf0 	.word	0x08003bf0

080001c8 <Display_Round_Icon_40x40>:
#include "ILI9341_Driver.h"
#include "icons_included.h"
#include "ironman.h"

void Display_Round_Icon_40x40(const unsigned int icon[], unsigned int x0, unsigned int y0, unsigned int r)
{
 80001c8:	b590      	push	{r4, r7, lr}
 80001ca:	b08b      	sub	sp, #44	; 0x2c
 80001cc:	af02      	add	r7, sp, #8
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	607a      	str	r2, [r7, #4]
 80001d4:	603b      	str	r3, [r7, #0]
	uint64_t k = 0;
 80001d6:	f04f 0300 	mov.w	r3, #0
 80001da:	f04f 0400 	mov.w	r4, #0
 80001de:	e9c7 3406 	strd	r3, r4, [r7, #24]

    ILI9341_Draw_Circle(x0, y0, r, BLUE, 1);
 80001e2:	683a      	ldr	r2, [r7, #0]
 80001e4:	2301      	movs	r3, #1
 80001e6:	9300      	str	r3, [sp, #0]
 80001e8:	231f      	movs	r3, #31
 80001ea:	6879      	ldr	r1, [r7, #4]
 80001ec:	68b8      	ldr	r0, [r7, #8]
 80001ee:	f002 fbd8 	bl	80029a2 <ILI9341_Draw_Circle>

	for(uint32_t j = y0 - 19; j < y0 + 21; j++)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	3b13      	subs	r3, #19
 80001f6:	617b      	str	r3, [r7, #20]
 80001f8:	e01f      	b.n	800023a <Display_Round_Icon_40x40+0x72>
	{
		for(uint32_t i = x0 -19; i < x0 + 21; i++)
 80001fa:	68bb      	ldr	r3, [r7, #8]
 80001fc:	3b13      	subs	r3, #19
 80001fe:	613b      	str	r3, [r7, #16]
 8000200:	e013      	b.n	800022a <Display_Round_Icon_40x40+0x62>
		{
				ILI9341_Draw_Pixel(i, j, icon[k]);
 8000202:	6938      	ldr	r0, [r7, #16]
 8000204:	6979      	ldr	r1, [r7, #20]
 8000206:	69bb      	ldr	r3, [r7, #24]
 8000208:	009b      	lsls	r3, r3, #2
 800020a:	68fa      	ldr	r2, [r7, #12]
 800020c:	4413      	add	r3, r2
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	461a      	mov	r2, r3
 8000212:	f002 fad7 	bl	80027c4 <ILI9341_Draw_Pixel>
				k++;
 8000216:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800021a:	1c59      	adds	r1, r3, #1
 800021c:	f144 0200 	adc.w	r2, r4, #0
 8000220:	e9c7 1206 	strd	r1, r2, [r7, #24]
		for(uint32_t i = x0 -19; i < x0 + 21; i++)
 8000224:	693b      	ldr	r3, [r7, #16]
 8000226:	3301      	adds	r3, #1
 8000228:	613b      	str	r3, [r7, #16]
 800022a:	68bb      	ldr	r3, [r7, #8]
 800022c:	3315      	adds	r3, #21
 800022e:	693a      	ldr	r2, [r7, #16]
 8000230:	429a      	cmp	r2, r3
 8000232:	d3e6      	bcc.n	8000202 <Display_Round_Icon_40x40+0x3a>
	for(uint32_t j = y0 - 19; j < y0 + 21; j++)
 8000234:	697b      	ldr	r3, [r7, #20]
 8000236:	3301      	adds	r3, #1
 8000238:	617b      	str	r3, [r7, #20]
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	3315      	adds	r3, #21
 800023e:	697a      	ldr	r2, [r7, #20]
 8000240:	429a      	cmp	r2, r3
 8000242:	d3da      	bcc.n	80001fa <Display_Round_Icon_40x40+0x32>
		}
	}
}
 8000244:	bf00      	nop
 8000246:	3724      	adds	r7, #36	; 0x24
 8000248:	46bd      	mov	sp, r7
 800024a:	bd90      	pop	{r4, r7, pc}

0800024c <Display_Square_Icon_40x40>:

void Display_Square_Icon_40x40(const unsigned int icon[], unsigned int x0, unsigned int y0)
{
 800024c:	b590      	push	{r4, r7, lr}
 800024e:	b089      	sub	sp, #36	; 0x24
 8000250:	af00      	add	r7, sp, #0
 8000252:	60f8      	str	r0, [r7, #12]
 8000254:	60b9      	str	r1, [r7, #8]
 8000256:	607a      	str	r2, [r7, #4]
	uint64_t k = 0;
 8000258:	f04f 0300 	mov.w	r3, #0
 800025c:	f04f 0400 	mov.w	r4, #0
 8000260:	e9c7 3406 	strd	r3, r4, [r7, #24]

	for(uint32_t j = y0; j < y0 + 40; j++)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	617b      	str	r3, [r7, #20]
 8000268:	e01e      	b.n	80002a8 <Display_Square_Icon_40x40+0x5c>
	{
		for(uint32_t i = x0; i < x0 + 40; i++)
 800026a:	68bb      	ldr	r3, [r7, #8]
 800026c:	613b      	str	r3, [r7, #16]
 800026e:	e013      	b.n	8000298 <Display_Square_Icon_40x40+0x4c>
		{
				ILI9341_Draw_Pixel(i, j, icon[k]);
 8000270:	6938      	ldr	r0, [r7, #16]
 8000272:	6979      	ldr	r1, [r7, #20]
 8000274:	69bb      	ldr	r3, [r7, #24]
 8000276:	009b      	lsls	r3, r3, #2
 8000278:	68fa      	ldr	r2, [r7, #12]
 800027a:	4413      	add	r3, r2
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	461a      	mov	r2, r3
 8000280:	f002 faa0 	bl	80027c4 <ILI9341_Draw_Pixel>
				k++;
 8000284:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8000288:	1c59      	adds	r1, r3, #1
 800028a:	f144 0200 	adc.w	r2, r4, #0
 800028e:	e9c7 1206 	strd	r1, r2, [r7, #24]
		for(uint32_t i = x0; i < x0 + 40; i++)
 8000292:	693b      	ldr	r3, [r7, #16]
 8000294:	3301      	adds	r3, #1
 8000296:	613b      	str	r3, [r7, #16]
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	3328      	adds	r3, #40	; 0x28
 800029c:	693a      	ldr	r2, [r7, #16]
 800029e:	429a      	cmp	r2, r3
 80002a0:	d3e6      	bcc.n	8000270 <Display_Square_Icon_40x40+0x24>
	for(uint32_t j = y0; j < y0 + 40; j++)
 80002a2:	697b      	ldr	r3, [r7, #20]
 80002a4:	3301      	adds	r3, #1
 80002a6:	617b      	str	r3, [r7, #20]
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	3328      	adds	r3, #40	; 0x28
 80002ac:	697a      	ldr	r2, [r7, #20]
 80002ae:	429a      	cmp	r2, r3
 80002b0:	d3db      	bcc.n	800026a <Display_Square_Icon_40x40+0x1e>
		}
	}
}
 80002b2:	bf00      	nop
 80002b4:	3724      	adds	r7, #36	; 0x24
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd90      	pop	{r4, r7, pc}
	...

080002bc <Display_Menu>:

void Display_Menu()
{
 80002bc:	b590      	push	{r4, r7, lr}
 80002be:	b087      	sub	sp, #28
 80002c0:	af02      	add	r7, sp, #8
	/* Refresh the screen to black background */
	ILI9341_Set_Rotation(3);
 80002c2:	2003      	movs	r0, #3
 80002c4:	f002 f9b4 	bl	8002630 <ILI9341_Set_Rotation>
	ILI9341_Fill_Screen(BLACK);
 80002c8:	2000      	movs	r0, #0
 80002ca:	f002 fa57 	bl	800277c <ILI9341_Fill_Screen>
	HAL_Delay(500);
 80002ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002d2:	f000 f983 	bl	80005dc <HAL_Delay>

	/* Counting through all the bytes of those icons */
	uint64_t k = 0;
 80002d6:	f04f 0300 	mov.w	r3, #0
 80002da:	f04f 0400 	mov.w	r4, #0
 80002de:	e9c7 3402 	strd	r3, r4, [r7, #8]
	/* Draw border for the menu */
    ILI9341_Draw_Empty_Rectangle(GREEN, 10, 30, 310, 230);
 80002e2:	23e6      	movs	r3, #230	; 0xe6
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	f44f 739b 	mov.w	r3, #310	; 0x136
 80002ea:	221e      	movs	r2, #30
 80002ec:	210a      	movs	r1, #10
 80002ee:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80002f2:	f002 faab 	bl	800284c <ILI9341_Draw_Empty_Rectangle>
    ILI9341_Draw_Empty_Rectangle(BLUE, 15, 35, 305, 225);
 80002f6:	23e1      	movs	r3, #225	; 0xe1
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	f240 1331 	movw	r3, #305	; 0x131
 80002fe:	2223      	movs	r2, #35	; 0x23
 8000300:	210f      	movs	r1, #15
 8000302:	201f      	movs	r0, #31
 8000304:	f002 faa2 	bl	800284c <ILI9341_Draw_Empty_Rectangle>

    /* Write something */
	ILI9341_Draw_String(10,10,WHITE,BLACK,"It's a good day!",2);
 8000308:	2302      	movs	r3, #2
 800030a:	9301      	str	r3, [sp, #4]
 800030c:	4b2e      	ldr	r3, [pc, #184]	; (80003c8 <Display_Menu+0x10c>)
 800030e:	9300      	str	r3, [sp, #0]
 8000310:	2300      	movs	r3, #0
 8000312:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000316:	210a      	movs	r1, #10
 8000318:	200a      	movs	r0, #10
 800031a:	f002 fd2f 	bl	8002d7c <ILI9341_Draw_String>

	/* Battery Icon in the top right corner */
    for(uint32_t j = 10; j < 20; j++) {
 800031e:	230a      	movs	r3, #10
 8000320:	607b      	str	r3, [r7, #4]
 8000322:	e01d      	b.n	8000360 <Display_Menu+0xa4>
    	for(uint32_t i = 280; i < 300; i++) {
 8000324:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000328:	603b      	str	r3, [r7, #0]
 800032a:	e012      	b.n	8000352 <Display_Menu+0x96>
				ILI9341_Draw_Pixel(i, j, battery_icon[k]);
 800032c:	6838      	ldr	r0, [r7, #0]
 800032e:	6879      	ldr	r1, [r7, #4]
 8000330:	4a26      	ldr	r2, [pc, #152]	; (80003cc <Display_Menu+0x110>)
 8000332:	68bb      	ldr	r3, [r7, #8]
 8000334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000338:	461a      	mov	r2, r3
 800033a:	f002 fa43 	bl	80027c4 <ILI9341_Draw_Pixel>
				k++;
 800033e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000342:	1c59      	adds	r1, r3, #1
 8000344:	f144 0200 	adc.w	r2, r4, #0
 8000348:	e9c7 1202 	strd	r1, r2, [r7, #8]
    	for(uint32_t i = 280; i < 300; i++) {
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	3301      	adds	r3, #1
 8000350:	603b      	str	r3, [r7, #0]
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000358:	d3e8      	bcc.n	800032c <Display_Menu+0x70>
    for(uint32_t j = 10; j < 20; j++) {
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	3301      	adds	r3, #1
 800035e:	607b      	str	r3, [r7, #4]
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	2b13      	cmp	r3, #19
 8000364:	d9de      	bls.n	8000324 <Display_Menu+0x68>
	}

    /* =================================List of Icons================================= */

    /* ===========================Icon No.1=========================== */
    Display_Round_Icon_40x40(home_icon_40x40, 59, 79, 40);
 8000366:	2328      	movs	r3, #40	; 0x28
 8000368:	224f      	movs	r2, #79	; 0x4f
 800036a:	213b      	movs	r1, #59	; 0x3b
 800036c:	4818      	ldr	r0, [pc, #96]	; (80003d0 <Display_Menu+0x114>)
 800036e:	f7ff ff2b 	bl	80001c8 <Display_Round_Icon_40x40>

    /* ===========================Icon No.2=========================== */
    Display_Round_Icon_40x40(music_icon_40x40, 159, 79, 40);
 8000372:	2328      	movs	r3, #40	; 0x28
 8000374:	224f      	movs	r2, #79	; 0x4f
 8000376:	219f      	movs	r1, #159	; 0x9f
 8000378:	4816      	ldr	r0, [pc, #88]	; (80003d4 <Display_Menu+0x118>)
 800037a:	f7ff ff25 	bl	80001c8 <Display_Round_Icon_40x40>

    /* ===========================Icon No.3=========================== */
    Display_Round_Icon_40x40(note_icon_40x40, 259, 79, 40);
 800037e:	2328      	movs	r3, #40	; 0x28
 8000380:	224f      	movs	r2, #79	; 0x4f
 8000382:	f240 1103 	movw	r1, #259	; 0x103
 8000386:	4814      	ldr	r0, [pc, #80]	; (80003d8 <Display_Menu+0x11c>)
 8000388:	f7ff ff1e 	bl	80001c8 <Display_Round_Icon_40x40>

    /* ===========================Icon No.4=========================== */
    Display_Round_Icon_40x40(game_icon_40x40, 59, 179, 40);
 800038c:	2328      	movs	r3, #40	; 0x28
 800038e:	22b3      	movs	r2, #179	; 0xb3
 8000390:	213b      	movs	r1, #59	; 0x3b
 8000392:	4812      	ldr	r0, [pc, #72]	; (80003dc <Display_Menu+0x120>)
 8000394:	f7ff ff18 	bl	80001c8 <Display_Round_Icon_40x40>

    /* ===========================Icon No.5=========================== */
    Display_Round_Icon_40x40(facebook_icon_40x40, 159, 179, 40);
 8000398:	2328      	movs	r3, #40	; 0x28
 800039a:	22b3      	movs	r2, #179	; 0xb3
 800039c:	219f      	movs	r1, #159	; 0x9f
 800039e:	4810      	ldr	r0, [pc, #64]	; (80003e0 <Display_Menu+0x124>)
 80003a0:	f7ff ff12 	bl	80001c8 <Display_Round_Icon_40x40>

    /* ===========================Icon No.6=========================== */
    Display_Round_Icon_40x40(image_icon_40x40, 259, 179, 40);
 80003a4:	2328      	movs	r3, #40	; 0x28
 80003a6:	22b3      	movs	r2, #179	; 0xb3
 80003a8:	f240 1103 	movw	r1, #259	; 0x103
 80003ac:	480d      	ldr	r0, [pc, #52]	; (80003e4 <Display_Menu+0x128>)
 80003ae:	f7ff ff0b 	bl	80001c8 <Display_Round_Icon_40x40>

	CS_OFF;
 80003b2:	2201      	movs	r2, #1
 80003b4:	2104      	movs	r1, #4
 80003b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ba:	f000 fba9 	bl	8000b10 <HAL_GPIO_WritePin>
}
 80003be:	bf00      	nop
 80003c0:	3714      	adds	r7, #20
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd90      	pop	{r4, r7, pc}
 80003c6:	bf00      	nop
 80003c8:	08003c08 	.word	0x08003c08
 80003cc:	08003c90 	.word	0x08003c90
 80003d0:	08003fb0 	.word	0x08003fb0
 80003d4:	080058b0 	.word	0x080058b0
 80003d8:	080071b0 	.word	0x080071b0
 80003dc:	08008ab0 	.word	0x08008ab0
 80003e0:	0800a3b0 	.word	0x0800a3b0
 80003e4:	0800bcb0 	.word	0x0800bcb0

080003e8 <Display_Text>:
		}
	}
}

void Display_Text()
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af02      	add	r7, sp, #8
	/* Refresh the screen to black background */
	ILI9341_Fill_Screen(BLACK);
 80003ee:	2000      	movs	r0, #0
 80003f0:	f002 f9c4 	bl	800277c <ILI9341_Fill_Screen>
	HAL_Delay(500);
 80003f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003f8:	f000 f8f0 	bl	80005dc <HAL_Delay>

	/* Draw border for the menu */
    ILI9341_Draw_Empty_Rectangle(YELLOW, 10, 30, 310, 230);
 80003fc:	23e6      	movs	r3, #230	; 0xe6
 80003fe:	9300      	str	r3, [sp, #0]
 8000400:	f44f 739b 	mov.w	r3, #310	; 0x136
 8000404:	221e      	movs	r2, #30
 8000406:	210a      	movs	r1, #10
 8000408:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800040c:	f002 fa1e 	bl	800284c <ILI9341_Draw_Empty_Rectangle>

    /* Write something */
	ILI9341_Draw_String(20, 40, WHITE, BLACK, "Hello User!", 2);
 8000410:	2302      	movs	r3, #2
 8000412:	9301      	str	r3, [sp, #4]
 8000414:	4b18      	ldr	r3, [pc, #96]	; (8000478 <Display_Text+0x90>)
 8000416:	9300      	str	r3, [sp, #0]
 8000418:	2300      	movs	r3, #0
 800041a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800041e:	2128      	movs	r1, #40	; 0x28
 8000420:	2014      	movs	r0, #20
 8000422:	f002 fcab 	bl	8002d7c <ILI9341_Draw_String>

	ILI9341_Draw_String(20, 60, WHITE, BLACK, "This is the test for TFT LCD!", 2);
 8000426:	2302      	movs	r3, #2
 8000428:	9301      	str	r3, [sp, #4]
 800042a:	4b14      	ldr	r3, [pc, #80]	; (800047c <Display_Text+0x94>)
 800042c:	9300      	str	r3, [sp, #0]
 800042e:	2300      	movs	r3, #0
 8000430:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000434:	213c      	movs	r1, #60	; 0x3c
 8000436:	2014      	movs	r0, #20
 8000438:	f002 fca0 	bl	8002d7c <ILI9341_Draw_String>

	ILI9341_Draw_String(20, 80, WHITE, BLACK, "For more information, please visit:", 2);
 800043c:	2302      	movs	r3, #2
 800043e:	9301      	str	r3, [sp, #4]
 8000440:	4b0f      	ldr	r3, [pc, #60]	; (8000480 <Display_Text+0x98>)
 8000442:	9300      	str	r3, [sp, #0]
 8000444:	2300      	movs	r3, #0
 8000446:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800044a:	2150      	movs	r1, #80	; 0x50
 800044c:	2014      	movs	r0, #20
 800044e:	f002 fc95 	bl	8002d7c <ILI9341_Draw_String>

	ILI9341_Draw_String(20, 100, WHITE, BLACK, "    aweirdolife.wordpress.com    ", 2);
 8000452:	2302      	movs	r3, #2
 8000454:	9301      	str	r3, [sp, #4]
 8000456:	4b0b      	ldr	r3, [pc, #44]	; (8000484 <Display_Text+0x9c>)
 8000458:	9300      	str	r3, [sp, #0]
 800045a:	2300      	movs	r3, #0
 800045c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000460:	2164      	movs	r1, #100	; 0x64
 8000462:	2014      	movs	r0, #20
 8000464:	f002 fc8a 	bl	8002d7c <ILI9341_Draw_String>

	Display_Square_Icon_40x40(back_icon_40x40, 0, 200);
 8000468:	22c8      	movs	r2, #200	; 0xc8
 800046a:	2100      	movs	r1, #0
 800046c:	4806      	ldr	r0, [pc, #24]	; (8000488 <Display_Text+0xa0>)
 800046e:	f7ff feed 	bl	800024c <Display_Square_Icon_40x40>
}
 8000472:	bf00      	nop
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	08003c1c 	.word	0x08003c1c
 800047c:	08003c28 	.word	0x08003c28
 8000480:	08003c48 	.word	0x08003c48
 8000484:	08003c6c 	.word	0x08003c6c
 8000488:	0800d5b0 	.word	0x0800d5b0

0800048c <Display_Color_Picture>:

void Display_Color_Picture()
{
 800048c:	b590      	push	{r4, r7, lr}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
	for (uint16_t i = 0; i < 280; i++)
 8000492:	2300      	movs	r3, #0
 8000494:	80fb      	strh	r3, [r7, #6]
 8000496:	e029      	b.n	80004ec <Display_Color_Picture+0x60>
	{
		for (uint16_t j = 0; j < 320; j++)
 8000498:	2300      	movs	r3, #0
 800049a:	80bb      	strh	r3, [r7, #4]
 800049c:	e01f      	b.n	80004de <Display_Color_Picture+0x52>
		{
			ILI9341_Draw_Double_Pixel(j, i, ironman[(640 * i) + j * 2], ironman[(640 * i) + j * 2 + 1]);
 800049e:	88b8      	ldrh	r0, [r7, #4]
 80004a0:	88f9      	ldrh	r1, [r7, #6]
 80004a2:	88fa      	ldrh	r2, [r7, #6]
 80004a4:	4613      	mov	r3, r2
 80004a6:	009b      	lsls	r3, r3, #2
 80004a8:	4413      	add	r3, r2
 80004aa:	019b      	lsls	r3, r3, #6
 80004ac:	461a      	mov	r2, r3
 80004ae:	88bb      	ldrh	r3, [r7, #4]
 80004b0:	4413      	add	r3, r2
 80004b2:	005b      	lsls	r3, r3, #1
 80004b4:	4a14      	ldr	r2, [pc, #80]	; (8000508 <Display_Color_Picture+0x7c>)
 80004b6:	5cd3      	ldrb	r3, [r2, r3]
 80004b8:	461c      	mov	r4, r3
 80004ba:	88fa      	ldrh	r2, [r7, #6]
 80004bc:	4613      	mov	r3, r2
 80004be:	009b      	lsls	r3, r3, #2
 80004c0:	4413      	add	r3, r2
 80004c2:	019b      	lsls	r3, r3, #6
 80004c4:	461a      	mov	r2, r3
 80004c6:	88bb      	ldrh	r3, [r7, #4]
 80004c8:	4413      	add	r3, r2
 80004ca:	005b      	lsls	r3, r3, #1
 80004cc:	3301      	adds	r3, #1
 80004ce:	4a0e      	ldr	r2, [pc, #56]	; (8000508 <Display_Color_Picture+0x7c>)
 80004d0:	5cd3      	ldrb	r3, [r2, r3]
 80004d2:	4622      	mov	r2, r4
 80004d4:	f002 fda0 	bl	8003018 <ILI9341_Draw_Double_Pixel>
		for (uint16_t j = 0; j < 320; j++)
 80004d8:	88bb      	ldrh	r3, [r7, #4]
 80004da:	3301      	adds	r3, #1
 80004dc:	80bb      	strh	r3, [r7, #4]
 80004de:	88bb      	ldrh	r3, [r7, #4]
 80004e0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80004e4:	d3db      	bcc.n	800049e <Display_Color_Picture+0x12>
	for (uint16_t i = 0; i < 280; i++)
 80004e6:	88fb      	ldrh	r3, [r7, #6]
 80004e8:	3301      	adds	r3, #1
 80004ea:	80fb      	strh	r3, [r7, #6]
 80004ec:	88fb      	ldrh	r3, [r7, #6]
 80004ee:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 80004f2:	d3d1      	bcc.n	8000498 <Display_Color_Picture+0xc>
		}
	}

	Display_Square_Icon_40x40(back_icon_40x40, 0, 200);
 80004f4:	22c8      	movs	r2, #200	; 0xc8
 80004f6:	2100      	movs	r1, #0
 80004f8:	4804      	ldr	r0, [pc, #16]	; (800050c <Display_Color_Picture+0x80>)
 80004fa:	f7ff fea7 	bl	800024c <Display_Square_Icon_40x40>
}
 80004fe:	bf00      	nop
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	bd90      	pop	{r4, r7, pc}
 8000506:	bf00      	nop
 8000508:	0800eeb0 	.word	0x0800eeb0
 800050c:	0800d5b0 	.word	0x0800d5b0

08000510 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000514:	4b08      	ldr	r3, [pc, #32]	; (8000538 <HAL_Init+0x28>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a07      	ldr	r2, [pc, #28]	; (8000538 <HAL_Init+0x28>)
 800051a:	f043 0310 	orr.w	r3, r3, #16
 800051e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000520:	2003      	movs	r0, #3
 8000522:	f000 f92f 	bl	8000784 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000526:	2000      	movs	r0, #0
 8000528:	f000 f808 	bl	800053c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800052c:	f002 fff4 	bl	8003518 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000530:	2300      	movs	r3, #0
}
 8000532:	4618      	mov	r0, r3
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40022000 	.word	0x40022000

0800053c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000544:	4b12      	ldr	r3, [pc, #72]	; (8000590 <HAL_InitTick+0x54>)
 8000546:	681a      	ldr	r2, [r3, #0]
 8000548:	4b12      	ldr	r3, [pc, #72]	; (8000594 <HAL_InitTick+0x58>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	4619      	mov	r1, r3
 800054e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000552:	fbb3 f3f1 	udiv	r3, r3, r1
 8000556:	fbb2 f3f3 	udiv	r3, r2, r3
 800055a:	4618      	mov	r0, r3
 800055c:	f000 f939 	bl	80007d2 <HAL_SYSTICK_Config>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000566:	2301      	movs	r3, #1
 8000568:	e00e      	b.n	8000588 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2b0f      	cmp	r3, #15
 800056e:	d80a      	bhi.n	8000586 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000570:	2200      	movs	r2, #0
 8000572:	6879      	ldr	r1, [r7, #4]
 8000574:	f04f 30ff 	mov.w	r0, #4294967295
 8000578:	f000 f90f 	bl	800079a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800057c:	4a06      	ldr	r2, [pc, #24]	; (8000598 <HAL_InitTick+0x5c>)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000582:	2300      	movs	r3, #0
 8000584:	e000      	b.n	8000588 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000586:	2301      	movs	r3, #1
}
 8000588:	4618      	mov	r0, r3
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20000010 	.word	0x20000010
 8000594:	20000004 	.word	0x20000004
 8000598:	20000000 	.word	0x20000000

0800059c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <HAL_IncTick+0x20>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	461a      	mov	r2, r3
 80005a6:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <HAL_IncTick+0x24>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4413      	add	r3, r2
 80005ac:	4a04      	ldr	r2, [pc, #16]	; (80005c0 <HAL_IncTick+0x24>)
 80005ae:	6013      	str	r3, [r2, #0]
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	20000004 	.word	0x20000004
 80005c0:	200000c0 	.word	0x200000c0

080005c4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  return uwTick;  
 80005c8:	4b03      	ldr	r3, [pc, #12]	; (80005d8 <HAL_GetTick+0x14>)
 80005ca:	681b      	ldr	r3, [r3, #0]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	200000c0 	.word	0x200000c0

080005dc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005e4:	f7ff ffee 	bl	80005c4 <HAL_GetTick>
 80005e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005f4:	d005      	beq.n	8000602 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <HAL_Delay+0x40>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	461a      	mov	r2, r3
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	4413      	add	r3, r2
 8000600:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000602:	bf00      	nop
 8000604:	f7ff ffde 	bl	80005c4 <HAL_GetTick>
 8000608:	4602      	mov	r2, r0
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	1ad3      	subs	r3, r2, r3
 800060e:	68fa      	ldr	r2, [r7, #12]
 8000610:	429a      	cmp	r2, r3
 8000612:	d8f7      	bhi.n	8000604 <HAL_Delay+0x28>
  {
  }
}
 8000614:	bf00      	nop
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000004 	.word	0x20000004

08000620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	f003 0307 	and.w	r3, r3, #7
 800062e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <__NVIC_SetPriorityGrouping+0x44>)
 8000632:	68db      	ldr	r3, [r3, #12]
 8000634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000636:	68ba      	ldr	r2, [r7, #8]
 8000638:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800063c:	4013      	ands	r3, r2
 800063e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000648:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800064c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000652:	4a04      	ldr	r2, [pc, #16]	; (8000664 <__NVIC_SetPriorityGrouping+0x44>)
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	60d3      	str	r3, [r2, #12]
}
 8000658:	bf00      	nop
 800065a:	3714      	adds	r7, #20
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr
 8000664:	e000ed00 	.word	0xe000ed00

08000668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800066c:	4b04      	ldr	r3, [pc, #16]	; (8000680 <__NVIC_GetPriorityGrouping+0x18>)
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	0a1b      	lsrs	r3, r3, #8
 8000672:	f003 0307 	and.w	r3, r3, #7
}
 8000676:	4618      	mov	r0, r3
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	6039      	str	r1, [r7, #0]
 800068e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000694:	2b00      	cmp	r3, #0
 8000696:	db0a      	blt.n	80006ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	b2da      	uxtb	r2, r3
 800069c:	490c      	ldr	r1, [pc, #48]	; (80006d0 <__NVIC_SetPriority+0x4c>)
 800069e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a2:	0112      	lsls	r2, r2, #4
 80006a4:	b2d2      	uxtb	r2, r2
 80006a6:	440b      	add	r3, r1
 80006a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006ac:	e00a      	b.n	80006c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	b2da      	uxtb	r2, r3
 80006b2:	4908      	ldr	r1, [pc, #32]	; (80006d4 <__NVIC_SetPriority+0x50>)
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	f003 030f 	and.w	r3, r3, #15
 80006ba:	3b04      	subs	r3, #4
 80006bc:	0112      	lsls	r2, r2, #4
 80006be:	b2d2      	uxtb	r2, r2
 80006c0:	440b      	add	r3, r1
 80006c2:	761a      	strb	r2, [r3, #24]
}
 80006c4:	bf00      	nop
 80006c6:	370c      	adds	r7, #12
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000e100 	.word	0xe000e100
 80006d4:	e000ed00 	.word	0xe000ed00

080006d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006d8:	b480      	push	{r7}
 80006da:	b089      	sub	sp, #36	; 0x24
 80006dc:	af00      	add	r7, sp, #0
 80006de:	60f8      	str	r0, [r7, #12]
 80006e0:	60b9      	str	r1, [r7, #8]
 80006e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	f003 0307 	and.w	r3, r3, #7
 80006ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006ec:	69fb      	ldr	r3, [r7, #28]
 80006ee:	f1c3 0307 	rsb	r3, r3, #7
 80006f2:	2b04      	cmp	r3, #4
 80006f4:	bf28      	it	cs
 80006f6:	2304      	movcs	r3, #4
 80006f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006fa:	69fb      	ldr	r3, [r7, #28]
 80006fc:	3304      	adds	r3, #4
 80006fe:	2b06      	cmp	r3, #6
 8000700:	d902      	bls.n	8000708 <NVIC_EncodePriority+0x30>
 8000702:	69fb      	ldr	r3, [r7, #28]
 8000704:	3b03      	subs	r3, #3
 8000706:	e000      	b.n	800070a <NVIC_EncodePriority+0x32>
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800070c:	f04f 32ff 	mov.w	r2, #4294967295
 8000710:	69bb      	ldr	r3, [r7, #24]
 8000712:	fa02 f303 	lsl.w	r3, r2, r3
 8000716:	43da      	mvns	r2, r3
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	401a      	ands	r2, r3
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000720:	f04f 31ff 	mov.w	r1, #4294967295
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	fa01 f303 	lsl.w	r3, r1, r3
 800072a:	43d9      	mvns	r1, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000730:	4313      	orrs	r3, r2
         );
}
 8000732:	4618      	mov	r0, r3
 8000734:	3724      	adds	r7, #36	; 0x24
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
	...

08000740 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	3b01      	subs	r3, #1
 800074c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000750:	d301      	bcc.n	8000756 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000752:	2301      	movs	r3, #1
 8000754:	e00f      	b.n	8000776 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000756:	4a0a      	ldr	r2, [pc, #40]	; (8000780 <SysTick_Config+0x40>)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3b01      	subs	r3, #1
 800075c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800075e:	210f      	movs	r1, #15
 8000760:	f04f 30ff 	mov.w	r0, #4294967295
 8000764:	f7ff ff8e 	bl	8000684 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <SysTick_Config+0x40>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800076e:	4b04      	ldr	r3, [pc, #16]	; (8000780 <SysTick_Config+0x40>)
 8000770:	2207      	movs	r2, #7
 8000772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000774:	2300      	movs	r3, #0
}
 8000776:	4618      	mov	r0, r3
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	e000e010 	.word	0xe000e010

08000784 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f7ff ff47 	bl	8000620 <__NVIC_SetPriorityGrouping>
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800079a:	b580      	push	{r7, lr}
 800079c:	b086      	sub	sp, #24
 800079e:	af00      	add	r7, sp, #0
 80007a0:	4603      	mov	r3, r0
 80007a2:	60b9      	str	r1, [r7, #8]
 80007a4:	607a      	str	r2, [r7, #4]
 80007a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007ac:	f7ff ff5c 	bl	8000668 <__NVIC_GetPriorityGrouping>
 80007b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	68b9      	ldr	r1, [r7, #8]
 80007b6:	6978      	ldr	r0, [r7, #20]
 80007b8:	f7ff ff8e 	bl	80006d8 <NVIC_EncodePriority>
 80007bc:	4602      	mov	r2, r0
 80007be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007c2:	4611      	mov	r1, r2
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff ff5d 	bl	8000684 <__NVIC_SetPriority>
}
 80007ca:	bf00      	nop
 80007cc:	3718      	adds	r7, #24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007da:	6878      	ldr	r0, [r7, #4]
 80007dc:	f7ff ffb0 	bl	8000740 <SysTick_Config>
 80007e0:	4603      	mov	r3, r0
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
	...

080007ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b087      	sub	sp, #28
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007fa:	e154      	b.n	8000aa6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	2101      	movs	r1, #1
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	fa01 f303 	lsl.w	r3, r1, r3
 8000808:	4013      	ands	r3, r2
 800080a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	2b00      	cmp	r3, #0
 8000810:	f000 8146 	beq.w	8000aa0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	2b02      	cmp	r3, #2
 800081a:	d003      	beq.n	8000824 <HAL_GPIO_Init+0x38>
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	2b12      	cmp	r3, #18
 8000822:	d123      	bne.n	800086c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	08da      	lsrs	r2, r3, #3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	3208      	adds	r2, #8
 800082c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000830:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	f003 0307 	and.w	r3, r3, #7
 8000838:	009b      	lsls	r3, r3, #2
 800083a:	220f      	movs	r2, #15
 800083c:	fa02 f303 	lsl.w	r3, r2, r3
 8000840:	43db      	mvns	r3, r3
 8000842:	693a      	ldr	r2, [r7, #16]
 8000844:	4013      	ands	r3, r2
 8000846:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	691a      	ldr	r2, [r3, #16]
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	f003 0307 	and.w	r3, r3, #7
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	fa02 f303 	lsl.w	r3, r2, r3
 8000858:	693a      	ldr	r2, [r7, #16]
 800085a:	4313      	orrs	r3, r2
 800085c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	08da      	lsrs	r2, r3, #3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	3208      	adds	r2, #8
 8000866:	6939      	ldr	r1, [r7, #16]
 8000868:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	2203      	movs	r2, #3
 8000878:	fa02 f303 	lsl.w	r3, r2, r3
 800087c:	43db      	mvns	r3, r3
 800087e:	693a      	ldr	r2, [r7, #16]
 8000880:	4013      	ands	r3, r2
 8000882:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	f003 0203 	and.w	r2, r3, #3
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	fa02 f303 	lsl.w	r3, r2, r3
 8000894:	693a      	ldr	r2, [r7, #16]
 8000896:	4313      	orrs	r3, r2
 8000898:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	693a      	ldr	r2, [r7, #16]
 800089e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d00b      	beq.n	80008c0 <HAL_GPIO_Init+0xd4>
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	2b02      	cmp	r3, #2
 80008ae:	d007      	beq.n	80008c0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008b4:	2b11      	cmp	r3, #17
 80008b6:	d003      	beq.n	80008c0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	2b12      	cmp	r3, #18
 80008be:	d130      	bne.n	8000922 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	689b      	ldr	r3, [r3, #8]
 80008c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	2203      	movs	r2, #3
 80008cc:	fa02 f303 	lsl.w	r3, r2, r3
 80008d0:	43db      	mvns	r3, r3
 80008d2:	693a      	ldr	r2, [r7, #16]
 80008d4:	4013      	ands	r3, r2
 80008d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	68da      	ldr	r2, [r3, #12]
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	fa02 f303 	lsl.w	r3, r2, r3
 80008e4:	693a      	ldr	r2, [r7, #16]
 80008e6:	4313      	orrs	r3, r2
 80008e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	693a      	ldr	r2, [r7, #16]
 80008ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008f6:	2201      	movs	r2, #1
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	43db      	mvns	r3, r3
 8000900:	693a      	ldr	r2, [r7, #16]
 8000902:	4013      	ands	r3, r2
 8000904:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	091b      	lsrs	r3, r3, #4
 800090c:	f003 0201 	and.w	r2, r3, #1
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	fa02 f303 	lsl.w	r3, r2, r3
 8000916:	693a      	ldr	r2, [r7, #16]
 8000918:	4313      	orrs	r3, r2
 800091a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	693a      	ldr	r2, [r7, #16]
 8000920:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	68db      	ldr	r3, [r3, #12]
 8000926:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	2203      	movs	r2, #3
 800092e:	fa02 f303 	lsl.w	r3, r2, r3
 8000932:	43db      	mvns	r3, r3
 8000934:	693a      	ldr	r2, [r7, #16]
 8000936:	4013      	ands	r3, r2
 8000938:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	689a      	ldr	r2, [r3, #8]
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	fa02 f303 	lsl.w	r3, r2, r3
 8000946:	693a      	ldr	r2, [r7, #16]
 8000948:	4313      	orrs	r3, r2
 800094a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	693a      	ldr	r2, [r7, #16]
 8000950:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095a:	2b00      	cmp	r3, #0
 800095c:	f000 80a0 	beq.w	8000aa0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000960:	4b58      	ldr	r3, [pc, #352]	; (8000ac4 <HAL_GPIO_Init+0x2d8>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	4a57      	ldr	r2, [pc, #348]	; (8000ac4 <HAL_GPIO_Init+0x2d8>)
 8000966:	f043 0301 	orr.w	r3, r3, #1
 800096a:	6193      	str	r3, [r2, #24]
 800096c:	4b55      	ldr	r3, [pc, #340]	; (8000ac4 <HAL_GPIO_Init+0x2d8>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	f003 0301 	and.w	r3, r3, #1
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000978:	4a53      	ldr	r2, [pc, #332]	; (8000ac8 <HAL_GPIO_Init+0x2dc>)
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	089b      	lsrs	r3, r3, #2
 800097e:	3302      	adds	r3, #2
 8000980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000984:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	f003 0303 	and.w	r3, r3, #3
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	220f      	movs	r2, #15
 8000990:	fa02 f303 	lsl.w	r3, r2, r3
 8000994:	43db      	mvns	r3, r3
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	4013      	ands	r3, r2
 800099a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80009a2:	d019      	beq.n	80009d8 <HAL_GPIO_Init+0x1ec>
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4a49      	ldr	r2, [pc, #292]	; (8000acc <HAL_GPIO_Init+0x2e0>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d013      	beq.n	80009d4 <HAL_GPIO_Init+0x1e8>
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a48      	ldr	r2, [pc, #288]	; (8000ad0 <HAL_GPIO_Init+0x2e4>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d00d      	beq.n	80009d0 <HAL_GPIO_Init+0x1e4>
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4a47      	ldr	r2, [pc, #284]	; (8000ad4 <HAL_GPIO_Init+0x2e8>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d007      	beq.n	80009cc <HAL_GPIO_Init+0x1e0>
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4a46      	ldr	r2, [pc, #280]	; (8000ad8 <HAL_GPIO_Init+0x2ec>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d101      	bne.n	80009c8 <HAL_GPIO_Init+0x1dc>
 80009c4:	2304      	movs	r3, #4
 80009c6:	e008      	b.n	80009da <HAL_GPIO_Init+0x1ee>
 80009c8:	2305      	movs	r3, #5
 80009ca:	e006      	b.n	80009da <HAL_GPIO_Init+0x1ee>
 80009cc:	2303      	movs	r3, #3
 80009ce:	e004      	b.n	80009da <HAL_GPIO_Init+0x1ee>
 80009d0:	2302      	movs	r3, #2
 80009d2:	e002      	b.n	80009da <HAL_GPIO_Init+0x1ee>
 80009d4:	2301      	movs	r3, #1
 80009d6:	e000      	b.n	80009da <HAL_GPIO_Init+0x1ee>
 80009d8:	2300      	movs	r3, #0
 80009da:	697a      	ldr	r2, [r7, #20]
 80009dc:	f002 0203 	and.w	r2, r2, #3
 80009e0:	0092      	lsls	r2, r2, #2
 80009e2:	4093      	lsls	r3, r2
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	4313      	orrs	r3, r2
 80009e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009ea:	4937      	ldr	r1, [pc, #220]	; (8000ac8 <HAL_GPIO_Init+0x2dc>)
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	089b      	lsrs	r3, r3, #2
 80009f0:	3302      	adds	r3, #2
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009f8:	4b38      	ldr	r3, [pc, #224]	; (8000adc <HAL_GPIO_Init+0x2f0>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	43db      	mvns	r3, r3
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	4013      	ands	r3, r2
 8000a06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d003      	beq.n	8000a1c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a1c:	4a2f      	ldr	r2, [pc, #188]	; (8000adc <HAL_GPIO_Init+0x2f0>)
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a22:	4b2e      	ldr	r3, [pc, #184]	; (8000adc <HAL_GPIO_Init+0x2f0>)
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	4013      	ands	r3, r2
 8000a30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d003      	beq.n	8000a46 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	4313      	orrs	r3, r2
 8000a44:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a46:	4a25      	ldr	r2, [pc, #148]	; (8000adc <HAL_GPIO_Init+0x2f0>)
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a4c:	4b23      	ldr	r3, [pc, #140]	; (8000adc <HAL_GPIO_Init+0x2f0>)
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	43db      	mvns	r3, r3
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	4013      	ands	r3, r2
 8000a5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d003      	beq.n	8000a70 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a70:	4a1a      	ldr	r2, [pc, #104]	; (8000adc <HAL_GPIO_Init+0x2f0>)
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a76:	4b19      	ldr	r3, [pc, #100]	; (8000adc <HAL_GPIO_Init+0x2f0>)
 8000a78:	68db      	ldr	r3, [r3, #12]
 8000a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	43db      	mvns	r3, r3
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	4013      	ands	r3, r2
 8000a84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d003      	beq.n	8000a9a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	4313      	orrs	r3, r2
 8000a98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000a9a:	4a10      	ldr	r2, [pc, #64]	; (8000adc <HAL_GPIO_Init+0x2f0>)
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	fa22 f303 	lsr.w	r3, r2, r3
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	f47f aea3 	bne.w	80007fc <HAL_GPIO_Init+0x10>
  }
}
 8000ab6:	bf00      	nop
 8000ab8:	371c      	adds	r7, #28
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	40010000 	.word	0x40010000
 8000acc:	48000400 	.word	0x48000400
 8000ad0:	48000800 	.word	0x48000800
 8000ad4:	48000c00 	.word	0x48000c00
 8000ad8:	48001000 	.word	0x48001000
 8000adc:	40010400 	.word	0x40010400

08000ae0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	460b      	mov	r3, r1
 8000aea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	691a      	ldr	r2, [r3, #16]
 8000af0:	887b      	ldrh	r3, [r7, #2]
 8000af2:	4013      	ands	r3, r2
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d002      	beq.n	8000afe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000af8:	2301      	movs	r3, #1
 8000afa:	73fb      	strb	r3, [r7, #15]
 8000afc:	e001      	b.n	8000b02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000afe:	2300      	movs	r3, #0
 8000b00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3714      	adds	r7, #20
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	460b      	mov	r3, r1
 8000b1a:	807b      	strh	r3, [r7, #2]
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b20:	787b      	ldrb	r3, [r7, #1]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d003      	beq.n	8000b2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b26:	887a      	ldrh	r2, [r7, #2]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b2c:	e002      	b.n	8000b34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b2e:	887a      	ldrh	r2, [r7, #2]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d102      	bne.n	8000b5a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000b54:	2301      	movs	r3, #1
 8000b56:	f000 bef4 	b.w	8001942 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f003 0301 	and.w	r3, r3, #1
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	f000 816a 	beq.w	8000e3e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b6a:	4bb3      	ldr	r3, [pc, #716]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f003 030c 	and.w	r3, r3, #12
 8000b72:	2b04      	cmp	r3, #4
 8000b74:	d00c      	beq.n	8000b90 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b76:	4bb0      	ldr	r3, [pc, #704]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f003 030c 	and.w	r3, r3, #12
 8000b7e:	2b08      	cmp	r3, #8
 8000b80:	d159      	bne.n	8000c36 <HAL_RCC_OscConfig+0xf6>
 8000b82:	4bad      	ldr	r3, [pc, #692]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b8e:	d152      	bne.n	8000c36 <HAL_RCC_OscConfig+0xf6>
 8000b90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b94:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b98:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000b9c:	fa93 f3a3 	rbit	r3, r3
 8000ba0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ba4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ba8:	fab3 f383 	clz	r3, r3
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	095b      	lsrs	r3, r3, #5
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	f043 0301 	orr.w	r3, r3, #1
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d102      	bne.n	8000bc2 <HAL_RCC_OscConfig+0x82>
 8000bbc:	4b9e      	ldr	r3, [pc, #632]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	e015      	b.n	8000bee <HAL_RCC_OscConfig+0xae>
 8000bc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bc6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bca:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000bce:	fa93 f3a3 	rbit	r3, r3
 8000bd2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000bd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bda:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000bde:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000be2:	fa93 f3a3 	rbit	r3, r3
 8000be6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000bea:	4b93      	ldr	r3, [pc, #588]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000bf2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000bf6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000bfa:	fa92 f2a2 	rbit	r2, r2
 8000bfe:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000c02:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000c06:	fab2 f282 	clz	r2, r2
 8000c0a:	b2d2      	uxtb	r2, r2
 8000c0c:	f042 0220 	orr.w	r2, r2, #32
 8000c10:	b2d2      	uxtb	r2, r2
 8000c12:	f002 021f 	and.w	r2, r2, #31
 8000c16:	2101      	movs	r1, #1
 8000c18:	fa01 f202 	lsl.w	r2, r1, r2
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	f000 810c 	beq.w	8000e3c <HAL_RCC_OscConfig+0x2fc>
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	f040 8106 	bne.w	8000e3c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000c30:	2301      	movs	r3, #1
 8000c32:	f000 be86 	b.w	8001942 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c40:	d106      	bne.n	8000c50 <HAL_RCC_OscConfig+0x110>
 8000c42:	4b7d      	ldr	r3, [pc, #500]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a7c      	ldr	r2, [pc, #496]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c4c:	6013      	str	r3, [r2, #0]
 8000c4e:	e030      	b.n	8000cb2 <HAL_RCC_OscConfig+0x172>
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d10c      	bne.n	8000c74 <HAL_RCC_OscConfig+0x134>
 8000c5a:	4b77      	ldr	r3, [pc, #476]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a76      	ldr	r2, [pc, #472]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000c60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c64:	6013      	str	r3, [r2, #0]
 8000c66:	4b74      	ldr	r3, [pc, #464]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a73      	ldr	r2, [pc, #460]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000c6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c70:	6013      	str	r3, [r2, #0]
 8000c72:	e01e      	b.n	8000cb2 <HAL_RCC_OscConfig+0x172>
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c7e:	d10c      	bne.n	8000c9a <HAL_RCC_OscConfig+0x15a>
 8000c80:	4b6d      	ldr	r3, [pc, #436]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a6c      	ldr	r2, [pc, #432]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000c86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c8a:	6013      	str	r3, [r2, #0]
 8000c8c:	4b6a      	ldr	r3, [pc, #424]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a69      	ldr	r2, [pc, #420]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000c92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c96:	6013      	str	r3, [r2, #0]
 8000c98:	e00b      	b.n	8000cb2 <HAL_RCC_OscConfig+0x172>
 8000c9a:	4b67      	ldr	r3, [pc, #412]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a66      	ldr	r2, [pc, #408]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000ca0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ca4:	6013      	str	r3, [r2, #0]
 8000ca6:	4b64      	ldr	r3, [pc, #400]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a63      	ldr	r2, [pc, #396]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000cac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cb0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000cb2:	4b61      	ldr	r3, [pc, #388]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb6:	f023 020f 	bic.w	r2, r3, #15
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	495d      	ldr	r1, [pc, #372]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d059      	beq.n	8000d84 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cd0:	f7ff fc78 	bl	80005c4 <HAL_GetTick>
 8000cd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cd8:	e00a      	b.n	8000cf0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cda:	f7ff fc73 	bl	80005c4 <HAL_GetTick>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	2b64      	cmp	r3, #100	; 0x64
 8000ce8:	d902      	bls.n	8000cf0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000cea:	2303      	movs	r3, #3
 8000cec:	f000 be29 	b.w	8001942 <HAL_RCC_OscConfig+0xe02>
 8000cf0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cf4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cf8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000cfc:	fa93 f3a3 	rbit	r3, r3
 8000d00:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000d04:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d08:	fab3 f383 	clz	r3, r3
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	095b      	lsrs	r3, r3, #5
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d102      	bne.n	8000d22 <HAL_RCC_OscConfig+0x1e2>
 8000d1c:	4b46      	ldr	r3, [pc, #280]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	e015      	b.n	8000d4e <HAL_RCC_OscConfig+0x20e>
 8000d22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d26:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d2a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000d2e:	fa93 f3a3 	rbit	r3, r3
 8000d32:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000d36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d3a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000d3e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000d42:	fa93 f3a3 	rbit	r3, r3
 8000d46:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000d4a:	4b3b      	ldr	r3, [pc, #236]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d4e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d52:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000d56:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000d5a:	fa92 f2a2 	rbit	r2, r2
 8000d5e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000d62:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000d66:	fab2 f282 	clz	r2, r2
 8000d6a:	b2d2      	uxtb	r2, r2
 8000d6c:	f042 0220 	orr.w	r2, r2, #32
 8000d70:	b2d2      	uxtb	r2, r2
 8000d72:	f002 021f 	and.w	r2, r2, #31
 8000d76:	2101      	movs	r1, #1
 8000d78:	fa01 f202 	lsl.w	r2, r1, r2
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d0ab      	beq.n	8000cda <HAL_RCC_OscConfig+0x19a>
 8000d82:	e05c      	b.n	8000e3e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d84:	f7ff fc1e 	bl	80005c4 <HAL_GetTick>
 8000d88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d8c:	e00a      	b.n	8000da4 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d8e:	f7ff fc19 	bl	80005c4 <HAL_GetTick>
 8000d92:	4602      	mov	r2, r0
 8000d94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	2b64      	cmp	r3, #100	; 0x64
 8000d9c:	d902      	bls.n	8000da4 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	f000 bdcf 	b.w	8001942 <HAL_RCC_OscConfig+0xe02>
 8000da4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000da8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dac:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000db0:	fa93 f3a3 	rbit	r3, r3
 8000db4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000db8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dbc:	fab3 f383 	clz	r3, r3
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	095b      	lsrs	r3, r3, #5
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	f043 0301 	orr.w	r3, r3, #1
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d102      	bne.n	8000dd6 <HAL_RCC_OscConfig+0x296>
 8000dd0:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	e015      	b.n	8000e02 <HAL_RCC_OscConfig+0x2c2>
 8000dd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dda:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dde:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000de2:	fa93 f3a3 	rbit	r3, r3
 8000de6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000dea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dee:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000df2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000df6:	fa93 f3a3 	rbit	r3, r3
 8000dfa:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e06:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000e0a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000e0e:	fa92 f2a2 	rbit	r2, r2
 8000e12:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000e16:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000e1a:	fab2 f282 	clz	r2, r2
 8000e1e:	b2d2      	uxtb	r2, r2
 8000e20:	f042 0220 	orr.w	r2, r2, #32
 8000e24:	b2d2      	uxtb	r2, r2
 8000e26:	f002 021f 	and.w	r2, r2, #31
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e30:	4013      	ands	r3, r2
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d1ab      	bne.n	8000d8e <HAL_RCC_OscConfig+0x24e>
 8000e36:	e002      	b.n	8000e3e <HAL_RCC_OscConfig+0x2fe>
 8000e38:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f003 0302 	and.w	r3, r3, #2
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	f000 816f 	beq.w	800112c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e4e:	4bd0      	ldr	r3, [pc, #832]	; (8001190 <HAL_RCC_OscConfig+0x650>)
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f003 030c 	and.w	r3, r3, #12
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d00b      	beq.n	8000e72 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e5a:	4bcd      	ldr	r3, [pc, #820]	; (8001190 <HAL_RCC_OscConfig+0x650>)
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f003 030c 	and.w	r3, r3, #12
 8000e62:	2b08      	cmp	r3, #8
 8000e64:	d16c      	bne.n	8000f40 <HAL_RCC_OscConfig+0x400>
 8000e66:	4bca      	ldr	r3, [pc, #808]	; (8001190 <HAL_RCC_OscConfig+0x650>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d166      	bne.n	8000f40 <HAL_RCC_OscConfig+0x400>
 8000e72:	2302      	movs	r3, #2
 8000e74:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e78:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000e7c:	fa93 f3a3 	rbit	r3, r3
 8000e80:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000e84:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e88:	fab3 f383 	clz	r3, r3
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	095b      	lsrs	r3, r3, #5
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d102      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x362>
 8000e9c:	4bbc      	ldr	r3, [pc, #752]	; (8001190 <HAL_RCC_OscConfig+0x650>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	e013      	b.n	8000eca <HAL_RCC_OscConfig+0x38a>
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000eac:	fa93 f3a3 	rbit	r3, r3
 8000eb0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000eba:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000ebe:	fa93 f3a3 	rbit	r3, r3
 8000ec2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000ec6:	4bb2      	ldr	r3, [pc, #712]	; (8001190 <HAL_RCC_OscConfig+0x650>)
 8000ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eca:	2202      	movs	r2, #2
 8000ecc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000ed0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000ed4:	fa92 f2a2 	rbit	r2, r2
 8000ed8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8000edc:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000ee0:	fab2 f282 	clz	r2, r2
 8000ee4:	b2d2      	uxtb	r2, r2
 8000ee6:	f042 0220 	orr.w	r2, r2, #32
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	f002 021f 	and.w	r2, r2, #31
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d007      	beq.n	8000f0c <HAL_RCC_OscConfig+0x3cc>
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	691b      	ldr	r3, [r3, #16]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d002      	beq.n	8000f0c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	f000 bd1b 	b.w	8001942 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f0c:	4ba0      	ldr	r3, [pc, #640]	; (8001190 <HAL_RCC_OscConfig+0x650>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	21f8      	movs	r1, #248	; 0xf8
 8000f1c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f20:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000f24:	fa91 f1a1 	rbit	r1, r1
 8000f28:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8000f2c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8000f30:	fab1 f181 	clz	r1, r1
 8000f34:	b2c9      	uxtb	r1, r1
 8000f36:	408b      	lsls	r3, r1
 8000f38:	4995      	ldr	r1, [pc, #596]	; (8001190 <HAL_RCC_OscConfig+0x650>)
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f3e:	e0f5      	b.n	800112c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	691b      	ldr	r3, [r3, #16]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	f000 8085 	beq.w	8001056 <HAL_RCC_OscConfig+0x516>
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f52:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000f56:	fa93 f3a3 	rbit	r3, r3
 8000f5a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8000f5e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f62:	fab3 f383 	clz	r3, r3
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f6c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	461a      	mov	r2, r3
 8000f74:	2301      	movs	r3, #1
 8000f76:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f78:	f7ff fb24 	bl	80005c4 <HAL_GetTick>
 8000f7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f80:	e00a      	b.n	8000f98 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f82:	f7ff fb1f 	bl	80005c4 <HAL_GetTick>
 8000f86:	4602      	mov	r2, r0
 8000f88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d902      	bls.n	8000f98 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8000f92:	2303      	movs	r3, #3
 8000f94:	f000 bcd5 	b.w	8001942 <HAL_RCC_OscConfig+0xe02>
 8000f98:	2302      	movs	r3, #2
 8000f9a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f9e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000fa2:	fa93 f3a3 	rbit	r3, r3
 8000fa6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8000faa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fae:	fab3 f383 	clz	r3, r3
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	095b      	lsrs	r3, r3, #5
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d102      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x488>
 8000fc2:	4b73      	ldr	r3, [pc, #460]	; (8001190 <HAL_RCC_OscConfig+0x650>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	e013      	b.n	8000ff0 <HAL_RCC_OscConfig+0x4b0>
 8000fc8:	2302      	movs	r3, #2
 8000fca:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fce:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000fd2:	fa93 f3a3 	rbit	r3, r3
 8000fd6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000fda:	2302      	movs	r3, #2
 8000fdc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000fe0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000fe4:	fa93 f3a3 	rbit	r3, r3
 8000fe8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8000fec:	4b68      	ldr	r3, [pc, #416]	; (8001190 <HAL_RCC_OscConfig+0x650>)
 8000fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8000ff6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000ffa:	fa92 f2a2 	rbit	r2, r2
 8000ffe:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001002:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001006:	fab2 f282 	clz	r2, r2
 800100a:	b2d2      	uxtb	r2, r2
 800100c:	f042 0220 	orr.w	r2, r2, #32
 8001010:	b2d2      	uxtb	r2, r2
 8001012:	f002 021f 	and.w	r2, r2, #31
 8001016:	2101      	movs	r1, #1
 8001018:	fa01 f202 	lsl.w	r2, r1, r2
 800101c:	4013      	ands	r3, r2
 800101e:	2b00      	cmp	r3, #0
 8001020:	d0af      	beq.n	8000f82 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001022:	4b5b      	ldr	r3, [pc, #364]	; (8001190 <HAL_RCC_OscConfig+0x650>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	695b      	ldr	r3, [r3, #20]
 8001030:	21f8      	movs	r1, #248	; 0xf8
 8001032:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001036:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800103a:	fa91 f1a1 	rbit	r1, r1
 800103e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001042:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001046:	fab1 f181 	clz	r1, r1
 800104a:	b2c9      	uxtb	r1, r1
 800104c:	408b      	lsls	r3, r1
 800104e:	4950      	ldr	r1, [pc, #320]	; (8001190 <HAL_RCC_OscConfig+0x650>)
 8001050:	4313      	orrs	r3, r2
 8001052:	600b      	str	r3, [r1, #0]
 8001054:	e06a      	b.n	800112c <HAL_RCC_OscConfig+0x5ec>
 8001056:	2301      	movs	r3, #1
 8001058:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800105c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001060:	fa93 f3a3 	rbit	r3, r3
 8001064:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001068:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800106c:	fab3 f383 	clz	r3, r3
 8001070:	b2db      	uxtb	r3, r3
 8001072:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001076:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	461a      	mov	r2, r3
 800107e:	2300      	movs	r3, #0
 8001080:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001082:	f7ff fa9f 	bl	80005c4 <HAL_GetTick>
 8001086:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800108a:	e00a      	b.n	80010a2 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800108c:	f7ff fa9a 	bl	80005c4 <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	2b02      	cmp	r3, #2
 800109a:	d902      	bls.n	80010a2 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 800109c:	2303      	movs	r3, #3
 800109e:	f000 bc50 	b.w	8001942 <HAL_RCC_OscConfig+0xe02>
 80010a2:	2302      	movs	r3, #2
 80010a4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80010ac:	fa93 f3a3 	rbit	r3, r3
 80010b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80010b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010b8:	fab3 f383 	clz	r3, r3
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	095b      	lsrs	r3, r3, #5
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d102      	bne.n	80010d2 <HAL_RCC_OscConfig+0x592>
 80010cc:	4b30      	ldr	r3, [pc, #192]	; (8001190 <HAL_RCC_OscConfig+0x650>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	e013      	b.n	80010fa <HAL_RCC_OscConfig+0x5ba>
 80010d2:	2302      	movs	r3, #2
 80010d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80010dc:	fa93 f3a3 	rbit	r3, r3
 80010e0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80010e4:	2302      	movs	r3, #2
 80010e6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80010ea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80010ee:	fa93 f3a3 	rbit	r3, r3
 80010f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80010f6:	4b26      	ldr	r3, [pc, #152]	; (8001190 <HAL_RCC_OscConfig+0x650>)
 80010f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fa:	2202      	movs	r2, #2
 80010fc:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001100:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001104:	fa92 f2a2 	rbit	r2, r2
 8001108:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800110c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001110:	fab2 f282 	clz	r2, r2
 8001114:	b2d2      	uxtb	r2, r2
 8001116:	f042 0220 	orr.w	r2, r2, #32
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	f002 021f 	and.w	r2, r2, #31
 8001120:	2101      	movs	r1, #1
 8001122:	fa01 f202 	lsl.w	r2, r1, r2
 8001126:	4013      	ands	r3, r2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1af      	bne.n	800108c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0308 	and.w	r3, r3, #8
 8001136:	2b00      	cmp	r3, #0
 8001138:	f000 80da 	beq.w	80012f0 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d069      	beq.n	800121a <HAL_RCC_OscConfig+0x6da>
 8001146:	2301      	movs	r3, #1
 8001148:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001150:	fa93 f3a3 	rbit	r3, r3
 8001154:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001158:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800115c:	fab3 f383 	clz	r3, r3
 8001160:	b2db      	uxtb	r3, r3
 8001162:	461a      	mov	r2, r3
 8001164:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <HAL_RCC_OscConfig+0x654>)
 8001166:	4413      	add	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	461a      	mov	r2, r3
 800116c:	2301      	movs	r3, #1
 800116e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001170:	f7ff fa28 	bl	80005c4 <HAL_GetTick>
 8001174:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001178:	e00e      	b.n	8001198 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800117a:	f7ff fa23 	bl	80005c4 <HAL_GetTick>
 800117e:	4602      	mov	r2, r0
 8001180:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d906      	bls.n	8001198 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e3d9      	b.n	8001942 <HAL_RCC_OscConfig+0xe02>
 800118e:	bf00      	nop
 8001190:	40021000 	.word	0x40021000
 8001194:	10908120 	.word	0x10908120
 8001198:	2302      	movs	r3, #2
 800119a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800119e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80011a2:	fa93 f3a3 	rbit	r3, r3
 80011a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80011aa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80011ae:	2202      	movs	r2, #2
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	fa93 f2a3 	rbit	r2, r3
 80011bc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80011c6:	2202      	movs	r2, #2
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	fa93 f2a3 	rbit	r2, r3
 80011d4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80011d8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011da:	4ba5      	ldr	r3, [pc, #660]	; (8001470 <HAL_RCC_OscConfig+0x930>)
 80011dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011de:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80011e2:	2102      	movs	r1, #2
 80011e4:	6019      	str	r1, [r3, #0]
 80011e6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	fa93 f1a3 	rbit	r1, r3
 80011f0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80011f4:	6019      	str	r1, [r3, #0]
  return result;
 80011f6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	fab3 f383 	clz	r3, r3
 8001200:	b2db      	uxtb	r3, r3
 8001202:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001206:	b2db      	uxtb	r3, r3
 8001208:	f003 031f 	and.w	r3, r3, #31
 800120c:	2101      	movs	r1, #1
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
 8001212:	4013      	ands	r3, r2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d0b0      	beq.n	800117a <HAL_RCC_OscConfig+0x63a>
 8001218:	e06a      	b.n	80012f0 <HAL_RCC_OscConfig+0x7b0>
 800121a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800121e:	2201      	movs	r2, #1
 8001220:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001222:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	fa93 f2a3 	rbit	r2, r3
 800122c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001230:	601a      	str	r2, [r3, #0]
  return result;
 8001232:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001236:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001238:	fab3 f383 	clz	r3, r3
 800123c:	b2db      	uxtb	r3, r3
 800123e:	461a      	mov	r2, r3
 8001240:	4b8c      	ldr	r3, [pc, #560]	; (8001474 <HAL_RCC_OscConfig+0x934>)
 8001242:	4413      	add	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	461a      	mov	r2, r3
 8001248:	2300      	movs	r3, #0
 800124a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800124c:	f7ff f9ba 	bl	80005c4 <HAL_GetTick>
 8001250:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001254:	e009      	b.n	800126a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001256:	f7ff f9b5 	bl	80005c4 <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b02      	cmp	r3, #2
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e36b      	b.n	8001942 <HAL_RCC_OscConfig+0xe02>
 800126a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800126e:	2202      	movs	r2, #2
 8001270:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001272:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	fa93 f2a3 	rbit	r2, r3
 800127c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001286:	2202      	movs	r2, #2
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	fa93 f2a3 	rbit	r2, r3
 8001294:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800129e:	2202      	movs	r2, #2
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	fa93 f2a3 	rbit	r2, r3
 80012ac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012b0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b2:	4b6f      	ldr	r3, [pc, #444]	; (8001470 <HAL_RCC_OscConfig+0x930>)
 80012b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012b6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80012ba:	2102      	movs	r1, #2
 80012bc:	6019      	str	r1, [r3, #0]
 80012be:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	fa93 f1a3 	rbit	r1, r3
 80012c8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80012cc:	6019      	str	r1, [r3, #0]
  return result;
 80012ce:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	fab3 f383 	clz	r3, r3
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	f003 031f 	and.w	r3, r3, #31
 80012e4:	2101      	movs	r1, #1
 80012e6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ea:	4013      	ands	r3, r2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1b2      	bne.n	8001256 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0304 	and.w	r3, r3, #4
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f000 8158 	beq.w	80015b0 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001300:	2300      	movs	r3, #0
 8001302:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001306:	4b5a      	ldr	r3, [pc, #360]	; (8001470 <HAL_RCC_OscConfig+0x930>)
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d112      	bne.n	8001338 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001312:	4b57      	ldr	r3, [pc, #348]	; (8001470 <HAL_RCC_OscConfig+0x930>)
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	4a56      	ldr	r2, [pc, #344]	; (8001470 <HAL_RCC_OscConfig+0x930>)
 8001318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800131c:	61d3      	str	r3, [r2, #28]
 800131e:	4b54      	ldr	r3, [pc, #336]	; (8001470 <HAL_RCC_OscConfig+0x930>)
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001326:	f107 0308 	add.w	r3, r7, #8
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	f107 0308 	add.w	r3, r7, #8
 8001330:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001332:	2301      	movs	r3, #1
 8001334:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001338:	4b4f      	ldr	r3, [pc, #316]	; (8001478 <HAL_RCC_OscConfig+0x938>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001340:	2b00      	cmp	r3, #0
 8001342:	d11a      	bne.n	800137a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001344:	4b4c      	ldr	r3, [pc, #304]	; (8001478 <HAL_RCC_OscConfig+0x938>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a4b      	ldr	r2, [pc, #300]	; (8001478 <HAL_RCC_OscConfig+0x938>)
 800134a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800134e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001350:	f7ff f938 	bl	80005c4 <HAL_GetTick>
 8001354:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001358:	e009      	b.n	800136e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800135a:	f7ff f933 	bl	80005c4 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b64      	cmp	r3, #100	; 0x64
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e2e9      	b.n	8001942 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800136e:	4b42      	ldr	r3, [pc, #264]	; (8001478 <HAL_RCC_OscConfig+0x938>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001376:	2b00      	cmp	r3, #0
 8001378:	d0ef      	beq.n	800135a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d106      	bne.n	8001392 <HAL_RCC_OscConfig+0x852>
 8001384:	4b3a      	ldr	r3, [pc, #232]	; (8001470 <HAL_RCC_OscConfig+0x930>)
 8001386:	6a1b      	ldr	r3, [r3, #32]
 8001388:	4a39      	ldr	r2, [pc, #228]	; (8001470 <HAL_RCC_OscConfig+0x930>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	6213      	str	r3, [r2, #32]
 8001390:	e02f      	b.n	80013f2 <HAL_RCC_OscConfig+0x8b2>
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d10c      	bne.n	80013b6 <HAL_RCC_OscConfig+0x876>
 800139c:	4b34      	ldr	r3, [pc, #208]	; (8001470 <HAL_RCC_OscConfig+0x930>)
 800139e:	6a1b      	ldr	r3, [r3, #32]
 80013a0:	4a33      	ldr	r2, [pc, #204]	; (8001470 <HAL_RCC_OscConfig+0x930>)
 80013a2:	f023 0301 	bic.w	r3, r3, #1
 80013a6:	6213      	str	r3, [r2, #32]
 80013a8:	4b31      	ldr	r3, [pc, #196]	; (8001470 <HAL_RCC_OscConfig+0x930>)
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	4a30      	ldr	r2, [pc, #192]	; (8001470 <HAL_RCC_OscConfig+0x930>)
 80013ae:	f023 0304 	bic.w	r3, r3, #4
 80013b2:	6213      	str	r3, [r2, #32]
 80013b4:	e01d      	b.n	80013f2 <HAL_RCC_OscConfig+0x8b2>
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	2b05      	cmp	r3, #5
 80013be:	d10c      	bne.n	80013da <HAL_RCC_OscConfig+0x89a>
 80013c0:	4b2b      	ldr	r3, [pc, #172]	; (8001470 <HAL_RCC_OscConfig+0x930>)
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	4a2a      	ldr	r2, [pc, #168]	; (8001470 <HAL_RCC_OscConfig+0x930>)
 80013c6:	f043 0304 	orr.w	r3, r3, #4
 80013ca:	6213      	str	r3, [r2, #32]
 80013cc:	4b28      	ldr	r3, [pc, #160]	; (8001470 <HAL_RCC_OscConfig+0x930>)
 80013ce:	6a1b      	ldr	r3, [r3, #32]
 80013d0:	4a27      	ldr	r2, [pc, #156]	; (8001470 <HAL_RCC_OscConfig+0x930>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	6213      	str	r3, [r2, #32]
 80013d8:	e00b      	b.n	80013f2 <HAL_RCC_OscConfig+0x8b2>
 80013da:	4b25      	ldr	r3, [pc, #148]	; (8001470 <HAL_RCC_OscConfig+0x930>)
 80013dc:	6a1b      	ldr	r3, [r3, #32]
 80013de:	4a24      	ldr	r2, [pc, #144]	; (8001470 <HAL_RCC_OscConfig+0x930>)
 80013e0:	f023 0301 	bic.w	r3, r3, #1
 80013e4:	6213      	str	r3, [r2, #32]
 80013e6:	4b22      	ldr	r3, [pc, #136]	; (8001470 <HAL_RCC_OscConfig+0x930>)
 80013e8:	6a1b      	ldr	r3, [r3, #32]
 80013ea:	4a21      	ldr	r2, [pc, #132]	; (8001470 <HAL_RCC_OscConfig+0x930>)
 80013ec:	f023 0304 	bic.w	r3, r3, #4
 80013f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d06b      	beq.n	80014d4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fc:	f7ff f8e2 	bl	80005c4 <HAL_GetTick>
 8001400:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001404:	e00b      	b.n	800141e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001406:	f7ff f8dd 	bl	80005c4 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	f241 3288 	movw	r2, #5000	; 0x1388
 8001416:	4293      	cmp	r3, r2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e291      	b.n	8001942 <HAL_RCC_OscConfig+0xe02>
 800141e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001422:	2202      	movs	r2, #2
 8001424:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001426:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	fa93 f2a3 	rbit	r2, r3
 8001430:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800143a:	2202      	movs	r2, #2
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	fa93 f2a3 	rbit	r2, r3
 8001448:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800144c:	601a      	str	r2, [r3, #0]
  return result;
 800144e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001452:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001454:	fab3 f383 	clz	r3, r3
 8001458:	b2db      	uxtb	r3, r3
 800145a:	095b      	lsrs	r3, r3, #5
 800145c:	b2db      	uxtb	r3, r3
 800145e:	f043 0302 	orr.w	r3, r3, #2
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d109      	bne.n	800147c <HAL_RCC_OscConfig+0x93c>
 8001468:	4b01      	ldr	r3, [pc, #4]	; (8001470 <HAL_RCC_OscConfig+0x930>)
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	e014      	b.n	8001498 <HAL_RCC_OscConfig+0x958>
 800146e:	bf00      	nop
 8001470:	40021000 	.word	0x40021000
 8001474:	10908120 	.word	0x10908120
 8001478:	40007000 	.word	0x40007000
 800147c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001480:	2202      	movs	r2, #2
 8001482:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001484:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	fa93 f2a3 	rbit	r2, r3
 800148e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	4bbb      	ldr	r3, [pc, #748]	; (8001784 <HAL_RCC_OscConfig+0xc44>)
 8001496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001498:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800149c:	2102      	movs	r1, #2
 800149e:	6011      	str	r1, [r2, #0]
 80014a0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80014a4:	6812      	ldr	r2, [r2, #0]
 80014a6:	fa92 f1a2 	rbit	r1, r2
 80014aa:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80014ae:	6011      	str	r1, [r2, #0]
  return result;
 80014b0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80014b4:	6812      	ldr	r2, [r2, #0]
 80014b6:	fab2 f282 	clz	r2, r2
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014c0:	b2d2      	uxtb	r2, r2
 80014c2:	f002 021f 	and.w	r2, r2, #31
 80014c6:	2101      	movs	r1, #1
 80014c8:	fa01 f202 	lsl.w	r2, r1, r2
 80014cc:	4013      	ands	r3, r2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d099      	beq.n	8001406 <HAL_RCC_OscConfig+0x8c6>
 80014d2:	e063      	b.n	800159c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d4:	f7ff f876 	bl	80005c4 <HAL_GetTick>
 80014d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014dc:	e00b      	b.n	80014f6 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014de:	f7ff f871 	bl	80005c4 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e225      	b.n	8001942 <HAL_RCC_OscConfig+0xe02>
 80014f6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80014fa:	2202      	movs	r2, #2
 80014fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014fe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	fa93 f2a3 	rbit	r2, r3
 8001508:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001512:	2202      	movs	r2, #2
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	fa93 f2a3 	rbit	r2, r3
 8001520:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001524:	601a      	str	r2, [r3, #0]
  return result;
 8001526:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800152a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800152c:	fab3 f383 	clz	r3, r3
 8001530:	b2db      	uxtb	r3, r3
 8001532:	095b      	lsrs	r3, r3, #5
 8001534:	b2db      	uxtb	r3, r3
 8001536:	f043 0302 	orr.w	r3, r3, #2
 800153a:	b2db      	uxtb	r3, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d102      	bne.n	8001546 <HAL_RCC_OscConfig+0xa06>
 8001540:	4b90      	ldr	r3, [pc, #576]	; (8001784 <HAL_RCC_OscConfig+0xc44>)
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	e00d      	b.n	8001562 <HAL_RCC_OscConfig+0xa22>
 8001546:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800154a:	2202      	movs	r2, #2
 800154c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	fa93 f2a3 	rbit	r2, r3
 8001558:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	4b89      	ldr	r3, [pc, #548]	; (8001784 <HAL_RCC_OscConfig+0xc44>)
 8001560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001562:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001566:	2102      	movs	r1, #2
 8001568:	6011      	str	r1, [r2, #0]
 800156a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800156e:	6812      	ldr	r2, [r2, #0]
 8001570:	fa92 f1a2 	rbit	r1, r2
 8001574:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001578:	6011      	str	r1, [r2, #0]
  return result;
 800157a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800157e:	6812      	ldr	r2, [r2, #0]
 8001580:	fab2 f282 	clz	r2, r2
 8001584:	b2d2      	uxtb	r2, r2
 8001586:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	f002 021f 	and.w	r2, r2, #31
 8001590:	2101      	movs	r1, #1
 8001592:	fa01 f202 	lsl.w	r2, r1, r2
 8001596:	4013      	ands	r3, r2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1a0      	bne.n	80014de <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800159c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d105      	bne.n	80015b0 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015a4:	4b77      	ldr	r3, [pc, #476]	; (8001784 <HAL_RCC_OscConfig+0xc44>)
 80015a6:	69db      	ldr	r3, [r3, #28]
 80015a8:	4a76      	ldr	r2, [pc, #472]	; (8001784 <HAL_RCC_OscConfig+0xc44>)
 80015aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015ae:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015b0:	1d3b      	adds	r3, r7, #4
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f000 81c2 	beq.w	8001940 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015bc:	4b71      	ldr	r3, [pc, #452]	; (8001784 <HAL_RCC_OscConfig+0xc44>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f003 030c 	and.w	r3, r3, #12
 80015c4:	2b08      	cmp	r3, #8
 80015c6:	f000 819c 	beq.w	8001902 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	69db      	ldr	r3, [r3, #28]
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	f040 8114 	bne.w	80017fe <HAL_RCC_OscConfig+0xcbe>
 80015d6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80015da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	fa93 f2a3 	rbit	r2, r3
 80015ea:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80015ee:	601a      	str	r2, [r3, #0]
  return result;
 80015f0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80015f4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015f6:	fab3 f383 	clz	r3, r3
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001600:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	461a      	mov	r2, r3
 8001608:	2300      	movs	r3, #0
 800160a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160c:	f7fe ffda 	bl	80005c4 <HAL_GetTick>
 8001610:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001614:	e009      	b.n	800162a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001616:	f7fe ffd5 	bl	80005c4 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e18b      	b.n	8001942 <HAL_RCC_OscConfig+0xe02>
 800162a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800162e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001632:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001634:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	fa93 f2a3 	rbit	r2, r3
 800163e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001642:	601a      	str	r2, [r3, #0]
  return result;
 8001644:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001648:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800164a:	fab3 f383 	clz	r3, r3
 800164e:	b2db      	uxtb	r3, r3
 8001650:	095b      	lsrs	r3, r3, #5
 8001652:	b2db      	uxtb	r3, r3
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b01      	cmp	r3, #1
 800165c:	d102      	bne.n	8001664 <HAL_RCC_OscConfig+0xb24>
 800165e:	4b49      	ldr	r3, [pc, #292]	; (8001784 <HAL_RCC_OscConfig+0xc44>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	e01b      	b.n	800169c <HAL_RCC_OscConfig+0xb5c>
 8001664:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001668:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800166c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	fa93 f2a3 	rbit	r2, r3
 8001678:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001682:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	fa93 f2a3 	rbit	r2, r3
 8001692:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	4b3a      	ldr	r3, [pc, #232]	; (8001784 <HAL_RCC_OscConfig+0xc44>)
 800169a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80016a0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80016a4:	6011      	str	r1, [r2, #0]
 80016a6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80016aa:	6812      	ldr	r2, [r2, #0]
 80016ac:	fa92 f1a2 	rbit	r1, r2
 80016b0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80016b4:	6011      	str	r1, [r2, #0]
  return result;
 80016b6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80016ba:	6812      	ldr	r2, [r2, #0]
 80016bc:	fab2 f282 	clz	r2, r2
 80016c0:	b2d2      	uxtb	r2, r2
 80016c2:	f042 0220 	orr.w	r2, r2, #32
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	f002 021f 	and.w	r2, r2, #31
 80016cc:	2101      	movs	r1, #1
 80016ce:	fa01 f202 	lsl.w	r2, r1, r2
 80016d2:	4013      	ands	r3, r2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d19e      	bne.n	8001616 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016d8:	4b2a      	ldr	r3, [pc, #168]	; (8001784 <HAL_RCC_OscConfig+0xc44>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	430b      	orrs	r3, r1
 80016ee:	4925      	ldr	r1, [pc, #148]	; (8001784 <HAL_RCC_OscConfig+0xc44>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	604b      	str	r3, [r1, #4]
 80016f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80016fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	fa93 f2a3 	rbit	r2, r3
 8001708:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800170c:	601a      	str	r2, [r3, #0]
  return result;
 800170e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001712:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001714:	fab3 f383 	clz	r3, r3
 8001718:	b2db      	uxtb	r3, r3
 800171a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800171e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	461a      	mov	r2, r3
 8001726:	2301      	movs	r3, #1
 8001728:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172a:	f7fe ff4b 	bl	80005c4 <HAL_GetTick>
 800172e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001732:	e009      	b.n	8001748 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001734:	f7fe ff46 	bl	80005c4 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e0fc      	b.n	8001942 <HAL_RCC_OscConfig+0xe02>
 8001748:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800174c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001750:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001752:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	fa93 f2a3 	rbit	r2, r3
 800175c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001760:	601a      	str	r2, [r3, #0]
  return result;
 8001762:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001766:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001768:	fab3 f383 	clz	r3, r3
 800176c:	b2db      	uxtb	r3, r3
 800176e:	095b      	lsrs	r3, r3, #5
 8001770:	b2db      	uxtb	r3, r3
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	b2db      	uxtb	r3, r3
 8001778:	2b01      	cmp	r3, #1
 800177a:	d105      	bne.n	8001788 <HAL_RCC_OscConfig+0xc48>
 800177c:	4b01      	ldr	r3, [pc, #4]	; (8001784 <HAL_RCC_OscConfig+0xc44>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	e01e      	b.n	80017c0 <HAL_RCC_OscConfig+0xc80>
 8001782:	bf00      	nop
 8001784:	40021000 	.word	0x40021000
 8001788:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800178c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001790:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001792:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	fa93 f2a3 	rbit	r2, r3
 800179c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	fa93 f2a3 	rbit	r2, r3
 80017b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	4b63      	ldr	r3, [pc, #396]	; (800194c <HAL_RCC_OscConfig+0xe0c>)
 80017be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80017c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80017c8:	6011      	str	r1, [r2, #0]
 80017ca:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80017ce:	6812      	ldr	r2, [r2, #0]
 80017d0:	fa92 f1a2 	rbit	r1, r2
 80017d4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80017d8:	6011      	str	r1, [r2, #0]
  return result;
 80017da:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80017de:	6812      	ldr	r2, [r2, #0]
 80017e0:	fab2 f282 	clz	r2, r2
 80017e4:	b2d2      	uxtb	r2, r2
 80017e6:	f042 0220 	orr.w	r2, r2, #32
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	f002 021f 	and.w	r2, r2, #31
 80017f0:	2101      	movs	r1, #1
 80017f2:	fa01 f202 	lsl.w	r2, r1, r2
 80017f6:	4013      	ands	r3, r2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d09b      	beq.n	8001734 <HAL_RCC_OscConfig+0xbf4>
 80017fc:	e0a0      	b.n	8001940 <HAL_RCC_OscConfig+0xe00>
 80017fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001802:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001806:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001808:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	fa93 f2a3 	rbit	r2, r3
 8001812:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001816:	601a      	str	r2, [r3, #0]
  return result;
 8001818:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800181c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800181e:	fab3 f383 	clz	r3, r3
 8001822:	b2db      	uxtb	r3, r3
 8001824:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001828:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	461a      	mov	r2, r3
 8001830:	2300      	movs	r3, #0
 8001832:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001834:	f7fe fec6 	bl	80005c4 <HAL_GetTick>
 8001838:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800183c:	e009      	b.n	8001852 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800183e:	f7fe fec1 	bl	80005c4 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e077      	b.n	8001942 <HAL_RCC_OscConfig+0xe02>
 8001852:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001856:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800185a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	fa93 f2a3 	rbit	r2, r3
 8001866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800186a:	601a      	str	r2, [r3, #0]
  return result;
 800186c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001870:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001872:	fab3 f383 	clz	r3, r3
 8001876:	b2db      	uxtb	r3, r3
 8001878:	095b      	lsrs	r3, r3, #5
 800187a:	b2db      	uxtb	r3, r3
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b01      	cmp	r3, #1
 8001884:	d102      	bne.n	800188c <HAL_RCC_OscConfig+0xd4c>
 8001886:	4b31      	ldr	r3, [pc, #196]	; (800194c <HAL_RCC_OscConfig+0xe0c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	e01b      	b.n	80018c4 <HAL_RCC_OscConfig+0xd84>
 800188c:	f107 0320 	add.w	r3, r7, #32
 8001890:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001894:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001896:	f107 0320 	add.w	r3, r7, #32
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	fa93 f2a3 	rbit	r2, r3
 80018a0:	f107 031c 	add.w	r3, r7, #28
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	f107 0318 	add.w	r3, r7, #24
 80018aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	f107 0318 	add.w	r3, r7, #24
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	fa93 f2a3 	rbit	r2, r3
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	4b22      	ldr	r3, [pc, #136]	; (800194c <HAL_RCC_OscConfig+0xe0c>)
 80018c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c4:	f107 0210 	add.w	r2, r7, #16
 80018c8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80018cc:	6011      	str	r1, [r2, #0]
 80018ce:	f107 0210 	add.w	r2, r7, #16
 80018d2:	6812      	ldr	r2, [r2, #0]
 80018d4:	fa92 f1a2 	rbit	r1, r2
 80018d8:	f107 020c 	add.w	r2, r7, #12
 80018dc:	6011      	str	r1, [r2, #0]
  return result;
 80018de:	f107 020c 	add.w	r2, r7, #12
 80018e2:	6812      	ldr	r2, [r2, #0]
 80018e4:	fab2 f282 	clz	r2, r2
 80018e8:	b2d2      	uxtb	r2, r2
 80018ea:	f042 0220 	orr.w	r2, r2, #32
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	f002 021f 	and.w	r2, r2, #31
 80018f4:	2101      	movs	r1, #1
 80018f6:	fa01 f202 	lsl.w	r2, r1, r2
 80018fa:	4013      	ands	r3, r2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d19e      	bne.n	800183e <HAL_RCC_OscConfig+0xcfe>
 8001900:	e01e      	b.n	8001940 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001902:	1d3b      	adds	r3, r7, #4
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	69db      	ldr	r3, [r3, #28]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d101      	bne.n	8001910 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e018      	b.n	8001942 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001910:	4b0e      	ldr	r3, [pc, #56]	; (800194c <HAL_RCC_OscConfig+0xe0c>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001918:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800191c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001920:	1d3b      	adds	r3, r7, #4
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6a1b      	ldr	r3, [r3, #32]
 8001926:	429a      	cmp	r2, r3
 8001928:	d108      	bne.n	800193c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800192a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800192e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001938:	429a      	cmp	r2, r3
 800193a:	d001      	beq.n	8001940 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e000      	b.n	8001942 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40021000 	.word	0x40021000

08001950 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b09e      	sub	sp, #120	; 0x78
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800195a:	2300      	movs	r3, #0
 800195c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e162      	b.n	8001c2e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001968:	4b90      	ldr	r3, [pc, #576]	; (8001bac <HAL_RCC_ClockConfig+0x25c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	429a      	cmp	r2, r3
 8001974:	d910      	bls.n	8001998 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001976:	4b8d      	ldr	r3, [pc, #564]	; (8001bac <HAL_RCC_ClockConfig+0x25c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f023 0207 	bic.w	r2, r3, #7
 800197e:	498b      	ldr	r1, [pc, #556]	; (8001bac <HAL_RCC_ClockConfig+0x25c>)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	4313      	orrs	r3, r2
 8001984:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001986:	4b89      	ldr	r3, [pc, #548]	; (8001bac <HAL_RCC_ClockConfig+0x25c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	429a      	cmp	r2, r3
 8001992:	d001      	beq.n	8001998 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e14a      	b.n	8001c2e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d008      	beq.n	80019b6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019a4:	4b82      	ldr	r3, [pc, #520]	; (8001bb0 <HAL_RCC_ClockConfig+0x260>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	497f      	ldr	r1, [pc, #508]	; (8001bb0 <HAL_RCC_ClockConfig+0x260>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f000 80dc 	beq.w	8001b7c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d13c      	bne.n	8001a46 <HAL_RCC_ClockConfig+0xf6>
 80019cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019d0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019d4:	fa93 f3a3 	rbit	r3, r3
 80019d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80019da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019dc:	fab3 f383 	clz	r3, r3
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	095b      	lsrs	r3, r3, #5
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d102      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xa6>
 80019f0:	4b6f      	ldr	r3, [pc, #444]	; (8001bb0 <HAL_RCC_ClockConfig+0x260>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	e00f      	b.n	8001a16 <HAL_RCC_ClockConfig+0xc6>
 80019f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019fa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019fe:	fa93 f3a3 	rbit	r3, r3
 8001a02:	667b      	str	r3, [r7, #100]	; 0x64
 8001a04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a08:	663b      	str	r3, [r7, #96]	; 0x60
 8001a0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a0c:	fa93 f3a3 	rbit	r3, r3
 8001a10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a12:	4b67      	ldr	r3, [pc, #412]	; (8001bb0 <HAL_RCC_ClockConfig+0x260>)
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a1a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001a1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a1e:	fa92 f2a2 	rbit	r2, r2
 8001a22:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001a24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001a26:	fab2 f282 	clz	r2, r2
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	f042 0220 	orr.w	r2, r2, #32
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	f002 021f 	and.w	r2, r2, #31
 8001a36:	2101      	movs	r1, #1
 8001a38:	fa01 f202 	lsl.w	r2, r1, r2
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d17b      	bne.n	8001b3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e0f3      	b.n	8001c2e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d13c      	bne.n	8001ac8 <HAL_RCC_ClockConfig+0x178>
 8001a4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a52:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a56:	fa93 f3a3 	rbit	r3, r3
 8001a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001a5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a5e:	fab3 f383 	clz	r3, r3
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	095b      	lsrs	r3, r3, #5
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d102      	bne.n	8001a78 <HAL_RCC_ClockConfig+0x128>
 8001a72:	4b4f      	ldr	r3, [pc, #316]	; (8001bb0 <HAL_RCC_ClockConfig+0x260>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	e00f      	b.n	8001a98 <HAL_RCC_ClockConfig+0x148>
 8001a78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a7c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a80:	fa93 f3a3 	rbit	r3, r3
 8001a84:	647b      	str	r3, [r7, #68]	; 0x44
 8001a86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a8a:	643b      	str	r3, [r7, #64]	; 0x40
 8001a8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a8e:	fa93 f3a3 	rbit	r3, r3
 8001a92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a94:	4b46      	ldr	r3, [pc, #280]	; (8001bb0 <HAL_RCC_ClockConfig+0x260>)
 8001a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a9c:	63ba      	str	r2, [r7, #56]	; 0x38
 8001a9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001aa0:	fa92 f2a2 	rbit	r2, r2
 8001aa4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001aa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001aa8:	fab2 f282 	clz	r2, r2
 8001aac:	b2d2      	uxtb	r2, r2
 8001aae:	f042 0220 	orr.w	r2, r2, #32
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	f002 021f 	and.w	r2, r2, #31
 8001ab8:	2101      	movs	r1, #1
 8001aba:	fa01 f202 	lsl.w	r2, r1, r2
 8001abe:	4013      	ands	r3, r2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d13a      	bne.n	8001b3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e0b2      	b.n	8001c2e <HAL_RCC_ClockConfig+0x2de>
 8001ac8:	2302      	movs	r3, #2
 8001aca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ace:	fa93 f3a3 	rbit	r3, r3
 8001ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad6:	fab3 f383 	clz	r3, r3
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	095b      	lsrs	r3, r3, #5
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d102      	bne.n	8001af0 <HAL_RCC_ClockConfig+0x1a0>
 8001aea:	4b31      	ldr	r3, [pc, #196]	; (8001bb0 <HAL_RCC_ClockConfig+0x260>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	e00d      	b.n	8001b0c <HAL_RCC_ClockConfig+0x1bc>
 8001af0:	2302      	movs	r3, #2
 8001af2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af6:	fa93 f3a3 	rbit	r3, r3
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
 8001afc:	2302      	movs	r3, #2
 8001afe:	623b      	str	r3, [r7, #32]
 8001b00:	6a3b      	ldr	r3, [r7, #32]
 8001b02:	fa93 f3a3 	rbit	r3, r3
 8001b06:	61fb      	str	r3, [r7, #28]
 8001b08:	4b29      	ldr	r3, [pc, #164]	; (8001bb0 <HAL_RCC_ClockConfig+0x260>)
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	61ba      	str	r2, [r7, #24]
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	fa92 f2a2 	rbit	r2, r2
 8001b16:	617a      	str	r2, [r7, #20]
  return result;
 8001b18:	697a      	ldr	r2, [r7, #20]
 8001b1a:	fab2 f282 	clz	r2, r2
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	f042 0220 	orr.w	r2, r2, #32
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	f002 021f 	and.w	r2, r2, #31
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b30:	4013      	ands	r3, r2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e079      	b.n	8001c2e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b3a:	4b1d      	ldr	r3, [pc, #116]	; (8001bb0 <HAL_RCC_ClockConfig+0x260>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f023 0203 	bic.w	r2, r3, #3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	491a      	ldr	r1, [pc, #104]	; (8001bb0 <HAL_RCC_ClockConfig+0x260>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b4c:	f7fe fd3a 	bl	80005c4 <HAL_GetTick>
 8001b50:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b52:	e00a      	b.n	8001b6a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b54:	f7fe fd36 	bl	80005c4 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e061      	b.n	8001c2e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6a:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <HAL_RCC_ClockConfig+0x260>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f003 020c 	and.w	r2, r3, #12
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d1eb      	bne.n	8001b54 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <HAL_RCC_ClockConfig+0x25c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d214      	bcs.n	8001bb4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8a:	4b08      	ldr	r3, [pc, #32]	; (8001bac <HAL_RCC_ClockConfig+0x25c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f023 0207 	bic.w	r2, r3, #7
 8001b92:	4906      	ldr	r1, [pc, #24]	; (8001bac <HAL_RCC_ClockConfig+0x25c>)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9a:	4b04      	ldr	r3, [pc, #16]	; (8001bac <HAL_RCC_ClockConfig+0x25c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d005      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e040      	b.n	8001c2e <HAL_RCC_ClockConfig+0x2de>
 8001bac:	40022000 	.word	0x40022000
 8001bb0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d008      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bc0:	4b1d      	ldr	r3, [pc, #116]	; (8001c38 <HAL_RCC_ClockConfig+0x2e8>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	491a      	ldr	r1, [pc, #104]	; (8001c38 <HAL_RCC_ClockConfig+0x2e8>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0308 	and.w	r3, r3, #8
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d009      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bde:	4b16      	ldr	r3, [pc, #88]	; (8001c38 <HAL_RCC_ClockConfig+0x2e8>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	4912      	ldr	r1, [pc, #72]	; (8001c38 <HAL_RCC_ClockConfig+0x2e8>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001bf2:	f000 f829 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 8001bf6:	4601      	mov	r1, r0
 8001bf8:	4b0f      	ldr	r3, [pc, #60]	; (8001c38 <HAL_RCC_ClockConfig+0x2e8>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c00:	22f0      	movs	r2, #240	; 0xf0
 8001c02:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	fa92 f2a2 	rbit	r2, r2
 8001c0a:	60fa      	str	r2, [r7, #12]
  return result;
 8001c0c:	68fa      	ldr	r2, [r7, #12]
 8001c0e:	fab2 f282 	clz	r2, r2
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	40d3      	lsrs	r3, r2
 8001c16:	4a09      	ldr	r2, [pc, #36]	; (8001c3c <HAL_RCC_ClockConfig+0x2ec>)
 8001c18:	5cd3      	ldrb	r3, [r2, r3]
 8001c1a:	fa21 f303 	lsr.w	r3, r1, r3
 8001c1e:	4a08      	ldr	r2, [pc, #32]	; (8001c40 <HAL_RCC_ClockConfig+0x2f0>)
 8001c20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001c22:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <HAL_RCC_ClockConfig+0x2f4>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fc88 	bl	800053c <HAL_InitTick>
  
  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3778      	adds	r7, #120	; 0x78
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	0803b398 	.word	0x0803b398
 8001c40:	20000010 	.word	0x20000010
 8001c44:	20000000 	.word	0x20000000

08001c48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b08b      	sub	sp, #44	; 0x2c
 8001c4c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61fb      	str	r3, [r7, #28]
 8001c52:	2300      	movs	r3, #0
 8001c54:	61bb      	str	r3, [r7, #24]
 8001c56:	2300      	movs	r3, #0
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001c62:	4b29      	ldr	r3, [pc, #164]	; (8001d08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	d002      	beq.n	8001c78 <HAL_RCC_GetSysClockFreq+0x30>
 8001c72:	2b08      	cmp	r3, #8
 8001c74:	d003      	beq.n	8001c7e <HAL_RCC_GetSysClockFreq+0x36>
 8001c76:	e03c      	b.n	8001cf2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c78:	4b24      	ldr	r3, [pc, #144]	; (8001d0c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c7a:	623b      	str	r3, [r7, #32]
      break;
 8001c7c:	e03c      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001c84:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001c88:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8a:	68ba      	ldr	r2, [r7, #8]
 8001c8c:	fa92 f2a2 	rbit	r2, r2
 8001c90:	607a      	str	r2, [r7, #4]
  return result;
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	fab2 f282 	clz	r2, r2
 8001c98:	b2d2      	uxtb	r2, r2
 8001c9a:	40d3      	lsrs	r3, r2
 8001c9c:	4a1c      	ldr	r2, [pc, #112]	; (8001d10 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001c9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ca0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001ca2:	4b19      	ldr	r3, [pc, #100]	; (8001d08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	220f      	movs	r2, #15
 8001cac:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	fa92 f2a2 	rbit	r2, r2
 8001cb4:	60fa      	str	r2, [r7, #12]
  return result;
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	fab2 f282 	clz	r2, r2
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	40d3      	lsrs	r3, r2
 8001cc0:	4a14      	ldr	r2, [pc, #80]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001cc2:	5cd3      	ldrb	r3, [r2, r3]
 8001cc4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d008      	beq.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001cd0:	4a0e      	ldr	r2, [pc, #56]	; (8001d0c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	fb02 f303 	mul.w	r3, r2, r3
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce0:	e004      	b.n	8001cec <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	4a0c      	ldr	r2, [pc, #48]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001ce6:	fb02 f303 	mul.w	r3, r2, r3
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	623b      	str	r3, [r7, #32]
      break;
 8001cf0:	e002      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cf2:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001cf4:	623b      	str	r3, [r7, #32]
      break;
 8001cf6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cf8:	6a3b      	ldr	r3, [r7, #32]
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	372c      	adds	r7, #44	; 0x2c
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	007a1200 	.word	0x007a1200
 8001d10:	0803aab0 	.word	0x0803aab0
 8001d14:	0803aac0 	.word	0x0803aac0
 8001d18:	003d0900 	.word	0x003d0900

08001d1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e084      	b.n	8001e38 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d106      	bne.n	8001d4e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f001 fc09 	bl	8003560 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2202      	movs	r2, #2
 8001d52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d64:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001d6e:	d902      	bls.n	8001d76 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	e002      	b.n	8001d7c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001d76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d7a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001d84:	d007      	beq.n	8001d96 <HAL_SPI_Init+0x7a>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001d8e:	d002      	beq.n	8001d96 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10b      	bne.n	8001db6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001da6:	d903      	bls.n	8001db0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2202      	movs	r2, #2
 8001dac:	631a      	str	r2, [r3, #48]	; 0x30
 8001dae:	e002      	b.n	8001db6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dd4:	431a      	orrs	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	ea42 0103 	orr.w	r1, r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	0c1b      	lsrs	r3, r3, #16
 8001df6:	f003 0204 	and.w	r2, r3, #4
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e04:	431a      	orrs	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	ea42 0103 	orr.w	r1, r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	69da      	ldr	r2, [r3, #28]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e26:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b088      	sub	sp, #32
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	603b      	str	r3, [r7, #0]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e50:	2300      	movs	r3, #0
 8001e52:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d101      	bne.n	8001e62 <HAL_SPI_Transmit+0x22>
 8001e5e:	2302      	movs	r3, #2
 8001e60:	e150      	b.n	8002104 <HAL_SPI_Transmit+0x2c4>
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e6a:	f7fe fbab 	bl	80005c4 <HAL_GetTick>
 8001e6e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001e70:	88fb      	ldrh	r3, [r7, #6]
 8001e72:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d002      	beq.n	8001e86 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001e80:	2302      	movs	r3, #2
 8001e82:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e84:	e135      	b.n	80020f2 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d002      	beq.n	8001e92 <HAL_SPI_Transmit+0x52>
 8001e8c:	88fb      	ldrh	r3, [r7, #6]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d102      	bne.n	8001e98 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e96:	e12c      	b.n	80020f2 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	68ba      	ldr	r2, [r7, #8]
 8001eaa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	88fa      	ldrh	r2, [r7, #6]
 8001eb0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	88fa      	ldrh	r2, [r7, #6]
 8001eb6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ee2:	d107      	bne.n	8001ef4 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ef2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001efe:	2b40      	cmp	r3, #64	; 0x40
 8001f00:	d007      	beq.n	8001f12 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f10:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001f1a:	d94b      	bls.n	8001fb4 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d002      	beq.n	8001f2a <HAL_SPI_Transmit+0xea>
 8001f24:	8afb      	ldrh	r3, [r7, #22]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d13e      	bne.n	8001fa8 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f2e:	881a      	ldrh	r2, [r3, #0]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f3a:	1c9a      	adds	r2, r3, #2
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	3b01      	subs	r3, #1
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001f4e:	e02b      	b.n	8001fa8 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d112      	bne.n	8001f84 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f62:	881a      	ldrh	r2, [r3, #0]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6e:	1c9a      	adds	r2, r3, #2
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001f82:	e011      	b.n	8001fa8 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f84:	f7fe fb1e 	bl	80005c4 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d803      	bhi.n	8001f9c <HAL_SPI_Transmit+0x15c>
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f9a:	d102      	bne.n	8001fa2 <HAL_SPI_Transmit+0x162>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d102      	bne.n	8001fa8 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001fa6:	e0a4      	b.n	80020f2 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1ce      	bne.n	8001f50 <HAL_SPI_Transmit+0x110>
 8001fb2:	e07c      	b.n	80020ae <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d002      	beq.n	8001fc2 <HAL_SPI_Transmit+0x182>
 8001fbc:	8afb      	ldrh	r3, [r7, #22]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d170      	bne.n	80020a4 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d912      	bls.n	8001ff2 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd0:	881a      	ldrh	r2, [r3, #0]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fdc:	1c9a      	adds	r2, r3, #2
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	3b02      	subs	r3, #2
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001ff0:	e058      	b.n	80020a4 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	330c      	adds	r3, #12
 8001ffc:	7812      	ldrb	r2, [r2, #0]
 8001ffe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002004:	1c5a      	adds	r2, r3, #1
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800200e:	b29b      	uxth	r3, r3
 8002010:	3b01      	subs	r3, #1
 8002012:	b29a      	uxth	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002018:	e044      	b.n	80020a4 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b02      	cmp	r3, #2
 8002026:	d12b      	bne.n	8002080 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800202c:	b29b      	uxth	r3, r3
 800202e:	2b01      	cmp	r3, #1
 8002030:	d912      	bls.n	8002058 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002036:	881a      	ldrh	r2, [r3, #0]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002042:	1c9a      	adds	r2, r3, #2
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800204c:	b29b      	uxth	r3, r3
 800204e:	3b02      	subs	r3, #2
 8002050:	b29a      	uxth	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002056:	e025      	b.n	80020a4 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	330c      	adds	r3, #12
 8002062:	7812      	ldrb	r2, [r2, #0]
 8002064:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206a:	1c5a      	adds	r2, r3, #1
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002074:	b29b      	uxth	r3, r3
 8002076:	3b01      	subs	r3, #1
 8002078:	b29a      	uxth	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800207e:	e011      	b.n	80020a4 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002080:	f7fe faa0 	bl	80005c4 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	429a      	cmp	r2, r3
 800208e:	d803      	bhi.n	8002098 <HAL_SPI_Transmit+0x258>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002096:	d102      	bne.n	800209e <HAL_SPI_Transmit+0x25e>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d102      	bne.n	80020a4 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80020a2:	e026      	b.n	80020f2 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1b5      	bne.n	800201a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	6839      	ldr	r1, [r7, #0]
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f000 f901 	bl	80022ba <SPI_EndRxTxTransaction>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d002      	beq.n	80020c4 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2220      	movs	r2, #32
 80020c2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d10a      	bne.n	80020e2 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80020cc:	2300      	movs	r3, #0
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d002      	beq.n	80020f0 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	77fb      	strb	r3, [r7, #31]
 80020ee:	e000      	b.n	80020f2 <HAL_SPI_Transmit+0x2b2>
  }

error:
 80020f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002102:	7ffb      	ldrb	r3, [r7, #31]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3720      	adds	r7, #32
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	603b      	str	r3, [r7, #0]
 8002118:	4613      	mov	r3, r2
 800211a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800211c:	e04c      	b.n	80021b8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002124:	d048      	beq.n	80021b8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002126:	f7fe fa4d 	bl	80005c4 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d902      	bls.n	800213c <SPI_WaitFlagStateUntilTimeout+0x30>
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d13d      	bne.n	80021b8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800214a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002154:	d111      	bne.n	800217a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800215e:	d004      	beq.n	800216a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002168:	d107      	bne.n	800217a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002178:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002182:	d10f      	bne.n	80021a4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021a2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e00f      	b.n	80021d8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	4013      	ands	r3, r2
 80021c2:	68ba      	ldr	r2, [r7, #8]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	bf0c      	ite	eq
 80021c8:	2301      	moveq	r3, #1
 80021ca:	2300      	movne	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	461a      	mov	r2, r3
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d1a3      	bne.n	800211e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
 80021ec:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80021ee:	e057      	b.n	80022a0 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80021f6:	d106      	bne.n	8002206 <SPI_WaitFifoStateUntilTimeout+0x26>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d103      	bne.n	8002206 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	330c      	adds	r3, #12
 8002204:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800220c:	d048      	beq.n	80022a0 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800220e:	f7fe f9d9 	bl	80005c4 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	429a      	cmp	r2, r3
 800221c:	d902      	bls.n	8002224 <SPI_WaitFifoStateUntilTimeout+0x44>
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d13d      	bne.n	80022a0 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002232:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800223c:	d111      	bne.n	8002262 <SPI_WaitFifoStateUntilTimeout+0x82>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002246:	d004      	beq.n	8002252 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002250:	d107      	bne.n	8002262 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002260:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002266:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800226a:	d10f      	bne.n	800228c <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800228a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e008      	b.n	80022b2 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	4013      	ands	r3, r2
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d19f      	bne.n	80021f0 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b086      	sub	sp, #24
 80022be:	af02      	add	r7, sp, #8
 80022c0:	60f8      	str	r0, [r7, #12]
 80022c2:	60b9      	str	r1, [r7, #8]
 80022c4:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f7ff ff84 	bl	80021e0 <SPI_WaitFifoStateUntilTimeout>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d007      	beq.n	80022ee <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022e2:	f043 0220 	orr.w	r2, r3, #32
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e027      	b.n	800233e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	2200      	movs	r2, #0
 80022f6:	2180      	movs	r1, #128	; 0x80
 80022f8:	68f8      	ldr	r0, [r7, #12]
 80022fa:	f7ff ff07 	bl	800210c <SPI_WaitFlagStateUntilTimeout>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d007      	beq.n	8002314 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002308:	f043 0220 	orr.w	r2, r3, #32
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e014      	b.n	800233e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2200      	movs	r2, #0
 800231c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f7ff ff5d 	bl	80021e0 <SPI_WaitFifoStateUntilTimeout>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d007      	beq.n	800233c <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002330:	f043 0220 	orr.w	r2, r3, #32
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e000      	b.n	800233e <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
static SPI_HandleTypeDef lcd_spi;

void ILI9341_Init() {
 8002346:	b580      	push	{r7, lr}
 8002348:	af00      	add	r7, sp, #0
	ILI9341_SPI_Init();
 800234a:	f000 f901 	bl	8002550 <ILI9341_SPI_Init>

	/* Reset The Screen */
	ILI9341_Reset();
 800234e:	f000 f949 	bl	80025e4 <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 8002352:	2001      	movs	r0, #1
 8002354:	f000 fd82 	bl	8002e5c <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 8002358:	20cb      	movs	r0, #203	; 0xcb
 800235a:	f000 fd7f 	bl	8002e5c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 800235e:	2039      	movs	r0, #57	; 0x39
 8002360:	f000 fd8b 	bl	8002e7a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 8002364:	202c      	movs	r0, #44	; 0x2c
 8002366:	f000 fd88 	bl	8002e7a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 800236a:	2000      	movs	r0, #0
 800236c:	f000 fd85 	bl	8002e7a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 8002370:	2034      	movs	r0, #52	; 0x34
 8002372:	f000 fd82 	bl	8002e7a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 8002376:	2002      	movs	r0, #2
 8002378:	f000 fd7f 	bl	8002e7a <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 800237c:	20cf      	movs	r0, #207	; 0xcf
 800237e:	f000 fd6d 	bl	8002e5c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8002382:	2000      	movs	r0, #0
 8002384:	f000 fd79 	bl	8002e7a <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 8002388:	20c1      	movs	r0, #193	; 0xc1
 800238a:	f000 fd76 	bl	8002e7a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 800238e:	2030      	movs	r0, #48	; 0x30
 8002390:	f000 fd73 	bl	8002e7a <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 8002394:	20e8      	movs	r0, #232	; 0xe8
 8002396:	f000 fd61 	bl	8002e5c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 800239a:	2085      	movs	r0, #133	; 0x85
 800239c:	f000 fd6d 	bl	8002e7a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80023a0:	2000      	movs	r0, #0
 80023a2:	f000 fd6a 	bl	8002e7a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 80023a6:	2078      	movs	r0, #120	; 0x78
 80023a8:	f000 fd67 	bl	8002e7a <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 80023ac:	20ea      	movs	r0, #234	; 0xea
 80023ae:	f000 fd55 	bl	8002e5c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80023b2:	2000      	movs	r0, #0
 80023b4:	f000 fd61 	bl	8002e7a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80023b8:	2000      	movs	r0, #0
 80023ba:	f000 fd5e 	bl	8002e7a <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 80023be:	20ed      	movs	r0, #237	; 0xed
 80023c0:	f000 fd4c 	bl	8002e5c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 80023c4:	2064      	movs	r0, #100	; 0x64
 80023c6:	f000 fd58 	bl	8002e7a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 80023ca:	2003      	movs	r0, #3
 80023cc:	f000 fd55 	bl	8002e7a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 80023d0:	2012      	movs	r0, #18
 80023d2:	f000 fd52 	bl	8002e7a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 80023d6:	2081      	movs	r0, #129	; 0x81
 80023d8:	f000 fd4f 	bl	8002e7a <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 80023dc:	20f7      	movs	r0, #247	; 0xf7
 80023de:	f000 fd3d 	bl	8002e5c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 80023e2:	2020      	movs	r0, #32
 80023e4:	f000 fd49 	bl	8002e7a <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 80023e8:	20c0      	movs	r0, #192	; 0xc0
 80023ea:	f000 fd37 	bl	8002e5c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 80023ee:	2010      	movs	r0, #16
 80023f0:	f000 fd43 	bl	8002e7a <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 80023f4:	20c1      	movs	r0, #193	; 0xc1
 80023f6:	f000 fd31 	bl	8002e5c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 80023fa:	2010      	movs	r0, #16
 80023fc:	f000 fd3d 	bl	8002e7a <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 8002400:	20c5      	movs	r0, #197	; 0xc5
 8002402:	f000 fd2b 	bl	8002e5c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 8002406:	203e      	movs	r0, #62	; 0x3e
 8002408:	f000 fd37 	bl	8002e7a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 800240c:	2028      	movs	r0, #40	; 0x28
 800240e:	f000 fd34 	bl	8002e7a <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 8002412:	20c7      	movs	r0, #199	; 0xc7
 8002414:	f000 fd22 	bl	8002e5c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 8002418:	2086      	movs	r0, #134	; 0x86
 800241a:	f000 fd2e 	bl	8002e7a <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 800241e:	2036      	movs	r0, #54	; 0x36
 8002420:	f000 fd1c 	bl	8002e5c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 8002424:	2048      	movs	r0, #72	; 0x48
 8002426:	f000 fd28 	bl	8002e7a <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 800242a:	203a      	movs	r0, #58	; 0x3a
 800242c:	f000 fd16 	bl	8002e5c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 8002430:	2055      	movs	r0, #85	; 0x55
 8002432:	f000 fd22 	bl	8002e7a <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 8002436:	20b1      	movs	r0, #177	; 0xb1
 8002438:	f000 fd10 	bl	8002e5c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 800243c:	2000      	movs	r0, #0
 800243e:	f000 fd1c 	bl	8002e7a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 8002442:	2018      	movs	r0, #24
 8002444:	f000 fd19 	bl	8002e7a <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 8002448:	20b6      	movs	r0, #182	; 0xb6
 800244a:	f000 fd07 	bl	8002e5c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 800244e:	2008      	movs	r0, #8
 8002450:	f000 fd13 	bl	8002e7a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 8002454:	2082      	movs	r0, #130	; 0x82
 8002456:	f000 fd10 	bl	8002e7a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 800245a:	2027      	movs	r0, #39	; 0x27
 800245c:	f000 fd0d 	bl	8002e7a <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 8002460:	20f2      	movs	r0, #242	; 0xf2
 8002462:	f000 fcfb 	bl	8002e5c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8002466:	2000      	movs	r0, #0
 8002468:	f000 fd07 	bl	8002e7a <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 800246c:	2026      	movs	r0, #38	; 0x26
 800246e:	f000 fcf5 	bl	8002e5c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 8002472:	2001      	movs	r0, #1
 8002474:	f000 fd01 	bl	8002e7a <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 8002478:	20e0      	movs	r0, #224	; 0xe0
 800247a:	f000 fcef 	bl	8002e5c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 800247e:	200f      	movs	r0, #15
 8002480:	f000 fcfb 	bl	8002e7a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8002484:	2031      	movs	r0, #49	; 0x31
 8002486:	f000 fcf8 	bl	8002e7a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 800248a:	202b      	movs	r0, #43	; 0x2b
 800248c:	f000 fcf5 	bl	8002e7a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 8002490:	200c      	movs	r0, #12
 8002492:	f000 fcf2 	bl	8002e7a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8002496:	200e      	movs	r0, #14
 8002498:	f000 fcef 	bl	8002e7a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 800249c:	2008      	movs	r0, #8
 800249e:	f000 fcec 	bl	8002e7a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 80024a2:	204e      	movs	r0, #78	; 0x4e
 80024a4:	f000 fce9 	bl	8002e7a <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 80024a8:	20f1      	movs	r0, #241	; 0xf1
 80024aa:	f000 fce6 	bl	8002e7a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 80024ae:	2037      	movs	r0, #55	; 0x37
 80024b0:	f000 fce3 	bl	8002e7a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 80024b4:	2007      	movs	r0, #7
 80024b6:	f000 fce0 	bl	8002e7a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 80024ba:	2010      	movs	r0, #16
 80024bc:	f000 fcdd 	bl	8002e7a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 80024c0:	2003      	movs	r0, #3
 80024c2:	f000 fcda 	bl	8002e7a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 80024c6:	200e      	movs	r0, #14
 80024c8:	f000 fcd7 	bl	8002e7a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 80024cc:	2009      	movs	r0, #9
 80024ce:	f000 fcd4 	bl	8002e7a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80024d2:	2000      	movs	r0, #0
 80024d4:	f000 fcd1 	bl	8002e7a <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 80024d8:	20e1      	movs	r0, #225	; 0xe1
 80024da:	f000 fcbf 	bl	8002e5c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80024de:	2000      	movs	r0, #0
 80024e0:	f000 fccb 	bl	8002e7a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 80024e4:	200e      	movs	r0, #14
 80024e6:	f000 fcc8 	bl	8002e7a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 80024ea:	2014      	movs	r0, #20
 80024ec:	f000 fcc5 	bl	8002e7a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 80024f0:	2003      	movs	r0, #3
 80024f2:	f000 fcc2 	bl	8002e7a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 80024f6:	2011      	movs	r0, #17
 80024f8:	f000 fcbf 	bl	8002e7a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 80024fc:	2007      	movs	r0, #7
 80024fe:	f000 fcbc 	bl	8002e7a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8002502:	2031      	movs	r0, #49	; 0x31
 8002504:	f000 fcb9 	bl	8002e7a <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 8002508:	20c1      	movs	r0, #193	; 0xc1
 800250a:	f000 fcb6 	bl	8002e7a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 800250e:	2048      	movs	r0, #72	; 0x48
 8002510:	f000 fcb3 	bl	8002e7a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 8002514:	2008      	movs	r0, #8
 8002516:	f000 fcb0 	bl	8002e7a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 800251a:	200f      	movs	r0, #15
 800251c:	f000 fcad 	bl	8002e7a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 8002520:	200c      	movs	r0, #12
 8002522:	f000 fcaa 	bl	8002e7a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8002526:	2031      	movs	r0, #49	; 0x31
 8002528:	f000 fca7 	bl	8002e7a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 800252c:	2036      	movs	r0, #54	; 0x36
 800252e:	f000 fca4 	bl	8002e7a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 8002532:	200f      	movs	r0, #15
 8002534:	f000 fca1 	bl	8002e7a <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 8002538:	2011      	movs	r0, #17
 800253a:	f000 fc8f 	bl	8002e5c <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 800253e:	2029      	movs	r0, #41	; 0x29
 8002540:	f000 fc8c 	bl	8002e5c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 8002544:	202c      	movs	r0, #44	; 0x2c
 8002546:	f000 fc98 	bl	8002e7a <ILI9341_Send_Data>
}
 800254a:	bf00      	nop
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <ILI9341_SPI_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void ILI9341_SPI_Init() {
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
	lcd_spi.Instance 				= SPI1;
 8002554:	4b18      	ldr	r3, [pc, #96]	; (80025b8 <ILI9341_SPI_Init+0x68>)
 8002556:	4a19      	ldr	r2, [pc, #100]	; (80025bc <ILI9341_SPI_Init+0x6c>)
 8002558:	601a      	str	r2, [r3, #0]
	lcd_spi.Init.Mode 				= SPI_MODE_MASTER;
 800255a:	4b17      	ldr	r3, [pc, #92]	; (80025b8 <ILI9341_SPI_Init+0x68>)
 800255c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002560:	605a      	str	r2, [r3, #4]
	lcd_spi.Init.Direction 			= SPI_DIRECTION_2LINES;
 8002562:	4b15      	ldr	r3, [pc, #84]	; (80025b8 <ILI9341_SPI_Init+0x68>)
 8002564:	2200      	movs	r2, #0
 8002566:	609a      	str	r2, [r3, #8]
	lcd_spi.Init.DataSize 			= SPI_DATASIZE_8BIT;
 8002568:	4b13      	ldr	r3, [pc, #76]	; (80025b8 <ILI9341_SPI_Init+0x68>)
 800256a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800256e:	60da      	str	r2, [r3, #12]
	lcd_spi.Init.CLKPolarity 		= SPI_POLARITY_LOW;
 8002570:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <ILI9341_SPI_Init+0x68>)
 8002572:	2200      	movs	r2, #0
 8002574:	611a      	str	r2, [r3, #16]
	lcd_spi.Init.CLKPhase 			= SPI_PHASE_1EDGE;
 8002576:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <ILI9341_SPI_Init+0x68>)
 8002578:	2200      	movs	r2, #0
 800257a:	615a      	str	r2, [r3, #20]
	lcd_spi.Init.NSS 				= SPI_NSS_SOFT;
 800257c:	4b0e      	ldr	r3, [pc, #56]	; (80025b8 <ILI9341_SPI_Init+0x68>)
 800257e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002582:	619a      	str	r2, [r3, #24]
	lcd_spi.Init.BaudRatePrescaler 	= SPI_BAUDRATEPRESCALER_2;
 8002584:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <ILI9341_SPI_Init+0x68>)
 8002586:	2200      	movs	r2, #0
 8002588:	61da      	str	r2, [r3, #28]
	lcd_spi.Init.FirstBit 			= SPI_FIRSTBIT_MSB;
 800258a:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <ILI9341_SPI_Init+0x68>)
 800258c:	2200      	movs	r2, #0
 800258e:	621a      	str	r2, [r3, #32]
	lcd_spi.Init.TIMode 			= SPI_TIMODE_DISABLE;
 8002590:	4b09      	ldr	r3, [pc, #36]	; (80025b8 <ILI9341_SPI_Init+0x68>)
 8002592:	2200      	movs	r2, #0
 8002594:	625a      	str	r2, [r3, #36]	; 0x24
	lcd_spi.Init.CRCCalculation 	= SPI_CRCCALCULATION_DISABLE;
 8002596:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <ILI9341_SPI_Init+0x68>)
 8002598:	2200      	movs	r2, #0
 800259a:	629a      	str	r2, [r3, #40]	; 0x28
	lcd_spi.Init.CRCPolynomial 		= 10;
 800259c:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <ILI9341_SPI_Init+0x68>)
 800259e:	220a      	movs	r2, #10
 80025a0:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&lcd_spi) != HAL_OK) {
 80025a2:	4805      	ldr	r0, [pc, #20]	; (80025b8 <ILI9341_SPI_Init+0x68>)
 80025a4:	f7ff fbba 	bl	8001d1c <HAL_SPI_Init>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <ILI9341_SPI_Init+0x62>
		Error_Handler();
 80025ae:	f000 ffab 	bl	8003508 <Error_Handler>
	}
}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	20000058 	.word	0x20000058
 80025bc:	40013000 	.word	0x40013000

080025c0 <ILI9341_SPI_Send>:

void ILI9341_SPI_Send(unsigned char data)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&lcd_spi, &data, 1, 1);
 80025ca:	1df9      	adds	r1, r7, #7
 80025cc:	2301      	movs	r3, #1
 80025ce:	2201      	movs	r2, #1
 80025d0:	4803      	ldr	r0, [pc, #12]	; (80025e0 <ILI9341_SPI_Send+0x20>)
 80025d2:	f7ff fc35 	bl	8001e40 <HAL_SPI_Transmit>
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	20000058 	.word	0x20000058

080025e4 <ILI9341_Reset>:
void ILI9341_SPI_Send_Multiple(unsigned char data, int size)
{
	HAL_SPI_Transmit(&lcd_spi, &data, size, 10);
}

void ILI9341_Reset() {
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
	RESET_ON;
 80025e8:	2200      	movs	r2, #0
 80025ea:	2101      	movs	r1, #1
 80025ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025f0:	f7fe fa8e 	bl	8000b10 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80025f4:	2032      	movs	r0, #50	; 0x32
 80025f6:	f7fd fff1 	bl	80005dc <HAL_Delay>
	RESET_OFF;
 80025fa:	2201      	movs	r2, #1
 80025fc:	2101      	movs	r1, #1
 80025fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002602:	f7fe fa85 	bl	8000b10 <HAL_GPIO_WritePin>
	CS_ON;
 8002606:	2200      	movs	r2, #0
 8002608:	2104      	movs	r1, #4
 800260a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800260e:	f7fe fa7f 	bl	8000b10 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8002612:	2032      	movs	r0, #50	; 0x32
 8002614:	f7fd ffe2 	bl	80005dc <HAL_Delay>
	ILI9341_Send_Command(0x01);
 8002618:	2001      	movs	r0, #1
 800261a:	f000 fc1f 	bl	8002e5c <ILI9341_Send_Command>
	CS_OFF;
 800261e:	2201      	movs	r2, #1
 8002620:	2104      	movs	r1, #4
 8002622:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002626:	f7fe fa73 	bl	8000b10 <HAL_GPIO_WritePin>
}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
	...

08002630 <ILI9341_Set_Rotation>:

void ILI9341_Set_Rotation(unsigned char rotation) {
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	71fb      	strb	r3, [r7, #7]
	ILI9341_Send_Command(0x36);
 800263a:	2036      	movs	r0, #54	; 0x36
 800263c:	f000 fc0e 	bl	8002e5c <ILI9341_Send_Command>
	switch (rotation) {
 8002640:	79fb      	ldrb	r3, [r7, #7]
 8002642:	2b03      	cmp	r3, #3
 8002644:	d836      	bhi.n	80026b4 <ILI9341_Set_Rotation+0x84>
 8002646:	a201      	add	r2, pc, #4	; (adr r2, 800264c <ILI9341_Set_Rotation+0x1c>)
 8002648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800264c:	0800265d 	.word	0x0800265d
 8002650:	08002673 	.word	0x08002673
 8002654:	08002689 	.word	0x08002689
 8002658:	0800269f 	.word	0x0800269f
	case 0:
		ILI9341_Send_Data(0x48);
 800265c:	2048      	movs	r0, #72	; 0x48
 800265e:	f000 fc0c 	bl	8002e7a <ILI9341_Send_Data>
		X_SIZE = 240;
 8002662:	4b16      	ldr	r3, [pc, #88]	; (80026bc <ILI9341_Set_Rotation+0x8c>)
 8002664:	22f0      	movs	r2, #240	; 0xf0
 8002666:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 8002668:	4b15      	ldr	r3, [pc, #84]	; (80026c0 <ILI9341_Set_Rotation+0x90>)
 800266a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800266e:	601a      	str	r2, [r3, #0]
		break;
 8002670:	e020      	b.n	80026b4 <ILI9341_Set_Rotation+0x84>
	case 1:
		ILI9341_Send_Data(0x28);
 8002672:	2028      	movs	r0, #40	; 0x28
 8002674:	f000 fc01 	bl	8002e7a <ILI9341_Send_Data>
		X_SIZE = 320;
 8002678:	4b10      	ldr	r3, [pc, #64]	; (80026bc <ILI9341_Set_Rotation+0x8c>)
 800267a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800267e:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 8002680:	4b0f      	ldr	r3, [pc, #60]	; (80026c0 <ILI9341_Set_Rotation+0x90>)
 8002682:	22f0      	movs	r2, #240	; 0xf0
 8002684:	601a      	str	r2, [r3, #0]
		break;
 8002686:	e015      	b.n	80026b4 <ILI9341_Set_Rotation+0x84>
	case 2:
		ILI9341_Send_Data(0x88);
 8002688:	2088      	movs	r0, #136	; 0x88
 800268a:	f000 fbf6 	bl	8002e7a <ILI9341_Send_Data>
		X_SIZE = 240;
 800268e:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <ILI9341_Set_Rotation+0x8c>)
 8002690:	22f0      	movs	r2, #240	; 0xf0
 8002692:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 8002694:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <ILI9341_Set_Rotation+0x90>)
 8002696:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800269a:	601a      	str	r2, [r3, #0]
		break;
 800269c:	e00a      	b.n	80026b4 <ILI9341_Set_Rotation+0x84>
	case 3:
		ILI9341_Send_Data(0xE8);
 800269e:	20e8      	movs	r0, #232	; 0xe8
 80026a0:	f000 fbeb 	bl	8002e7a <ILI9341_Send_Data>
		X_SIZE = 320;
 80026a4:	4b05      	ldr	r3, [pc, #20]	; (80026bc <ILI9341_Set_Rotation+0x8c>)
 80026a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80026aa:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80026ac:	4b04      	ldr	r3, [pc, #16]	; (80026c0 <ILI9341_Set_Rotation+0x90>)
 80026ae:	22f0      	movs	r2, #240	; 0xf0
 80026b0:	601a      	str	r2, [r3, #0]
		break;
 80026b2:	bf00      	nop
	}
}
 80026b4:	bf00      	nop
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	20000008 	.word	0x20000008
 80026c0:	2000000c 	.word	0x2000000c

080026c4 <ILI9341_SPI_Send_32>:

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	6039      	str	r1, [r7, #0]
 80026ce:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 80026d0:	2200      	movs	r2, #0
 80026d2:	2104      	movs	r1, #4
 80026d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026d8:	f7fe fa1a 	bl	8000b10 <HAL_GPIO_WritePin>
	DC_COMMAND;
 80026dc:	2200      	movs	r2, #0
 80026de:	2102      	movs	r1, #2
 80026e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026e4:	f7fe fa14 	bl	8000b10 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 80026e8:	79fb      	ldrb	r3, [r7, #7]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff ff68 	bl	80025c0 <ILI9341_SPI_Send>

	DC_DATA;
 80026f0:	2201      	movs	r2, #1
 80026f2:	2102      	movs	r1, #2
 80026f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026f8:	f7fe fa0a 	bl	8000b10 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	0e1b      	lsrs	r3, r3, #24
 8002700:	b2db      	uxtb	r3, r3
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff ff5c 	bl	80025c0 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	0c1b      	lsrs	r3, r3, #16
 800270c:	b2db      	uxtb	r3, r3
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff ff56 	bl	80025c0 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	0a1b      	lsrs	r3, r3, #8
 8002718:	b2db      	uxtb	r3, r3
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff ff50 	bl	80025c0 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	b2db      	uxtb	r3, r3
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff ff4b 	bl	80025c0 <ILI9341_SPI_Send>

}
 800272a:	bf00      	nop
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 8002732:	b580      	push	{r7, lr}
 8002734:	b086      	sub	sp, #24
 8002736:	af00      	add	r7, sp, #0
 8002738:	60f8      	str	r0, [r7, #12]
 800273a:	60b9      	str	r1, [r7, #8]
 800273c:	607a      	str	r2, [r7, #4]
 800273e:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	041b      	lsls	r3, r3, #16
 8002748:	617b      	str	r3, [r7, #20]
	t |= x2;
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4313      	orrs	r3, r2
 8002750:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 8002752:	6979      	ldr	r1, [r7, #20]
 8002754:	202a      	movs	r0, #42	; 0x2a
 8002756:	f7ff ffb5 	bl	80026c4 <ILI9341_SPI_Send_32>
	t = y1;
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	617b      	str	r3, [r7, #20]
	t <<= 16;
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	041b      	lsls	r3, r3, #16
 8002762:	617b      	str	r3, [r7, #20]
	t |= y2;
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	4313      	orrs	r3, r2
 800276a:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 800276c:	6979      	ldr	r1, [r7, #20]
 800276e:	202b      	movs	r0, #43	; 0x2b
 8002770:	f7ff ffa8 	bl	80026c4 <ILI9341_SPI_Send_32>
}
 8002774:	bf00      	nop
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <ILI9341_Fill_Screen>:

void ILI9341_Fill_Screen(unsigned int color)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
	ILI9341_Set_Address(0, 0, X_SIZE-1, Y_SIZE-1);
 8002784:	4b0d      	ldr	r3, [pc, #52]	; (80027bc <ILI9341_Fill_Screen+0x40>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	1e5a      	subs	r2, r3, #1
 800278a:	4b0d      	ldr	r3, [pc, #52]	; (80027c0 <ILI9341_Fill_Screen+0x44>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	3b01      	subs	r3, #1
 8002790:	2100      	movs	r1, #0
 8002792:	2000      	movs	r0, #0
 8002794:	f7ff ffcd 	bl	8002732 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)X_SIZE * (long)Y_SIZE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	b29a      	uxth	r2, r3
 800279c:	4b07      	ldr	r3, [pc, #28]	; (80027bc <ILI9341_Fill_Screen+0x40>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4619      	mov	r1, r3
 80027a2:	4b07      	ldr	r3, [pc, #28]	; (80027c0 <ILI9341_Fill_Screen+0x44>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	fb03 f301 	mul.w	r3, r3, r1
 80027aa:	4619      	mov	r1, r3
 80027ac:	4610      	mov	r0, r2
 80027ae:	f000 fb73 	bl	8002e98 <ILI9341_Send_Burst>
}
 80027b2:	bf00      	nop
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	20000008 	.word	0x20000008
 80027c0:	2000000c 	.word	0x2000000c

080027c4 <ILI9341_Draw_Pixel>:

void ILI9341_Draw_Pixel(int x, int y, unsigned int color)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
	if((x < 0) || (y < 0) || (x >= X_SIZE) || (y >= Y_SIZE))
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	db31      	blt.n	800283a <ILI9341_Draw_Pixel+0x76>
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	db2e      	blt.n	800283a <ILI9341_Draw_Pixel+0x76>
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	4b19      	ldr	r3, [pc, #100]	; (8002844 <ILI9341_Draw_Pixel+0x80>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d229      	bcs.n	800283a <ILI9341_Draw_Pixel+0x76>
 80027e6:	68ba      	ldr	r2, [r7, #8]
 80027e8:	4b17      	ldr	r3, [pc, #92]	; (8002848 <ILI9341_Draw_Pixel+0x84>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d224      	bcs.n	800283a <ILI9341_Draw_Pixel+0x76>
	{
		return;
	}
	ILI9341_Set_Address(x, y, X_SIZE-1, Y_SIZE-1);
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	68b9      	ldr	r1, [r7, #8]
 80027f4:	4b13      	ldr	r3, [pc, #76]	; (8002844 <ILI9341_Draw_Pixel+0x80>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	1e5a      	subs	r2, r3, #1
 80027fa:	4b13      	ldr	r3, [pc, #76]	; (8002848 <ILI9341_Draw_Pixel+0x84>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	3b01      	subs	r3, #1
 8002800:	f7ff ff97 	bl	8002732 <ILI9341_Set_Address>
	DC_COMMAND;
 8002804:	2200      	movs	r2, #0
 8002806:	2102      	movs	r1, #2
 8002808:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800280c:	f7fe f980 	bl	8000b10 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8002810:	202c      	movs	r0, #44	; 0x2c
 8002812:	f7ff fed5 	bl	80025c0 <ILI9341_SPI_Send>
	DC_DATA;
 8002816:	2201      	movs	r2, #1
 8002818:	2102      	movs	r1, #2
 800281a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800281e:	f7fe f977 	bl	8000b10 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(color>>8);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	0a1b      	lsrs	r3, r3, #8
 8002826:	b2db      	uxtb	r3, r3
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff fec9 	bl	80025c0 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(color);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	b2db      	uxtb	r3, r3
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff fec4 	bl	80025c0 <ILI9341_SPI_Send>
 8002838:	e000      	b.n	800283c <ILI9341_Draw_Pixel+0x78>
		return;
 800283a:	bf00      	nop
}
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	20000008 	.word	0x20000008
 8002848:	2000000c 	.word	0x2000000c

0800284c <ILI9341_Draw_Empty_Rectangle>:
	ILI9341_Set_Address(x1, y1, x2, y2);
	ILI9341_Send_Burst(color, (long)(x2-x1+1) * (long)(y2-y1+1));
}

void ILI9341_Draw_Empty_Rectangle(unsigned int color,unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af02      	add	r7, sp, #8
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
 8002858:	603b      	str	r3, [r7, #0]
	ILI9341_Draw_Line(color, x1, y1, x2, y1);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	68b9      	ldr	r1, [r7, #8]
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f000 f81c 	bl	80028a2 <ILI9341_Draw_Line>
	ILI9341_Draw_Line(color, x2, y1, x2, y2);
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6839      	ldr	r1, [r7, #0]
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 f814 	bl	80028a2 <ILI9341_Draw_Line>
	ILI9341_Draw_Line(color, x1, y1, x1, y2);
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	68b9      	ldr	r1, [r7, #8]
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 f80c 	bl	80028a2 <ILI9341_Draw_Line>
	ILI9341_Draw_Line(color, x1, y2, x2, y2);
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	68b9      	ldr	r1, [r7, #8]
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 f804 	bl	80028a2 <ILI9341_Draw_Line>
}
 800289a:	bf00      	nop
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <ILI9341_Draw_Line>:

void ILI9341_Draw_Line(unsigned int color, unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b08c      	sub	sp, #48	; 0x30
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	60f8      	str	r0, [r7, #12]
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	607a      	str	r2, [r7, #4]
 80028ae:	603b      	str	r3, [r7, #0]
	int steep = abs(y2-y1) > abs(x2-x1);
 80028b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80028ba:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80028be:	6839      	ldr	r1, [r7, #0]
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	1acb      	subs	r3, r1, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	bfb8      	it	lt
 80028c8:	425b      	neglt	r3, r3
 80028ca:	429a      	cmp	r2, r3
 80028cc:	bfcc      	ite	gt
 80028ce:	2301      	movgt	r3, #1
 80028d0:	2300      	movle	r3, #0
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	627b      	str	r3, [r7, #36]	; 0x24

	if (steep)
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00d      	beq.n	80028f8 <ILI9341_Draw_Line+0x56>
	{
		swap(x1,y1);
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	847b      	strh	r3, [r7, #34]	; 0x22
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	60bb      	str	r3, [r7, #8]
 80028e4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80028e8:	607b      	str	r3, [r7, #4]
		swap(x2,y2);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	843b      	strh	r3, [r7, #32]
 80028ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f0:	603b      	str	r3, [r7, #0]
 80028f2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80028f6:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	if(x1>x2)
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d90d      	bls.n	800291c <ILI9341_Draw_Line+0x7a>
	{
		swap(x1,x2);
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	83fb      	strh	r3, [r7, #30]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	60bb      	str	r3, [r7, #8]
 8002908:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800290c:	603b      	str	r3, [r7, #0]
		swap(y1,y2);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	83bb      	strh	r3, [r7, #28]
 8002912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002914:	607b      	str	r3, [r7, #4]
 8002916:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800291a:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	int dx,dy;
	dx = (x2 - x1);
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	61bb      	str	r3, [r7, #24]
	dy = abs(y2 - y1);
 8002924:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	bfb8      	it	lt
 800292e:	425b      	neglt	r3, r3
 8002930:	617b      	str	r3, [r7, #20]
	int err = dx / 2;
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	0fda      	lsrs	r2, r3, #31
 8002936:	4413      	add	r3, r2
 8002938:	105b      	asrs	r3, r3, #1
 800293a:	62fb      	str	r3, [r7, #44]	; 0x2c
	int ystep;
	if(y1 < y2)
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002940:	429a      	cmp	r2, r3
 8002942:	d202      	bcs.n	800294a <ILI9341_Draw_Line+0xa8>
	{
		ystep = 1;
 8002944:	2301      	movs	r3, #1
 8002946:	62bb      	str	r3, [r7, #40]	; 0x28
 8002948:	e023      	b.n	8002992 <ILI9341_Draw_Line+0xf0>
	}
	else
	{
		ystep = -1;
 800294a:	f04f 33ff 	mov.w	r3, #4294967295
 800294e:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	for (; x1 <= x2; x1++)
 8002950:	e01f      	b.n	8002992 <ILI9341_Draw_Line+0xf0>
	{
		if (steep)
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	2b00      	cmp	r3, #0
 8002956:	d006      	beq.n	8002966 <ILI9341_Draw_Line+0xc4>
		{
			ILI9341_Draw_Pixel(y1, x1, color);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68b9      	ldr	r1, [r7, #8]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff ff30 	bl	80027c4 <ILI9341_Draw_Pixel>
 8002964:	e005      	b.n	8002972 <ILI9341_Draw_Line+0xd0>
		}
		else
		{
			ILI9341_Draw_Pixel(x1, y1, color);
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff ff29 	bl	80027c4 <ILI9341_Draw_Pixel>
		}
		err -= dy;
 8002972:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (err < 0)
 800297a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297c:	2b00      	cmp	r3, #0
 800297e:	da05      	bge.n	800298c <ILI9341_Draw_Line+0xea>
		{
			y1 += ystep;
 8002980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	4413      	add	r3, r2
 8002986:	607b      	str	r3, [r7, #4]
			err = dx;
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (; x1 <= x2; x1++)
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	3301      	adds	r3, #1
 8002990:	60bb      	str	r3, [r7, #8]
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	429a      	cmp	r2, r3
 8002998:	d9db      	bls.n	8002952 <ILI9341_Draw_Line+0xb0>
		}
	}
}
 800299a:	bf00      	nop
 800299c:	3730      	adds	r7, #48	; 0x30
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <ILI9341_Draw_Circle>:

void ILI9341_Draw_Circle(unsigned int x0, unsigned int y0, int r, unsigned int color, unsigned char flood) {
 80029a2:	b590      	push	{r4, r7, lr}
 80029a4:	b08f      	sub	sp, #60	; 0x3c
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	60f8      	str	r0, [r7, #12]
 80029aa:	60b9      	str	r1, [r7, #8]
 80029ac:	607a      	str	r2, [r7, #4]
 80029ae:	603b      	str	r3, [r7, #0]
	int f = 1 - r;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f1c3 0301 	rsb	r3, r3, #1
 80029b6:	637b      	str	r3, [r7, #52]	; 0x34
	int ddF_x = 1;
 80029b8:	2301      	movs	r3, #1
 80029ba:	633b      	str	r3, [r7, #48]	; 0x30
	int ddF_y = -2 * r;
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	4613      	mov	r3, r2
 80029c0:	07db      	lsls	r3, r3, #31
 80029c2:	1a9b      	subs	r3, r3, r2
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	int x = 0;
 80029c8:	2300      	movs	r3, #0
 80029ca:	62bb      	str	r3, [r7, #40]	; 0x28
	int y = r;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	627b      	str	r3, [r7, #36]	; 0x24
	if (flood == 0) {
 80029d0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f040 8097 	bne.w	8002b08 <ILI9341_Draw_Circle+0x166>
		ILI9341_Draw_Pixel(x0, y0 + r, color);
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	4413      	add	r3, r2
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	4619      	mov	r1, r3
 80029e6:	f7ff feed 	bl	80027c4 <ILI9341_Draw_Pixel>
		ILI9341_Draw_Pixel(x0, y0 - r, color);
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	68ba      	ldr	r2, [r7, #8]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	4619      	mov	r1, r3
 80029f6:	f7ff fee5 	bl	80027c4 <ILI9341_Draw_Pixel>
		ILI9341_Draw_Pixel(x0 + r, y0, color);
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	4413      	add	r3, r2
 8002a00:	4618      	mov	r0, r3
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	4619      	mov	r1, r3
 8002a08:	f7ff fedc 	bl	80027c4 <ILI9341_Draw_Pixel>
		ILI9341_Draw_Pixel(x0 - r, y0, color);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	4618      	mov	r0, r3
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	4619      	mov	r1, r3
 8002a1a:	f7ff fed3 	bl	80027c4 <ILI9341_Draw_Pixel>
		while (x < y) {
 8002a1e:	e06e      	b.n	8002afe <ILI9341_Draw_Circle+0x15c>
			if (f >= 0) {
 8002a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	db09      	blt.n	8002a3a <ILI9341_Draw_Circle+0x98>
				y--;
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	627b      	str	r3, [r7, #36]	; 0x24
				ddF_y += 2;
 8002a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2e:	3302      	adds	r3, #2
 8002a30:	62fb      	str	r3, [r7, #44]	; 0x2c
				f += ddF_y;
 8002a32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a36:	4413      	add	r3, r2
 8002a38:	637b      	str	r3, [r7, #52]	; 0x34
			}
			x++;
 8002a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	62bb      	str	r3, [r7, #40]	; 0x28
			ddF_x += 2;
 8002a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a42:	3302      	adds	r3, #2
 8002a44:	633b      	str	r3, [r7, #48]	; 0x30
			f += ddF_x;
 8002a46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4a:	4413      	add	r3, r2
 8002a4c:	637b      	str	r3, [r7, #52]	; 0x34
			ILI9341_Draw_Pixel(x0 + x, y0 + y, color);
 8002a4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4413      	add	r3, r2
 8002a54:	4618      	mov	r0, r3
 8002a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	4619      	mov	r1, r3
 8002a60:	f7ff feb0 	bl	80027c4 <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(x0 - x, y0 + y, color);
 8002a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	4413      	add	r3, r2
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	4619      	mov	r1, r3
 8002a76:	f7ff fea5 	bl	80027c4 <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(x0 + x, y0 - y, color);
 8002a7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4413      	add	r3, r2
 8002a80:	4618      	mov	r0, r3
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	f7ff fe9a 	bl	80027c4 <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(x0 - x, y0 - y, color);
 8002a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	4618      	mov	r0, r3
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	f7ff fe8f 	bl	80027c4 <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(x0 + y, y0 + x, color);
 8002aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	4413      	add	r3, r2
 8002aac:	4618      	mov	r0, r3
 8002aae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	f7ff fe84 	bl	80027c4 <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(x0 - y, y0 + x, color);
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	4413      	add	r3, r2
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	4619      	mov	r1, r3
 8002ace:	f7ff fe79 	bl	80027c4 <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(x0 + y, y0 - x, color);
 8002ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	4618      	mov	r0, r3
 8002ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002adc:	68ba      	ldr	r2, [r7, #8]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	f7ff fe6e 	bl	80027c4 <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(x0 - y, y0 - x, color);
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	4618      	mov	r0, r3
 8002af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	4619      	mov	r1, r3
 8002afa:	f7ff fe63 	bl	80027c4 <ILI9341_Draw_Pixel>
		while (x < y) {
 8002afe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	429a      	cmp	r2, r3
 8002b04:	db8c      	blt.n	8002a20 <ILI9341_Draw_Circle+0x7e>
				ILI9341_SPI_Send(color >> 8);
				ILI9341_SPI_Send(color);
			}
		}
	}
}
 8002b06:	e135      	b.n	8002d74 <ILI9341_Draw_Circle+0x3d2>
		ILI9341_Draw_Pixel(x0, y0 + r, color);
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	4413      	add	r3, r2
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	4619      	mov	r1, r3
 8002b14:	f7ff fe56 	bl	80027c4 <ILI9341_Draw_Pixel>
		ILI9341_Draw_Pixel(x0, y0 - r, color);
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68ba      	ldr	r2, [r7, #8]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	4619      	mov	r1, r3
 8002b24:	f7ff fe4e 	bl	80027c4 <ILI9341_Draw_Pixel>
		ILI9341_Set_Address(x0 - r, y0, x0 + r, y0);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	1ad0      	subs	r0, r2, r3
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	441a      	add	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	68b9      	ldr	r1, [r7, #8]
 8002b38:	f7ff fdfb 	bl	8002732 <ILI9341_Set_Address>
		DC_COMMAND;
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	2102      	movs	r1, #2
 8002b40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b44:	f7fd ffe4 	bl	8000b10 <HAL_GPIO_WritePin>
		ILI9341_SPI_Send(0x2C);
 8002b48:	202c      	movs	r0, #44	; 0x2c
 8002b4a:	f7ff fd39 	bl	80025c0 <ILI9341_SPI_Send>
		DC_DATA;
 8002b4e:	2201      	movs	r2, #1
 8002b50:	2102      	movs	r1, #2
 8002b52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b56:	f7fd ffdb 	bl	8000b10 <HAL_GPIO_WritePin>
		for (uint32_t fff = 0; fff < r * 2 + 1; fff++) {
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	623b      	str	r3, [r7, #32]
 8002b5e:	e00d      	b.n	8002b7c <ILI9341_Draw_Circle+0x1da>
			ILI9341_SPI_Send(color >> 8);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	0a1b      	lsrs	r3, r3, #8
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff fd2a 	bl	80025c0 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(color);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff fd25 	bl	80025c0 <ILI9341_SPI_Send>
		for (uint32_t fff = 0; fff < r * 2 + 1; fff++) {
 8002b76:	6a3b      	ldr	r3, [r7, #32]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	623b      	str	r3, [r7, #32]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	3301      	adds	r3, #1
 8002b82:	461a      	mov	r2, r3
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d3ea      	bcc.n	8002b60 <ILI9341_Draw_Circle+0x1be>
		while (x < y) {
 8002b8a:	e0ee      	b.n	8002d6a <ILI9341_Draw_Circle+0x3c8>
			if (f >= 0) {
 8002b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	db09      	blt.n	8002ba6 <ILI9341_Draw_Circle+0x204>
				y--;
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	3b01      	subs	r3, #1
 8002b96:	627b      	str	r3, [r7, #36]	; 0x24
				ddF_y += 2;
 8002b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9a:	3302      	adds	r3, #2
 8002b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
				f += ddF_y;
 8002b9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba2:	4413      	add	r3, r2
 8002ba4:	637b      	str	r3, [r7, #52]	; 0x34
			x++;
 8002ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba8:	3301      	adds	r3, #1
 8002baa:	62bb      	str	r3, [r7, #40]	; 0x28
			ddF_x += 2;
 8002bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bae:	3302      	adds	r3, #2
 8002bb0:	633b      	str	r3, [r7, #48]	; 0x30
			f += ddF_x;
 8002bb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb6:	4413      	add	r3, r2
 8002bb8:	637b      	str	r3, [r7, #52]	; 0x34
			ILI9341_Set_Address(x0 - x, y0 + y, x0 + x, y0 + y);
 8002bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	1ad0      	subs	r0, r2, r3
 8002bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	18d1      	adds	r1, r2, r3
 8002bc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	18d4      	adds	r4, r2, r3
 8002bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	4622      	mov	r2, r4
 8002bd4:	f7ff fdad 	bl	8002732 <ILI9341_Set_Address>
			DC_COMMAND;
 8002bd8:	2200      	movs	r2, #0
 8002bda:	2102      	movs	r1, #2
 8002bdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002be0:	f7fd ff96 	bl	8000b10 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8002be4:	202c      	movs	r0, #44	; 0x2c
 8002be6:	f7ff fceb 	bl	80025c0 <ILI9341_SPI_Send>
			DC_DATA;
 8002bea:	2201      	movs	r2, #1
 8002bec:	2102      	movs	r1, #2
 8002bee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bf2:	f7fd ff8d 	bl	8000b10 <HAL_GPIO_WritePin>
			for (uint32_t fff = 0; fff < x * 2 + 1; fff++) {
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	61fb      	str	r3, [r7, #28]
 8002bfa:	e00d      	b.n	8002c18 <ILI9341_Draw_Circle+0x276>
				ILI9341_SPI_Send(color >> 8);
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	0a1b      	lsrs	r3, r3, #8
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff fcdc 	bl	80025c0 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(color);
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff fcd7 	bl	80025c0 <ILI9341_SPI_Send>
			for (uint32_t fff = 0; fff < x * 2 + 1; fff++) {
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	3301      	adds	r3, #1
 8002c16:	61fb      	str	r3, [r7, #28]
 8002c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	461a      	mov	r2, r3
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d3ea      	bcc.n	8002bfc <ILI9341_Draw_Circle+0x25a>
			ILI9341_Set_Address(x0 - x, y0 - y, x0 + x, y0 - y);
 8002c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	1ad0      	subs	r0, r2, r3
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	1ad1      	subs	r1, r2, r3
 8002c32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	18d4      	adds	r4, r2, r3
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	4622      	mov	r2, r4
 8002c40:	f7ff fd77 	bl	8002732 <ILI9341_Set_Address>
			DC_COMMAND;
 8002c44:	2200      	movs	r2, #0
 8002c46:	2102      	movs	r1, #2
 8002c48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c4c:	f7fd ff60 	bl	8000b10 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8002c50:	202c      	movs	r0, #44	; 0x2c
 8002c52:	f7ff fcb5 	bl	80025c0 <ILI9341_SPI_Send>
			DC_DATA;
 8002c56:	2201      	movs	r2, #1
 8002c58:	2102      	movs	r1, #2
 8002c5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c5e:	f7fd ff57 	bl	8000b10 <HAL_GPIO_WritePin>
			for (uint32_t fff = 0; fff < x * 2 + 1; fff++) {
 8002c62:	2300      	movs	r3, #0
 8002c64:	61bb      	str	r3, [r7, #24]
 8002c66:	e00d      	b.n	8002c84 <ILI9341_Draw_Circle+0x2e2>
				ILI9341_SPI_Send(color >> 8);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	0a1b      	lsrs	r3, r3, #8
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7ff fca6 	bl	80025c0 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(color);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff fca1 	bl	80025c0 <ILI9341_SPI_Send>
			for (uint32_t fff = 0; fff < x * 2 + 1; fff++) {
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	3301      	adds	r3, #1
 8002c82:	61bb      	str	r3, [r7, #24]
 8002c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	3301      	adds	r3, #1
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d3ea      	bcc.n	8002c68 <ILI9341_Draw_Circle+0x2c6>
			ILI9341_Set_Address(x0 - y, y0 + x, x0 + y, y0 + x);
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	1ad0      	subs	r0, r2, r3
 8002c98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	18d1      	adds	r1, r2, r3
 8002c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	18d4      	adds	r4, r2, r3
 8002ca4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	4413      	add	r3, r2
 8002caa:	4622      	mov	r2, r4
 8002cac:	f7ff fd41 	bl	8002732 <ILI9341_Set_Address>
			DC_COMMAND;
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	2102      	movs	r1, #2
 8002cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cb8:	f7fd ff2a 	bl	8000b10 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8002cbc:	202c      	movs	r0, #44	; 0x2c
 8002cbe:	f7ff fc7f 	bl	80025c0 <ILI9341_SPI_Send>
			DC_DATA;
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	2102      	movs	r1, #2
 8002cc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cca:	f7fd ff21 	bl	8000b10 <HAL_GPIO_WritePin>
			for (uint32_t fff = 0; fff < y * 2 + 1; fff++) {
 8002cce:	2300      	movs	r3, #0
 8002cd0:	617b      	str	r3, [r7, #20]
 8002cd2:	e00d      	b.n	8002cf0 <ILI9341_Draw_Circle+0x34e>
				ILI9341_SPI_Send(color >> 8);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	0a1b      	lsrs	r3, r3, #8
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff fc70 	bl	80025c0 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(color);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff fc6b 	bl	80025c0 <ILI9341_SPI_Send>
			for (uint32_t fff = 0; fff < y * 2 + 1; fff++) {
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	3301      	adds	r3, #1
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d3ea      	bcc.n	8002cd4 <ILI9341_Draw_Circle+0x332>
			ILI9341_Set_Address(x0 - y, y0 - x, x0 + y, y0 - x);
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	1ad0      	subs	r0, r2, r3
 8002d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	1ad1      	subs	r1, r2, r3
 8002d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	18d4      	adds	r4, r2, r3
 8002d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	4622      	mov	r2, r4
 8002d18:	f7ff fd0b 	bl	8002732 <ILI9341_Set_Address>
			DC_COMMAND;
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	2102      	movs	r1, #2
 8002d20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d24:	f7fd fef4 	bl	8000b10 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8002d28:	202c      	movs	r0, #44	; 0x2c
 8002d2a:	f7ff fc49 	bl	80025c0 <ILI9341_SPI_Send>
			DC_DATA;
 8002d2e:	2201      	movs	r2, #1
 8002d30:	2102      	movs	r1, #2
 8002d32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d36:	f7fd feeb 	bl	8000b10 <HAL_GPIO_WritePin>
			for (uint32_t fff = 0; fff < y * 2 + 1; fff++) {
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	613b      	str	r3, [r7, #16]
 8002d3e:	e00d      	b.n	8002d5c <ILI9341_Draw_Circle+0x3ba>
				ILI9341_SPI_Send(color >> 8);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	0a1b      	lsrs	r3, r3, #8
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff fc3a 	bl	80025c0 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(color);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff fc35 	bl	80025c0 <ILI9341_SPI_Send>
			for (uint32_t fff = 0; fff < y * 2 + 1; fff++) {
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	613b      	str	r3, [r7, #16]
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	3301      	adds	r3, #1
 8002d62:	461a      	mov	r2, r3
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d3ea      	bcc.n	8002d40 <ILI9341_Draw_Circle+0x39e>
		while (x < y) {
 8002d6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	f6ff af0c 	blt.w	8002b8c <ILI9341_Draw_Circle+0x1ea>
}
 8002d74:	bf00      	nop
 8002d76:	373c      	adds	r7, #60	; 0x3c
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd90      	pop	{r4, r7, pc}

08002d7c <ILI9341_Draw_String>:

void ILI9341_Draw_String(unsigned int x, unsigned int y, unsigned int color, unsigned int phone, char *str, unsigned char size)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af02      	add	r7, sp, #8
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
 8002d88:	603b      	str	r3, [r7, #0]
	switch (size)
 8002d8a:	7f3b      	ldrb	r3, [r7, #28]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d028      	beq.n	8002de2 <ILI9341_Draw_String+0x66>
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d02b      	beq.n	8002dec <ILI9341_Draw_String+0x70>
			x += hh*8;
			*str++;
		}
	break;
	}
}
 8002d94:	e059      	b.n	8002e4a <ILI9341_Draw_String+0xce>
			if ((x+(size*8))>X_SIZE)
 8002d96:	7f3b      	ldrb	r3, [r7, #28]
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	441a      	add	r2, r3
 8002da0:	4b2c      	ldr	r3, [pc, #176]	; (8002e54 <ILI9341_Draw_String+0xd8>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d907      	bls.n	8002db8 <ILI9341_Draw_String+0x3c>
				x = 1;
 8002da8:	2301      	movs	r3, #1
 8002daa:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8002dac:	7f3b      	ldrb	r3, [r7, #28]
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	461a      	mov	r2, r3
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	4413      	add	r3, r2
 8002db6:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x, y, color, phone, *str, size);
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	68b9      	ldr	r1, [r7, #8]
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	7f3a      	ldrb	r2, [r7, #28]
 8002dc2:	9201      	str	r2, [sp, #4]
 8002dc4:	9300      	str	r3, [sp, #0]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	f000 f969 	bl	80030a0 <ILI9341_Draw_Char>
			x += size*8-2;
 8002dce:	7f3b      	ldrb	r3, [r7, #28]
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	3b02      	subs	r3, #2
 8002dda:	60fb      	str	r3, [r7, #12]
			*str++;
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	3301      	adds	r3, #1
 8002de0:	61bb      	str	r3, [r7, #24]
		while (*str)
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1d5      	bne.n	8002d96 <ILI9341_Draw_String+0x1a>
	break;
 8002dea:	e02e      	b.n	8002e4a <ILI9341_Draw_String+0xce>
		hh=1;
 8002dec:	4b1a      	ldr	r3, [pc, #104]	; (8002e58 <ILI9341_Draw_String+0xdc>)
 8002dee:	2201      	movs	r2, #1
 8002df0:	701a      	strb	r2, [r3, #0]
		while (*str)
 8002df2:	e025      	b.n	8002e40 <ILI9341_Draw_String+0xc4>
			if ((x+(size*8))>X_SIZE)
 8002df4:	7f3b      	ldrb	r3, [r7, #28]
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	461a      	mov	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	441a      	add	r2, r3
 8002dfe:	4b15      	ldr	r3, [pc, #84]	; (8002e54 <ILI9341_Draw_String+0xd8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d907      	bls.n	8002e16 <ILI9341_Draw_String+0x9a>
				x = 1;
 8002e06:	2301      	movs	r3, #1
 8002e08:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8002e0a:	7f3b      	ldrb	r3, [r7, #28]
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	461a      	mov	r2, r3
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	4413      	add	r3, r2
 8002e14:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	68b9      	ldr	r1, [r7, #8]
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	7f3a      	ldrb	r2, [r7, #28]
 8002e20:	9201      	str	r2, [sp, #4]
 8002e22:	9300      	str	r3, [sp, #0]
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	f000 f93a 	bl	80030a0 <ILI9341_Draw_Char>
			x += hh*8;
 8002e2c:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <ILI9341_Draw_String+0xdc>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	461a      	mov	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	4413      	add	r3, r2
 8002e38:	60fb      	str	r3, [r7, #12]
			*str++;
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	61bb      	str	r3, [r7, #24]
		while (*str)
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1d5      	bne.n	8002df4 <ILI9341_Draw_String+0x78>
	break;
 8002e48:	bf00      	nop
}
 8002e4a:	bf00      	nop
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	20000008 	.word	0x20000008
 8002e58:	200000c4 	.word	0x200000c4

08002e5c <ILI9341_Send_Command>:

static void ILI9341_Send_Command(unsigned char command) {
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	4603      	mov	r3, r0
 8002e64:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Command();
 8002e66:	f000 f9eb 	bl	8003240 <Before_Sending_Command>
	ILI9341_SPI_Send(command);
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff fba7 	bl	80025c0 <ILI9341_SPI_Send>
}
 8002e72:	bf00      	nop
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <ILI9341_Send_Data>:

static void ILI9341_Send_Data(unsigned char data) {
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b082      	sub	sp, #8
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	4603      	mov	r3, r0
 8002e82:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Data();
 8002e84:	f000 f9cc 	bl	8003220 <Before_Sending_Data>
	ILI9341_SPI_Send(data);
 8002e88:	79fb      	ldrb	r3, [r7, #7]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff fb98 	bl	80025c0 <ILI9341_SPI_Send>
}
 8002e90:	bf00      	nop
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <ILI9341_Send_Burst>:

static void ILI9341_Send_Burst(unsigned short color, unsigned long len) {
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	6039      	str	r1, [r7, #0]
 8002ea2:	80fb      	strh	r3, [r7, #6]
	unsigned short blocks;
	unsigned char i, high_bit = color >> 8, low_bit = color;
 8002ea4:	88fb      	ldrh	r3, [r7, #6]
 8002ea6:	0a1b      	lsrs	r3, r3, #8
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	733b      	strb	r3, [r7, #12]
 8002eac:	88fb      	ldrh	r3, [r7, #6]
 8002eae:	72fb      	strb	r3, [r7, #11]
	CS_ON;
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	2104      	movs	r1, #4
 8002eb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002eb8:	f7fd fe2a 	bl	8000b10 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	2102      	movs	r1, #2
 8002ec0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ec4:	f7fd fe24 	bl	8000b10 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8002ec8:	202c      	movs	r0, #44	; 0x2c
 8002eca:	f7ff fb79 	bl	80025c0 <ILI9341_SPI_Send>
	DC_DATA;
 8002ece:	2201      	movs	r2, #1
 8002ed0:	2102      	movs	r1, #2
 8002ed2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ed6:	f7fd fe1b 	bl	8000b10 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(high_bit);
 8002eda:	7b3b      	ldrb	r3, [r7, #12]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff fb6f 	bl	80025c0 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(low_bit);
 8002ee2:	7afb      	ldrb	r3, [r7, #11]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff fb6b 	bl	80025c0 <ILI9341_SPI_Send>
	len--;
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	3b01      	subs	r3, #1
 8002eee:	603b      	str	r3, [r7, #0]
	blocks = (unsigned short) (len / 64); //64 pixels/block
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	099b      	lsrs	r3, r3, #6
 8002ef4:	81fb      	strh	r3, [r7, #14]
	if (high_bit == low_bit)
 8002ef6:	7b3a      	ldrb	r2, [r7, #12]
 8002ef8:	7afb      	ldrb	r3, [r7, #11]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d169      	bne.n	8002fd2 <ILI9341_Send_Burst+0x13a>
	{
		while (blocks--) {
 8002efe:	e027      	b.n	8002f50 <ILI9341_Send_Burst+0xb8>
			i = 16;
 8002f00:	2310      	movs	r3, #16
 8002f02:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(low_bit);
 8002f04:	7afb      	ldrb	r3, [r7, #11]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff fb5a 	bl	80025c0 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8002f0c:	7afb      	ldrb	r3, [r7, #11]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff fb56 	bl	80025c0 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8002f14:	7afb      	ldrb	r3, [r7, #11]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff fb52 	bl	80025c0 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8002f1c:	7afb      	ldrb	r3, [r7, #11]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff fb4e 	bl	80025c0 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8002f24:	7afb      	ldrb	r3, [r7, #11]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff fb4a 	bl	80025c0 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8002f2c:	7afb      	ldrb	r3, [r7, #11]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff fb46 	bl	80025c0 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8002f34:	7afb      	ldrb	r3, [r7, #11]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7ff fb42 	bl	80025c0 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8002f3c:	7afb      	ldrb	r3, [r7, #11]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff fb3e 	bl	80025c0 <ILI9341_SPI_Send>
			} while (--i);
 8002f44:	7b7b      	ldrb	r3, [r7, #13]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	737b      	strb	r3, [r7, #13]
 8002f4a:	7b7b      	ldrb	r3, [r7, #13]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1d9      	bne.n	8002f04 <ILI9341_Send_Burst+0x6c>
		while (blocks--) {
 8002f50:	89fb      	ldrh	r3, [r7, #14]
 8002f52:	1e5a      	subs	r2, r3, #1
 8002f54:	81fa      	strh	r2, [r7, #14]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1d2      	bne.n	8002f00 <ILI9341_Send_Burst+0x68>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f62:	737b      	strb	r3, [r7, #13]
 8002f64:	e007      	b.n	8002f76 <ILI9341_Send_Burst+0xde>
			ILI9341_SPI_Send(low_bit);
 8002f66:	7afb      	ldrb	r3, [r7, #11]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff fb29 	bl	80025c0 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8002f6e:	7afb      	ldrb	r3, [r7, #11]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff fb25 	bl	80025c0 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8002f76:	7b7b      	ldrb	r3, [r7, #13]
 8002f78:	1e5a      	subs	r2, r3, #1
 8002f7a:	737a      	strb	r2, [r7, #13]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1f2      	bne.n	8002f66 <ILI9341_Send_Burst+0xce>
 8002f80:	e03f      	b.n	8003002 <ILI9341_Send_Burst+0x16a>
		}
	}
	else
	{
		while (blocks--) {
			i = 16;
 8002f82:	2310      	movs	r3, #16
 8002f84:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(high_bit);
 8002f86:	7b3b      	ldrb	r3, [r7, #12]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff fb19 	bl	80025c0 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8002f8e:	7afb      	ldrb	r3, [r7, #11]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff fb15 	bl	80025c0 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8002f96:	7b3b      	ldrb	r3, [r7, #12]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff fb11 	bl	80025c0 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8002f9e:	7afb      	ldrb	r3, [r7, #11]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff fb0d 	bl	80025c0 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8002fa6:	7b3b      	ldrb	r3, [r7, #12]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff fb09 	bl	80025c0 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8002fae:	7afb      	ldrb	r3, [r7, #11]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff fb05 	bl	80025c0 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8002fb6:	7b3b      	ldrb	r3, [r7, #12]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7ff fb01 	bl	80025c0 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8002fbe:	7afb      	ldrb	r3, [r7, #11]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff fafd 	bl	80025c0 <ILI9341_SPI_Send>
			} while (--i);
 8002fc6:	7b7b      	ldrb	r3, [r7, #13]
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	737b      	strb	r3, [r7, #13]
 8002fcc:	7b7b      	ldrb	r3, [r7, #13]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1d9      	bne.n	8002f86 <ILI9341_Send_Burst+0xee>
		while (blocks--) {
 8002fd2:	89fb      	ldrh	r3, [r7, #14]
 8002fd4:	1e5a      	subs	r2, r3, #1
 8002fd6:	81fa      	strh	r2, [r7, #14]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1d2      	bne.n	8002f82 <ILI9341_Send_Burst+0xea>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fe4:	737b      	strb	r3, [r7, #13]
 8002fe6:	e007      	b.n	8002ff8 <ILI9341_Send_Burst+0x160>
			ILI9341_SPI_Send(high_bit);
 8002fe8:	7b3b      	ldrb	r3, [r7, #12]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7ff fae8 	bl	80025c0 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8002ff0:	7afb      	ldrb	r3, [r7, #11]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff fae4 	bl	80025c0 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8002ff8:	7b7b      	ldrb	r3, [r7, #13]
 8002ffa:	1e5a      	subs	r2, r3, #1
 8002ffc:	737a      	strb	r2, [r7, #13]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f2      	bne.n	8002fe8 <ILI9341_Send_Burst+0x150>
		}
	}
	CS_OFF;
 8003002:	2201      	movs	r2, #1
 8003004:	2104      	movs	r1, #4
 8003006:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800300a:	f7fd fd81 	bl	8000b10 <HAL_GPIO_WritePin>
}
 800300e:	bf00      	nop
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
	...

08003018 <ILI9341_Draw_Double_Pixel>:

void ILI9341_Draw_Double_Pixel(int x, int y, unsigned int color1, unsigned int color2)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
 8003024:	603b      	str	r3, [r7, #0]
	if((x < 0) || (y < 0) || (x >= X_SIZE) || (y >= Y_SIZE))
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2b00      	cmp	r3, #0
 800302a:	db30      	blt.n	800308e <ILI9341_Draw_Double_Pixel+0x76>
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	2b00      	cmp	r3, #0
 8003030:	db2d      	blt.n	800308e <ILI9341_Draw_Double_Pixel+0x76>
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	4b18      	ldr	r3, [pc, #96]	; (8003098 <ILI9341_Draw_Double_Pixel+0x80>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	429a      	cmp	r2, r3
 800303a:	d228      	bcs.n	800308e <ILI9341_Draw_Double_Pixel+0x76>
 800303c:	68ba      	ldr	r2, [r7, #8]
 800303e:	4b17      	ldr	r3, [pc, #92]	; (800309c <ILI9341_Draw_Double_Pixel+0x84>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	429a      	cmp	r2, r3
 8003044:	d223      	bcs.n	800308e <ILI9341_Draw_Double_Pixel+0x76>
	{
		return;
	}
	ILI9341_Set_Address(x, y, X_SIZE-1, Y_SIZE-1);
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	68b9      	ldr	r1, [r7, #8]
 800304a:	4b13      	ldr	r3, [pc, #76]	; (8003098 <ILI9341_Draw_Double_Pixel+0x80>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	1e5a      	subs	r2, r3, #1
 8003050:	4b12      	ldr	r3, [pc, #72]	; (800309c <ILI9341_Draw_Double_Pixel+0x84>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	3b01      	subs	r3, #1
 8003056:	f7ff fb6c 	bl	8002732 <ILI9341_Set_Address>
	DC_COMMAND;
 800305a:	2200      	movs	r2, #0
 800305c:	2102      	movs	r1, #2
 800305e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003062:	f7fd fd55 	bl	8000b10 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8003066:	202c      	movs	r0, #44	; 0x2c
 8003068:	f7ff faaa 	bl	80025c0 <ILI9341_SPI_Send>
	DC_DATA;
 800306c:	2201      	movs	r2, #1
 800306e:	2102      	movs	r1, #2
 8003070:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003074:	f7fd fd4c 	bl	8000b10 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(color1);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	b2db      	uxtb	r3, r3
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff fa9f 	bl	80025c0 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(color2);
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	b2db      	uxtb	r3, r3
 8003086:	4618      	mov	r0, r3
 8003088:	f7ff fa9a 	bl	80025c0 <ILI9341_SPI_Send>
 800308c:	e000      	b.n	8003090 <ILI9341_Draw_Double_Pixel+0x78>
		return;
 800308e:	bf00      	nop
}
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	20000008 	.word	0x20000008
 800309c:	2000000c 	.word	0x2000000c

080030a0 <ILI9341_Draw_Char>:

static void ILI9341_Draw_Char(int x, int y, unsigned int color, unsigned int phone, unsigned char charcode, unsigned char size)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
 80030ac:	603b      	str	r3, [r7, #0]
	int i,h;
	switch(size)
 80030ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d002      	beq.n	80030bc <ILI9341_Draw_Char+0x1c>
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d055      	beq.n	8003166 <ILI9341_Draw_Char+0xc6>
					}
				}
			}
		break;
	}
}
 80030ba:	e0a9      	b.n	8003210 <ILI9341_Draw_Char+0x170>
			ILI9341_Set_Address(x, y, x+5, y+8);
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	68b9      	ldr	r1, [r7, #8]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	3305      	adds	r3, #5
 80030c4:	461a      	mov	r2, r3
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	3308      	adds	r3, #8
 80030ca:	f7ff fb32 	bl	8002732 <ILI9341_Set_Address>
			DC_COMMAND;
 80030ce:	2200      	movs	r2, #0
 80030d0:	2102      	movs	r1, #2
 80030d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030d6:	f7fd fd1b 	bl	8000b10 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 80030da:	202c      	movs	r0, #44	; 0x2c
 80030dc:	f7ff fa70 	bl	80025c0 <ILI9341_SPI_Send>
			DC_DATA;
 80030e0:	2201      	movs	r2, #1
 80030e2:	2102      	movs	r1, #2
 80030e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030e8:	f7fd fd12 	bl	8000b10 <HAL_GPIO_WritePin>
			for(h=0;h<8;h++)
 80030ec:	2300      	movs	r3, #0
 80030ee:	613b      	str	r3, [r7, #16]
 80030f0:	e035      	b.n	800315e <ILI9341_Draw_Char+0xbe>
				for(i=2;i<8;i++)
 80030f2:	2302      	movs	r3, #2
 80030f4:	617b      	str	r3, [r7, #20]
 80030f6:	e02c      	b.n	8003152 <ILI9341_Draw_Char+0xb2>
					if ((chars8[charcode-0x20][h]>>(7-i))&0x01)
 80030f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80030fc:	3b20      	subs	r3, #32
 80030fe:	4a46      	ldr	r2, [pc, #280]	; (8003218 <ILI9341_Draw_Char+0x178>)
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	441a      	add	r2, r3
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	4413      	add	r3, r2
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	461a      	mov	r2, r3
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f1c3 0307 	rsb	r3, r3, #7
 8003112:	fa42 f303 	asr.w	r3, r2, r3
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00b      	beq.n	8003136 <ILI9341_Draw_Char+0x96>
						ILI9341_SPI_Send(color>>8);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	0a1b      	lsrs	r3, r3, #8
 8003122:	b2db      	uxtb	r3, r3
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff fa4b 	bl	80025c0 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	b2db      	uxtb	r3, r3
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff fa46 	bl	80025c0 <ILI9341_SPI_Send>
 8003134:	e00a      	b.n	800314c <ILI9341_Draw_Char+0xac>
						ILI9341_SPI_Send(phone>>8);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	0a1b      	lsrs	r3, r3, #8
 800313a:	b2db      	uxtb	r3, r3
 800313c:	4618      	mov	r0, r3
 800313e:	f7ff fa3f 	bl	80025c0 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	b2db      	uxtb	r3, r3
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff fa3a 	bl	80025c0 <ILI9341_SPI_Send>
				for(i=2;i<8;i++)
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	3301      	adds	r3, #1
 8003150:	617b      	str	r3, [r7, #20]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	2b07      	cmp	r3, #7
 8003156:	ddcf      	ble.n	80030f8 <ILI9341_Draw_Char+0x58>
			for(h=0;h<8;h++)
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	3301      	adds	r3, #1
 800315c:	613b      	str	r3, [r7, #16]
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	2b07      	cmp	r3, #7
 8003162:	ddc6      	ble.n	80030f2 <ILI9341_Draw_Char+0x52>
			break;
 8003164:	e054      	b.n	8003210 <ILI9341_Draw_Char+0x170>
			ILI9341_Set_Address(x, y, x+7, y+16);
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	68b9      	ldr	r1, [r7, #8]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	3307      	adds	r3, #7
 800316e:	461a      	mov	r2, r3
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	3310      	adds	r3, #16
 8003174:	f7ff fadd 	bl	8002732 <ILI9341_Set_Address>
			DC_COMMAND;
 8003178:	2200      	movs	r2, #0
 800317a:	2102      	movs	r1, #2
 800317c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003180:	f7fd fcc6 	bl	8000b10 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8003184:	202c      	movs	r0, #44	; 0x2c
 8003186:	f7ff fa1b 	bl	80025c0 <ILI9341_SPI_Send>
			DC_DATA;
 800318a:	2201      	movs	r2, #1
 800318c:	2102      	movs	r1, #2
 800318e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003192:	f7fd fcbd 	bl	8000b10 <HAL_GPIO_WritePin>
			for(h=0;h<16;h++)
 8003196:	2300      	movs	r3, #0
 8003198:	613b      	str	r3, [r7, #16]
 800319a:	e035      	b.n	8003208 <ILI9341_Draw_Char+0x168>
				for(i=0;i<8;i++)
 800319c:	2300      	movs	r3, #0
 800319e:	617b      	str	r3, [r7, #20]
 80031a0:	e02c      	b.n	80031fc <ILI9341_Draw_Char+0x15c>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 80031a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80031a6:	3b20      	subs	r3, #32
 80031a8:	4a1c      	ldr	r2, [pc, #112]	; (800321c <ILI9341_Draw_Char+0x17c>)
 80031aa:	011b      	lsls	r3, r3, #4
 80031ac:	441a      	add	r2, r3
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	4413      	add	r3, r2
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	461a      	mov	r2, r3
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f1c3 0307 	rsb	r3, r3, #7
 80031bc:	fa42 f303 	asr.w	r3, r2, r3
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00b      	beq.n	80031e0 <ILI9341_Draw_Char+0x140>
						ILI9341_SPI_Send(color>>8);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	0a1b      	lsrs	r3, r3, #8
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff f9f6 	bl	80025c0 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff f9f1 	bl	80025c0 <ILI9341_SPI_Send>
 80031de:	e00a      	b.n	80031f6 <ILI9341_Draw_Char+0x156>
						ILI9341_SPI_Send(phone>>8);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	0a1b      	lsrs	r3, r3, #8
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff f9ea 	bl	80025c0 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff f9e5 	bl	80025c0 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	3301      	adds	r3, #1
 80031fa:	617b      	str	r3, [r7, #20]
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	2b07      	cmp	r3, #7
 8003200:	ddcf      	ble.n	80031a2 <ILI9341_Draw_Char+0x102>
			for(h=0;h<16;h++)
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	3301      	adds	r3, #1
 8003206:	613b      	str	r3, [r7, #16]
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	2b0f      	cmp	r3, #15
 800320c:	ddc6      	ble.n	800319c <ILI9341_Draw_Char+0xfc>
		break;
 800320e:	bf00      	nop
}
 8003210:	bf00      	nop
 8003212:	3718      	adds	r7, #24
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	0803aad0 	.word	0x0803aad0
 800321c:	0803ada8 	.word	0x0803ada8

08003220 <Before_Sending_Data>:

static void Before_Sending_Data() {
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8003224:	2201      	movs	r2, #1
 8003226:	2102      	movs	r1, #2
 8003228:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800322c:	f7fd fc70 	bl	8000b10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8003230:	2200      	movs	r2, #0
 8003232:	2104      	movs	r1, #4
 8003234:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003238:	f7fd fc6a 	bl	8000b10 <HAL_GPIO_WritePin>
}
 800323c:	bf00      	nop
 800323e:	bd80      	pop	{r7, pc}

08003240 <Before_Sending_Command>:

static void Before_Sending_Command() {
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8003244:	2200      	movs	r2, #0
 8003246:	2102      	movs	r1, #2
 8003248:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800324c:	f7fd fc60 	bl	8000b10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8003250:	2200      	movs	r2, #0
 8003252:	2104      	movs	r1, #4
 8003254:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003258:	f7fd fc5a 	bl	8000b10 <HAL_GPIO_WritePin>
}
 800325c:	bf00      	nop
 800325e:	bd80      	pop	{r7, pc}

08003260 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003266:	f7fd f953 	bl	8000510 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800326a:	f000 f87f 	bl	800336c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800326e:	f000 f8f7 	bl	8003460 <MX_GPIO_Init>
  MX_SPI1_Init();
 8003272:	f000 f8b7 	bl	80033e4 <MX_SPI1_Init>

  /* =============Initialization=============== */
  ILI9341_Init();
 8003276:	f7ff f866 	bl	8002346 <ILI9341_Init>
  ILI9341_Set_Rotation(0);
 800327a:	2000      	movs	r0, #0
 800327c:	f7ff f9d8 	bl	8002630 <ILI9341_Set_Rotation>
  HAL_Delay(500);
 8003280:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003284:	f7fd f9aa 	bl	80005dc <HAL_Delay>
  ILI9341_Fill_Screen(BLUE);
 8003288:	201f      	movs	r0, #31
 800328a:	f7ff fa77 	bl	800277c <ILI9341_Fill_Screen>
//  HAL_Delay(500);
//  ILI9341_Fill_Screen(BLUE);
//  HAL_Delay(500);

    /* ===============Draw menu================= */
    Display_Menu();
 800328e:	f7fd f815 	bl	80002bc <Display_Menu>

//    while (1)
//      {
//  	  HAL_Delay(500);
//      }
	  TP_Init();
 8003292:	f000 fc4d 	bl	8003b30 <TP_Init>
	  /* Infinite loop */
	  while (1)
	  {

		  tp_dev.scan(0);
 8003296:	4b33      	ldr	r3, [pc, #204]	; (8003364 <main+0x104>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2000      	movs	r0, #0
 800329c:	4798      	blx	r3
		  if(tp_dev.sta & TP_PRES_DOWN)
 800329e:	4b31      	ldr	r3, [pc, #196]	; (8003364 <main+0x104>)
 80032a0:	7c1b      	ldrb	r3, [r3, #16]
 80032a2:	b25b      	sxtb	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	daf6      	bge.n	8003296 <main+0x36>
		  {
			  xtemp = TP_Read_XOY(0xD0);
 80032a8:	20d0      	movs	r0, #208	; 0xd0
 80032aa:	f000 faa9 	bl	8003800 <TP_Read_XOY>
 80032ae:	4603      	mov	r3, r0
 80032b0:	80fb      	strh	r3, [r7, #6]
			  ytemp = TP_Read_XOY(0x90);
 80032b2:	2090      	movs	r0, #144	; 0x90
 80032b4:	f000 faa4 	bl	8003800 <TP_Read_XOY>
 80032b8:	4603      	mov	r3, r0
 80032ba:	80bb      	strh	r3, [r7, #4]

			  if(0 == state)
 80032bc:	4b2a      	ldr	r3, [pc, #168]	; (8003368 <main+0x108>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d131      	bne.n	8003328 <main+0xc8>
			  {
				  if(xtemp > 2700 && xtemp < 3400 && ytemp > 3000 && ytemp < 3500) {
 80032c4:	88fb      	ldrh	r3, [r7, #6]
 80032c6:	f640 228c 	movw	r2, #2700	; 0xa8c
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d913      	bls.n	80032f6 <main+0x96>
 80032ce:	88fb      	ldrh	r3, [r7, #6]
 80032d0:	f640 5247 	movw	r2, #3399	; 0xd47
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d80e      	bhi.n	80032f6 <main+0x96>
 80032d8:	88bb      	ldrh	r3, [r7, #4]
 80032da:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80032de:	4293      	cmp	r3, r2
 80032e0:	d909      	bls.n	80032f6 <main+0x96>
 80032e2:	88bb      	ldrh	r3, [r7, #4]
 80032e4:	f640 52ab 	movw	r2, #3499	; 0xdab
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d804      	bhi.n	80032f6 <main+0x96>
					  Display_Color_Picture();
 80032ec:	f7fd f8ce 	bl	800048c <Display_Color_Picture>
					  state = 1;
 80032f0:	4b1d      	ldr	r3, [pc, #116]	; (8003368 <main+0x108>)
 80032f2:	2201      	movs	r2, #1
 80032f4:	701a      	strb	r2, [r3, #0]
				  }

				  if(xtemp > 1200 && xtemp < 1900 && ytemp > 3000 && ytemp < 3500) {
 80032f6:	88fb      	ldrh	r3, [r7, #6]
 80032f8:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80032fc:	d92c      	bls.n	8003358 <main+0xf8>
 80032fe:	88fb      	ldrh	r3, [r7, #6]
 8003300:	f240 726b 	movw	r2, #1899	; 0x76b
 8003304:	4293      	cmp	r3, r2
 8003306:	d827      	bhi.n	8003358 <main+0xf8>
 8003308:	88bb      	ldrh	r3, [r7, #4]
 800330a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800330e:	4293      	cmp	r3, r2
 8003310:	d922      	bls.n	8003358 <main+0xf8>
 8003312:	88bb      	ldrh	r3, [r7, #4]
 8003314:	f640 52ab 	movw	r2, #3499	; 0xdab
 8003318:	4293      	cmp	r3, r2
 800331a:	d81d      	bhi.n	8003358 <main+0xf8>
					  Display_Text();
 800331c:	f7fd f864 	bl	80003e8 <Display_Text>
					  state = 1;
 8003320:	4b11      	ldr	r3, [pc, #68]	; (8003368 <main+0x108>)
 8003322:	2201      	movs	r2, #1
 8003324:	701a      	strb	r2, [r3, #0]
 8003326:	e017      	b.n	8003358 <main+0xf8>
				  }
			  }
			  else
			  {
				  if(xtemp > 3400 && xtemp < 3900 && ytemp > 350 && ytemp < 750) {
 8003328:	88fb      	ldrh	r3, [r7, #6]
 800332a:	f640 5248 	movw	r2, #3400	; 0xd48
 800332e:	4293      	cmp	r3, r2
 8003330:	d912      	bls.n	8003358 <main+0xf8>
 8003332:	88fb      	ldrh	r3, [r7, #6]
 8003334:	f640 723b 	movw	r2, #3899	; 0xf3b
 8003338:	4293      	cmp	r3, r2
 800333a:	d80d      	bhi.n	8003358 <main+0xf8>
 800333c:	88bb      	ldrh	r3, [r7, #4]
 800333e:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8003342:	d909      	bls.n	8003358 <main+0xf8>
 8003344:	88bb      	ldrh	r3, [r7, #4]
 8003346:	f240 22ed 	movw	r2, #749	; 0x2ed
 800334a:	4293      	cmp	r3, r2
 800334c:	d804      	bhi.n	8003358 <main+0xf8>
					  Display_Menu();
 800334e:	f7fc ffb5 	bl	80002bc <Display_Menu>
					  state = 0;
 8003352:	4b05      	ldr	r3, [pc, #20]	; (8003368 <main+0x108>)
 8003354:	2200      	movs	r2, #0
 8003356:	701a      	strb	r2, [r3, #0]
				  }
			  }

			  HAL_Delay(500);
 8003358:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800335c:	f7fd f93e 	bl	80005dc <HAL_Delay>
		  tp_dev.scan(0);
 8003360:	e799      	b.n	8003296 <main+0x36>
 8003362:	bf00      	nop
 8003364:	20000014 	.word	0x20000014
 8003368:	200000bc 	.word	0x200000bc

0800336c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b090      	sub	sp, #64	; 0x40
 8003370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003372:	f107 0318 	add.w	r3, r7, #24
 8003376:	2228      	movs	r2, #40	; 0x28
 8003378:	2100      	movs	r1, #0
 800337a:	4618      	mov	r0, r3
 800337c:	f000 fc30 	bl	8003be0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003380:	1d3b      	adds	r3, r7, #4
 8003382:	2200      	movs	r2, #0
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	605a      	str	r2, [r3, #4]
 8003388:	609a      	str	r2, [r3, #8]
 800338a:	60da      	str	r2, [r3, #12]
 800338c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800338e:	2302      	movs	r3, #2
 8003390:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003392:	2301      	movs	r3, #1
 8003394:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003396:	2310      	movs	r3, #16
 8003398:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800339a:	2300      	movs	r3, #0
 800339c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800339e:	f107 0318 	add.w	r3, r7, #24
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fd fbcc 	bl	8000b40 <HAL_RCC_OscConfig>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80033ae:	f000 f8ab 	bl	8003508 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033b2:	230f      	movs	r3, #15
 80033b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80033b6:	2300      	movs	r3, #0
 80033b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033ba:	2300      	movs	r3, #0
 80033bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80033be:	2300      	movs	r3, #0
 80033c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80033c2:	2300      	movs	r3, #0
 80033c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80033c6:	1d3b      	adds	r3, r7, #4
 80033c8:	2100      	movs	r1, #0
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7fe fac0 	bl	8001950 <HAL_RCC_ClockConfig>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80033d6:	f000 f897 	bl	8003508 <Error_Handler>
  }
}
 80033da:	bf00      	nop
 80033dc:	3740      	adds	r7, #64	; 0x40
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
	...

080033e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80033e8:	4b1b      	ldr	r3, [pc, #108]	; (8003458 <MX_SPI1_Init+0x74>)
 80033ea:	4a1c      	ldr	r2, [pc, #112]	; (800345c <MX_SPI1_Init+0x78>)
 80033ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80033ee:	4b1a      	ldr	r3, [pc, #104]	; (8003458 <MX_SPI1_Init+0x74>)
 80033f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80033f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80033f6:	4b18      	ldr	r3, [pc, #96]	; (8003458 <MX_SPI1_Init+0x74>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80033fc:	4b16      	ldr	r3, [pc, #88]	; (8003458 <MX_SPI1_Init+0x74>)
 80033fe:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003402:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003404:	4b14      	ldr	r3, [pc, #80]	; (8003458 <MX_SPI1_Init+0x74>)
 8003406:	2200      	movs	r2, #0
 8003408:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800340a:	4b13      	ldr	r3, [pc, #76]	; (8003458 <MX_SPI1_Init+0x74>)
 800340c:	2200      	movs	r2, #0
 800340e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003410:	4b11      	ldr	r3, [pc, #68]	; (8003458 <MX_SPI1_Init+0x74>)
 8003412:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003416:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003418:	4b0f      	ldr	r3, [pc, #60]	; (8003458 <MX_SPI1_Init+0x74>)
 800341a:	2200      	movs	r2, #0
 800341c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800341e:	4b0e      	ldr	r3, [pc, #56]	; (8003458 <MX_SPI1_Init+0x74>)
 8003420:	2200      	movs	r2, #0
 8003422:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003424:	4b0c      	ldr	r3, [pc, #48]	; (8003458 <MX_SPI1_Init+0x74>)
 8003426:	2200      	movs	r2, #0
 8003428:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800342a:	4b0b      	ldr	r3, [pc, #44]	; (8003458 <MX_SPI1_Init+0x74>)
 800342c:	2200      	movs	r2, #0
 800342e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003430:	4b09      	ldr	r3, [pc, #36]	; (8003458 <MX_SPI1_Init+0x74>)
 8003432:	2207      	movs	r2, #7
 8003434:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003436:	4b08      	ldr	r3, [pc, #32]	; (8003458 <MX_SPI1_Init+0x74>)
 8003438:	2200      	movs	r2, #0
 800343a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800343c:	4b06      	ldr	r3, [pc, #24]	; (8003458 <MX_SPI1_Init+0x74>)
 800343e:	2208      	movs	r2, #8
 8003440:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003442:	4805      	ldr	r0, [pc, #20]	; (8003458 <MX_SPI1_Init+0x74>)
 8003444:	f7fe fc6a 	bl	8001d1c <HAL_SPI_Init>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800344e:	f000 f85b 	bl	8003508 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003452:	bf00      	nop
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	200000c8 	.word	0x200000c8
 800345c:	40013000 	.word	0x40013000

08003460 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b08a      	sub	sp, #40	; 0x28
 8003464:	af00      	add	r7, sp, #0
//  __HAL_RCC_GPIOA_CLK_ENABLE();

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003466:	4b27      	ldr	r3, [pc, #156]	; (8003504 <MX_GPIO_Init+0xa4>)
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	4a26      	ldr	r2, [pc, #152]	; (8003504 <MX_GPIO_Init+0xa4>)
 800346c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003470:	6153      	str	r3, [r2, #20]
 8003472:	4b24      	ldr	r3, [pc, #144]	; (8003504 <MX_GPIO_Init+0xa4>)
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347a:	613b      	str	r3, [r7, #16]
 800347c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800347e:	4b21      	ldr	r3, [pc, #132]	; (8003504 <MX_GPIO_Init+0xa4>)
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	4a20      	ldr	r2, [pc, #128]	; (8003504 <MX_GPIO_Init+0xa4>)
 8003484:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003488:	6153      	str	r3, [r2, #20]
 800348a:	4b1e      	ldr	r3, [pc, #120]	; (8003504 <MX_GPIO_Init+0xa4>)
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003496:	4b1b      	ldr	r3, [pc, #108]	; (8003504 <MX_GPIO_Init+0xa4>)
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	4a1a      	ldr	r2, [pc, #104]	; (8003504 <MX_GPIO_Init+0xa4>)
 800349c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80034a0:	6153      	str	r3, [r2, #20]
 80034a2:	4b18      	ldr	r3, [pc, #96]	; (8003504 <MX_GPIO_Init+0xa4>)
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034aa:	60bb      	str	r3, [r7, #8]
 80034ac:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80034ae:	4b15      	ldr	r3, [pc, #84]	; (8003504 <MX_GPIO_Init+0xa4>)
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	4a14      	ldr	r2, [pc, #80]	; (8003504 <MX_GPIO_Init+0xa4>)
 80034b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034b8:	6153      	str	r3, [r2, #20]
 80034ba:	4b12      	ldr	r3, [pc, #72]	; (8003504 <MX_GPIO_Init+0xa4>)
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034c2:	607b      	str	r3, [r7, #4]
 80034c4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80034c6:	4b0f      	ldr	r3, [pc, #60]	; (8003504 <MX_GPIO_Init+0xa4>)
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	4a0e      	ldr	r2, [pc, #56]	; (8003504 <MX_GPIO_Init+0xa4>)
 80034cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80034d0:	6153      	str	r3, [r2, #20]
 80034d2:	4b0c      	ldr	r3, [pc, #48]	; (8003504 <MX_GPIO_Init+0xa4>)
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034da:	603b      	str	r3, [r7, #0]
 80034dc:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin 	= DC_Pin | CS_Pin | RESET_Pin;
 80034de:	2307      	movs	r3, #7
 80034e0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 80034e2:	2301      	movs	r3, #1
 80034e4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 80034e6:	2300      	movs	r3, #0
 80034e8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed 	= GPIO_SPEED_FREQ_LOW;
 80034ea:	2300      	movs	r3, #0
 80034ec:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ee:	f107 0314 	add.w	r3, r7, #20
 80034f2:	4619      	mov	r1, r3
 80034f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034f8:	f7fd f978 	bl	80007ec <HAL_GPIO_Init>

}
 80034fc:	bf00      	nop
 80034fe:	3728      	adds	r7, #40	; 0x28
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	40021000 	.word	0x40021000

08003508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800350c:	bf00      	nop
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
	...

08003518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800351e:	4b0f      	ldr	r3, [pc, #60]	; (800355c <HAL_MspInit+0x44>)
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	4a0e      	ldr	r2, [pc, #56]	; (800355c <HAL_MspInit+0x44>)
 8003524:	f043 0301 	orr.w	r3, r3, #1
 8003528:	6193      	str	r3, [r2, #24]
 800352a:	4b0c      	ldr	r3, [pc, #48]	; (800355c <HAL_MspInit+0x44>)
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	607b      	str	r3, [r7, #4]
 8003534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003536:	4b09      	ldr	r3, [pc, #36]	; (800355c <HAL_MspInit+0x44>)
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	4a08      	ldr	r2, [pc, #32]	; (800355c <HAL_MspInit+0x44>)
 800353c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003540:	61d3      	str	r3, [r2, #28]
 8003542:	4b06      	ldr	r3, [pc, #24]	; (800355c <HAL_MspInit+0x44>)
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354a:	603b      	str	r3, [r7, #0]
 800354c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800354e:	bf00      	nop
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	40021000 	.word	0x40021000

08003560 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b08a      	sub	sp, #40	; 0x28
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003568:	f107 0314 	add.w	r3, r7, #20
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	605a      	str	r2, [r3, #4]
 8003572:	609a      	str	r2, [r3, #8]
 8003574:	60da      	str	r2, [r3, #12]
 8003576:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a17      	ldr	r2, [pc, #92]	; (80035dc <HAL_SPI_MspInit+0x7c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d128      	bne.n	80035d4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003582:	4b17      	ldr	r3, [pc, #92]	; (80035e0 <HAL_SPI_MspInit+0x80>)
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	4a16      	ldr	r2, [pc, #88]	; (80035e0 <HAL_SPI_MspInit+0x80>)
 8003588:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800358c:	6193      	str	r3, [r2, #24]
 800358e:	4b14      	ldr	r3, [pc, #80]	; (80035e0 <HAL_SPI_MspInit+0x80>)
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003596:	613b      	str	r3, [r7, #16]
 8003598:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800359a:	4b11      	ldr	r3, [pc, #68]	; (80035e0 <HAL_SPI_MspInit+0x80>)
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	4a10      	ldr	r2, [pc, #64]	; (80035e0 <HAL_SPI_MspInit+0x80>)
 80035a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035a4:	6153      	str	r3, [r2, #20]
 80035a6:	4b0e      	ldr	r3, [pc, #56]	; (80035e0 <HAL_SPI_MspInit+0x80>)
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80035b2:	23e0      	movs	r3, #224	; 0xe0
 80035b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b6:	2302      	movs	r3, #2
 80035b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ba:	2300      	movs	r3, #0
 80035bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035be:	2303      	movs	r3, #3
 80035c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035c2:	2305      	movs	r3, #5
 80035c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035c6:	f107 0314 	add.w	r3, r7, #20
 80035ca:	4619      	mov	r1, r3
 80035cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035d0:	f7fd f90c 	bl	80007ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80035d4:	bf00      	nop
 80035d6:	3728      	adds	r7, #40	; 0x28
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40013000 	.word	0x40013000
 80035e0:	40021000 	.word	0x40021000

080035e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80035e8:	bf00      	nop
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035f2:	b480      	push	{r7}
 80035f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035f6:	e7fe      	b.n	80035f6 <HardFault_Handler+0x4>

080035f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035fc:	e7fe      	b.n	80035fc <MemManage_Handler+0x4>

080035fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035fe:	b480      	push	{r7}
 8003600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003602:	e7fe      	b.n	8003602 <BusFault_Handler+0x4>

08003604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003608:	e7fe      	b.n	8003608 <UsageFault_Handler+0x4>

0800360a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800360a:	b480      	push	{r7}
 800360c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800360e:	bf00      	nop
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800361c:	bf00      	nop
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003626:	b480      	push	{r7}
 8003628:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800362a:	bf00      	nop
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003638:	f7fc ffb0 	bl	800059c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800363c:	bf00      	nop
 800363e:	bd80      	pop	{r7, pc}

08003640 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003644:	4b08      	ldr	r3, [pc, #32]	; (8003668 <SystemInit+0x28>)
 8003646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364a:	4a07      	ldr	r2, [pc, #28]	; (8003668 <SystemInit+0x28>)
 800364c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003650:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003654:	4b04      	ldr	r3, [pc, #16]	; (8003668 <SystemInit+0x28>)
 8003656:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800365a:	609a      	str	r2, [r3, #8]
#endif
}
 800365c:	bf00      	nop
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	e000ed00 	.word	0xe000ed00

0800366c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800366c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036a4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003670:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003672:	e003      	b.n	800367c <LoopCopyDataInit>

08003674 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003674:	4b0c      	ldr	r3, [pc, #48]	; (80036a8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003676:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003678:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800367a:	3104      	adds	r1, #4

0800367c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800367c:	480b      	ldr	r0, [pc, #44]	; (80036ac <LoopForever+0xa>)
	ldr	r3, =_edata
 800367e:	4b0c      	ldr	r3, [pc, #48]	; (80036b0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003680:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003682:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003684:	d3f6      	bcc.n	8003674 <CopyDataInit>
	ldr	r2, =_sbss
 8003686:	4a0b      	ldr	r2, [pc, #44]	; (80036b4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003688:	e002      	b.n	8003690 <LoopFillZerobss>

0800368a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800368a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800368c:	f842 3b04 	str.w	r3, [r2], #4

08003690 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003690:	4b09      	ldr	r3, [pc, #36]	; (80036b8 <LoopForever+0x16>)
	cmp	r2, r3
 8003692:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003694:	d3f9      	bcc.n	800368a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003696:	f7ff ffd3 	bl	8003640 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800369a:	f000 fa7d 	bl	8003b98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800369e:	f7ff fddf 	bl	8003260 <main>

080036a2 <LoopForever>:

LoopForever:
    b LoopForever
 80036a2:	e7fe      	b.n	80036a2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80036a4:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 80036a8:	0803b3b0 	.word	0x0803b3b0
	ldr	r0, =_sdata
 80036ac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80036b0:	2000003c 	.word	0x2000003c
	ldr	r2, =_sbss
 80036b4:	2000003c 	.word	0x2000003c
	ldr	r3, = _ebss
 80036b8:	2000012c 	.word	0x2000012c

080036bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80036bc:	e7fe      	b.n	80036bc <ADC1_2_IRQHandler>
	...

080036c0 <TP_Write_Byte>:
 * @function   :Write a byte data to the touch screen IC with SPI bus
 * @parameters :num:Data to be written
 * @retvalue   :None
******************************************************************************/
void TP_Write_Byte(uint8_t num)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	4603      	mov	r3, r0
 80036c8:	71fb      	strb	r3, [r7, #7]
	uint8_t count = 0;
 80036ca:	2300      	movs	r3, #0
 80036cc:	73fb      	strb	r3, [r7, #15]
	for(count = 0; count < 8; count++)
 80036ce:	2300      	movs	r3, #0
 80036d0:	73fb      	strb	r3, [r7, #15]
 80036d2:	e021      	b.n	8003718 <TP_Write_Byte+0x58>
	{
		if(num & 0x80)
 80036d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	da05      	bge.n	80036e8 <TP_Write_Byte+0x28>
			T_DIN_ON;
 80036dc:	2201      	movs	r2, #1
 80036de:	2110      	movs	r1, #16
 80036e0:	4811      	ldr	r0, [pc, #68]	; (8003728 <TP_Write_Byte+0x68>)
 80036e2:	f7fd fa15 	bl	8000b10 <HAL_GPIO_WritePin>
 80036e6:	e004      	b.n	80036f2 <TP_Write_Byte+0x32>
		else
			T_DIN_OFF;
 80036e8:	2200      	movs	r2, #0
 80036ea:	2110      	movs	r1, #16
 80036ec:	480e      	ldr	r0, [pc, #56]	; (8003728 <TP_Write_Byte+0x68>)
 80036ee:	f7fd fa0f 	bl	8000b10 <HAL_GPIO_WritePin>

		num <<= 1;
 80036f2:	79fb      	ldrb	r3, [r7, #7]
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	71fb      	strb	r3, [r7, #7]
		T_CLK_OFF;
 80036f8:	2200      	movs	r2, #0
 80036fa:	2101      	movs	r1, #1
 80036fc:	480b      	ldr	r0, [pc, #44]	; (800372c <TP_Write_Byte+0x6c>)
 80036fe:	f7fd fa07 	bl	8000b10 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8003702:	2001      	movs	r0, #1
 8003704:	f7fc ff6a 	bl	80005dc <HAL_Delay>
		T_CLK_ON;
 8003708:	2201      	movs	r2, #1
 800370a:	2101      	movs	r1, #1
 800370c:	4807      	ldr	r0, [pc, #28]	; (800372c <TP_Write_Byte+0x6c>)
 800370e:	f7fd f9ff 	bl	8000b10 <HAL_GPIO_WritePin>
	for(count = 0; count < 8; count++)
 8003712:	7bfb      	ldrb	r3, [r7, #15]
 8003714:	3301      	adds	r3, #1
 8003716:	73fb      	strb	r3, [r7, #15]
 8003718:	7bfb      	ldrb	r3, [r7, #15]
 800371a:	2b07      	cmp	r3, #7
 800371c:	d9da      	bls.n	80036d4 <TP_Write_Byte+0x14>
	}
}
 800371e:	bf00      	nop
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	48000800 	.word	0x48000800
 800372c:	48000400 	.word	0x48000400

08003730 <TP_Read_AD>:
 * @function   :Reading adc values from touch screen IC with SPI bus
 * @parameters :CMD:Read command,0xD0 for x,0x90 for y
 * @retvalue   :Read data
******************************************************************************/
uint16_t TP_Read_AD(uint8_t CMD)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	4603      	mov	r3, r0
 8003738:	71fb      	strb	r3, [r7, #7]
	uint8_t count = 0;
 800373a:	2300      	movs	r3, #0
 800373c:	73fb      	strb	r3, [r7, #15]
	uint16_t Num = 0;
 800373e:	2300      	movs	r3, #0
 8003740:	81bb      	strh	r3, [r7, #12]
	T_CLK_OFF;
 8003742:	2200      	movs	r2, #0
 8003744:	2101      	movs	r1, #1
 8003746:	482c      	ldr	r0, [pc, #176]	; (80037f8 <TP_Read_AD+0xc8>)
 8003748:	f7fd f9e2 	bl	8000b10 <HAL_GPIO_WritePin>
	T_DIN_OFF;
 800374c:	2200      	movs	r2, #0
 800374e:	2110      	movs	r1, #16
 8003750:	482a      	ldr	r0, [pc, #168]	; (80037fc <TP_Read_AD+0xcc>)
 8003752:	f7fd f9dd 	bl	8000b10 <HAL_GPIO_WritePin>
	T_CS_OFF;
 8003756:	2200      	movs	r2, #0
 8003758:	2120      	movs	r1, #32
 800375a:	4828      	ldr	r0, [pc, #160]	; (80037fc <TP_Read_AD+0xcc>)
 800375c:	f7fd f9d8 	bl	8000b10 <HAL_GPIO_WritePin>
	TP_Write_Byte(CMD);
 8003760:	79fb      	ldrb	r3, [r7, #7]
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff ffac 	bl	80036c0 <TP_Write_Byte>
	HAL_Delay(6);
 8003768:	2006      	movs	r0, #6
 800376a:	f7fc ff37 	bl	80005dc <HAL_Delay>
	T_CLK_OFF;
 800376e:	2200      	movs	r2, #0
 8003770:	2101      	movs	r1, #1
 8003772:	4821      	ldr	r0, [pc, #132]	; (80037f8 <TP_Read_AD+0xc8>)
 8003774:	f7fd f9cc 	bl	8000b10 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003778:	2001      	movs	r0, #1
 800377a:	f7fc ff2f 	bl	80005dc <HAL_Delay>
	T_CLK_ON;
 800377e:	2201      	movs	r2, #1
 8003780:	2101      	movs	r1, #1
 8003782:	481d      	ldr	r0, [pc, #116]	; (80037f8 <TP_Read_AD+0xc8>)
 8003784:	f7fd f9c4 	bl	8000b10 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003788:	2001      	movs	r0, #1
 800378a:	f7fc ff27 	bl	80005dc <HAL_Delay>
	T_CLK_OFF;
 800378e:	2200      	movs	r2, #0
 8003790:	2101      	movs	r1, #1
 8003792:	4819      	ldr	r0, [pc, #100]	; (80037f8 <TP_Read_AD+0xc8>)
 8003794:	f7fd f9bc 	bl	8000b10 <HAL_GPIO_WritePin>
	for(count = 0; count < 16; count++)
 8003798:	2300      	movs	r3, #0
 800379a:	73fb      	strb	r3, [r7, #15]
 800379c:	e01c      	b.n	80037d8 <TP_Read_AD+0xa8>
	{
		Num <<= 1;
 800379e:	89bb      	ldrh	r3, [r7, #12]
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	81bb      	strh	r3, [r7, #12]
		T_CLK_OFF;
 80037a4:	2200      	movs	r2, #0
 80037a6:	2101      	movs	r1, #1
 80037a8:	4813      	ldr	r0, [pc, #76]	; (80037f8 <TP_Read_AD+0xc8>)
 80037aa:	f7fd f9b1 	bl	8000b10 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80037ae:	2001      	movs	r0, #1
 80037b0:	f7fc ff14 	bl	80005dc <HAL_Delay>
		T_CLK_ON;
 80037b4:	2201      	movs	r2, #1
 80037b6:	2101      	movs	r1, #1
 80037b8:	480f      	ldr	r0, [pc, #60]	; (80037f8 <TP_Read_AD+0xc8>)
 80037ba:	f7fd f9a9 	bl	8000b10 <HAL_GPIO_WritePin>
		if(T_DO) Num++;
 80037be:	2104      	movs	r1, #4
 80037c0:	480d      	ldr	r0, [pc, #52]	; (80037f8 <TP_Read_AD+0xc8>)
 80037c2:	f7fd f98d 	bl	8000ae0 <HAL_GPIO_ReadPin>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d002      	beq.n	80037d2 <TP_Read_AD+0xa2>
 80037cc:	89bb      	ldrh	r3, [r7, #12]
 80037ce:	3301      	adds	r3, #1
 80037d0:	81bb      	strh	r3, [r7, #12]
	for(count = 0; count < 16; count++)
 80037d2:	7bfb      	ldrb	r3, [r7, #15]
 80037d4:	3301      	adds	r3, #1
 80037d6:	73fb      	strb	r3, [r7, #15]
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
 80037da:	2b0f      	cmp	r3, #15
 80037dc:	d9df      	bls.n	800379e <TP_Read_AD+0x6e>
	}
	Num >>= 4;
 80037de:	89bb      	ldrh	r3, [r7, #12]
 80037e0:	091b      	lsrs	r3, r3, #4
 80037e2:	81bb      	strh	r3, [r7, #12]
	T_CS_ON;
 80037e4:	2201      	movs	r2, #1
 80037e6:	2120      	movs	r1, #32
 80037e8:	4804      	ldr	r0, [pc, #16]	; (80037fc <TP_Read_AD+0xcc>)
 80037ea:	f7fd f991 	bl	8000b10 <HAL_GPIO_WritePin>
	return(Num);
 80037ee:	89bb      	ldrh	r3, [r7, #12]

}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	48000400 	.word	0x48000400
 80037fc:	48000800 	.word	0x48000800

08003800 <TP_Read_XOY>:
								and take the average
 * @parameters :xy:Read command(CMD_RDX/CMD_RDY)
 * @retvalue   :Read data
******************************************************************************/
uint16_t TP_Read_XOY(uint8_t xy)
{
 8003800:	b590      	push	{r4, r7, lr}
 8003802:	b089      	sub	sp, #36	; 0x24
 8003804:	af00      	add	r7, sp, #0
 8003806:	4603      	mov	r3, r0
 8003808:	71fb      	strb	r3, [r7, #7]
	uint16_t i, j;
	uint16_t buf[READ_TIMES];
	uint16_t sum = 0;
 800380a:	2300      	movs	r3, #0
 800380c:	837b      	strh	r3, [r7, #26]
	uint16_t temp;
	for(i=0;i<READ_TIMES;i++) buf[i] = TP_Read_AD(xy);
 800380e:	2300      	movs	r3, #0
 8003810:	83fb      	strh	r3, [r7, #30]
 8003812:	e00f      	b.n	8003834 <TP_Read_XOY+0x34>
 8003814:	8bfc      	ldrh	r4, [r7, #30]
 8003816:	79fb      	ldrb	r3, [r7, #7]
 8003818:	4618      	mov	r0, r3
 800381a:	f7ff ff89 	bl	8003730 <TP_Read_AD>
 800381e:	4603      	mov	r3, r0
 8003820:	461a      	mov	r2, r3
 8003822:	0063      	lsls	r3, r4, #1
 8003824:	f107 0120 	add.w	r1, r7, #32
 8003828:	440b      	add	r3, r1
 800382a:	f823 2c14 	strh.w	r2, [r3, #-20]
 800382e:	8bfb      	ldrh	r3, [r7, #30]
 8003830:	3301      	adds	r3, #1
 8003832:	83fb      	strh	r3, [r7, #30]
 8003834:	8bfb      	ldrh	r3, [r7, #30]
 8003836:	2b04      	cmp	r3, #4
 8003838:	d9ec      	bls.n	8003814 <TP_Read_XOY+0x14>
	for(i=0;i<READ_TIMES-1; i++)
 800383a:	2300      	movs	r3, #0
 800383c:	83fb      	strh	r3, [r7, #30]
 800383e:	e03b      	b.n	80038b8 <TP_Read_XOY+0xb8>
	{
		for(j = i+1; j < READ_TIMES; j++)
 8003840:	8bfb      	ldrh	r3, [r7, #30]
 8003842:	3301      	adds	r3, #1
 8003844:	83bb      	strh	r3, [r7, #28]
 8003846:	e031      	b.n	80038ac <TP_Read_XOY+0xac>
		{
			if(buf[i] > buf[j])
 8003848:	8bfb      	ldrh	r3, [r7, #30]
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	f107 0220 	add.w	r2, r7, #32
 8003850:	4413      	add	r3, r2
 8003852:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8003856:	8bbb      	ldrh	r3, [r7, #28]
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	f107 0120 	add.w	r1, r7, #32
 800385e:	440b      	add	r3, r1
 8003860:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003864:	429a      	cmp	r2, r3
 8003866:	d91e      	bls.n	80038a6 <TP_Read_XOY+0xa6>
			{
				temp = buf[i];
 8003868:	8bfb      	ldrh	r3, [r7, #30]
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	f107 0220 	add.w	r2, r7, #32
 8003870:	4413      	add	r3, r2
 8003872:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003876:	833b      	strh	r3, [r7, #24]
				buf[i] = buf[j];
 8003878:	8bbb      	ldrh	r3, [r7, #28]
 800387a:	8bfa      	ldrh	r2, [r7, #30]
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	f107 0120 	add.w	r1, r7, #32
 8003882:	440b      	add	r3, r1
 8003884:	f833 1c14 	ldrh.w	r1, [r3, #-20]
 8003888:	0053      	lsls	r3, r2, #1
 800388a:	f107 0220 	add.w	r2, r7, #32
 800388e:	4413      	add	r3, r2
 8003890:	460a      	mov	r2, r1
 8003892:	f823 2c14 	strh.w	r2, [r3, #-20]
				buf[j] = temp;
 8003896:	8bbb      	ldrh	r3, [r7, #28]
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	f107 0220 	add.w	r2, r7, #32
 800389e:	4413      	add	r3, r2
 80038a0:	8b3a      	ldrh	r2, [r7, #24]
 80038a2:	f823 2c14 	strh.w	r2, [r3, #-20]
		for(j = i+1; j < READ_TIMES; j++)
 80038a6:	8bbb      	ldrh	r3, [r7, #28]
 80038a8:	3301      	adds	r3, #1
 80038aa:	83bb      	strh	r3, [r7, #28]
 80038ac:	8bbb      	ldrh	r3, [r7, #28]
 80038ae:	2b04      	cmp	r3, #4
 80038b0:	d9ca      	bls.n	8003848 <TP_Read_XOY+0x48>
	for(i=0;i<READ_TIMES-1; i++)
 80038b2:	8bfb      	ldrh	r3, [r7, #30]
 80038b4:	3301      	adds	r3, #1
 80038b6:	83fb      	strh	r3, [r7, #30]
 80038b8:	8bfb      	ldrh	r3, [r7, #30]
 80038ba:	2b03      	cmp	r3, #3
 80038bc:	d9c0      	bls.n	8003840 <TP_Read_XOY+0x40>
			}
		}
	}
	sum = 0;
 80038be:	2300      	movs	r3, #0
 80038c0:	837b      	strh	r3, [r7, #26]
	for(i = LOST_VAL; i < READ_TIMES - LOST_VAL; i++) sum += buf[i];
 80038c2:	2301      	movs	r3, #1
 80038c4:	83fb      	strh	r3, [r7, #30]
 80038c6:	e00c      	b.n	80038e2 <TP_Read_XOY+0xe2>
 80038c8:	8bfb      	ldrh	r3, [r7, #30]
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	f107 0220 	add.w	r2, r7, #32
 80038d0:	4413      	add	r3, r2
 80038d2:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80038d6:	8b7b      	ldrh	r3, [r7, #26]
 80038d8:	4413      	add	r3, r2
 80038da:	837b      	strh	r3, [r7, #26]
 80038dc:	8bfb      	ldrh	r3, [r7, #30]
 80038de:	3301      	adds	r3, #1
 80038e0:	83fb      	strh	r3, [r7, #30]
 80038e2:	8bfb      	ldrh	r3, [r7, #30]
 80038e4:	2b03      	cmp	r3, #3
 80038e6:	d9ef      	bls.n	80038c8 <TP_Read_XOY+0xc8>
	temp = sum / (READ_TIMES - 2 * LOST_VAL);
 80038e8:	8b7b      	ldrh	r3, [r7, #26]
 80038ea:	4a05      	ldr	r2, [pc, #20]	; (8003900 <TP_Read_XOY+0x100>)
 80038ec:	fba2 2303 	umull	r2, r3, r2, r3
 80038f0:	085b      	lsrs	r3, r3, #1
 80038f2:	833b      	strh	r3, [r7, #24]
	return temp;
 80038f4:	8b3b      	ldrh	r3, [r7, #24]
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3724      	adds	r7, #36	; 0x24
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd90      	pop	{r4, r7, pc}
 80038fe:	bf00      	nop
 8003900:	aaaaaaab 	.word	0xaaaaaaab

08003904 <TP_Read_XY>:
 * @parameters :x:Read x coordinate of the touch screen
								y:Read y coordinate of the touch screen
 * @retvalue   :0-fail,1-success
******************************************************************************/
uint8_t TP_Read_XY(uint16_t *x,uint16_t *y)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
	uint16_t xtemp,ytemp;
	xtemp = TP_Read_XOY(CMD_RDX);
 800390e:	4b0c      	ldr	r3, [pc, #48]	; (8003940 <TP_Read_XY+0x3c>)
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f7ff ff74 	bl	8003800 <TP_Read_XOY>
 8003918:	4603      	mov	r3, r0
 800391a:	81fb      	strh	r3, [r7, #14]
	ytemp = TP_Read_XOY(CMD_RDY);
 800391c:	4b09      	ldr	r3, [pc, #36]	; (8003944 <TP_Read_XY+0x40>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff ff6d 	bl	8003800 <TP_Read_XOY>
 8003926:	4603      	mov	r3, r0
 8003928:	81bb      	strh	r3, [r7, #12]

	*x = xtemp;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	89fa      	ldrh	r2, [r7, #14]
 800392e:	801a      	strh	r2, [r3, #0]
	*y = ytemp;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	89ba      	ldrh	r2, [r7, #12]
 8003934:	801a      	strh	r2, [r3, #0]
	return 1;
 8003936:	2301      	movs	r3, #1
}
 8003938:	4618      	mov	r0, r3
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	20000038 	.word	0x20000038
 8003944:	20000039 	.word	0x20000039

08003948 <TP_Read_XY2>:
 * @parameters :x:Read x coordinate of the touch screen
								y:Read y coordinate of the touch screen
 * @retvalue   :0-fail,1-success
******************************************************************************/
uint8_t TP_Read_XY2(uint16_t *x,uint16_t *y)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
	uint16_t x1,y1;
 	uint16_t x2,y2;
 	uint8_t flag;
    flag = TP_Read_XY(&x1 ,&y1);
 8003952:	f107 0212 	add.w	r2, r7, #18
 8003956:	f107 0314 	add.w	r3, r7, #20
 800395a:	4611      	mov	r1, r2
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff ffd1 	bl	8003904 <TP_Read_XY>
 8003962:	4603      	mov	r3, r0
 8003964:	75fb      	strb	r3, [r7, #23]
    if(flag == 0)
 8003966:	7dfb      	ldrb	r3, [r7, #23]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <TP_Read_XY2+0x28>
    	return(0);
 800396c:	2300      	movs	r3, #0
 800396e:	e04d      	b.n	8003a0c <TP_Read_XY2+0xc4>
    flag = TP_Read_XY(&x2, &y2);
 8003970:	f107 020e 	add.w	r2, r7, #14
 8003974:	f107 0310 	add.w	r3, r7, #16
 8003978:	4611      	mov	r1, r2
 800397a:	4618      	mov	r0, r3
 800397c:	f7ff ffc2 	bl	8003904 <TP_Read_XY>
 8003980:	4603      	mov	r3, r0
 8003982:	75fb      	strb	r3, [r7, #23]
    if(flag == 0)
 8003984:	7dfb      	ldrb	r3, [r7, #23]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <TP_Read_XY2+0x46>
    	return(0);
 800398a:	2300      	movs	r3, #0
 800398c:	e03e      	b.n	8003a0c <TP_Read_XY2+0xc4>
    if(((x2 <= x1 && x1 < x2 + ERR_RANGE) || (x1 <= x2 && x2 < x1 + ERR_RANGE))
 800398e:	8a3a      	ldrh	r2, [r7, #16]
 8003990:	8abb      	ldrh	r3, [r7, #20]
 8003992:	429a      	cmp	r2, r3
 8003994:	d805      	bhi.n	80039a2 <TP_Read_XY2+0x5a>
 8003996:	8abb      	ldrh	r3, [r7, #20]
 8003998:	461a      	mov	r2, r3
 800399a:	8a3b      	ldrh	r3, [r7, #16]
 800399c:	3332      	adds	r3, #50	; 0x32
 800399e:	429a      	cmp	r2, r3
 80039a0:	db09      	blt.n	80039b6 <TP_Read_XY2+0x6e>
 80039a2:	8aba      	ldrh	r2, [r7, #20]
 80039a4:	8a3b      	ldrh	r3, [r7, #16]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d82f      	bhi.n	8003a0a <TP_Read_XY2+0xc2>
 80039aa:	8a3b      	ldrh	r3, [r7, #16]
 80039ac:	461a      	mov	r2, r3
 80039ae:	8abb      	ldrh	r3, [r7, #20]
 80039b0:	3332      	adds	r3, #50	; 0x32
 80039b2:	429a      	cmp	r2, r3
 80039b4:	da29      	bge.n	8003a0a <TP_Read_XY2+0xc2>
    && ((y2 <= y1 && y1 < y2 + ERR_RANGE) || (y1 <= y2 && y2 < y1 + ERR_RANGE)))
 80039b6:	89fa      	ldrh	r2, [r7, #14]
 80039b8:	8a7b      	ldrh	r3, [r7, #18]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d805      	bhi.n	80039ca <TP_Read_XY2+0x82>
 80039be:	8a7b      	ldrh	r3, [r7, #18]
 80039c0:	461a      	mov	r2, r3
 80039c2:	89fb      	ldrh	r3, [r7, #14]
 80039c4:	3332      	adds	r3, #50	; 0x32
 80039c6:	429a      	cmp	r2, r3
 80039c8:	db09      	blt.n	80039de <TP_Read_XY2+0x96>
 80039ca:	8a7a      	ldrh	r2, [r7, #18]
 80039cc:	89fb      	ldrh	r3, [r7, #14]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d81b      	bhi.n	8003a0a <TP_Read_XY2+0xc2>
 80039d2:	89fb      	ldrh	r3, [r7, #14]
 80039d4:	461a      	mov	r2, r3
 80039d6:	8a7b      	ldrh	r3, [r7, #18]
 80039d8:	3332      	adds	r3, #50	; 0x32
 80039da:	429a      	cmp	r2, r3
 80039dc:	da15      	bge.n	8003a0a <TP_Read_XY2+0xc2>
    {
        *x = (x1 + x2) / 2;
 80039de:	8abb      	ldrh	r3, [r7, #20]
 80039e0:	461a      	mov	r2, r3
 80039e2:	8a3b      	ldrh	r3, [r7, #16]
 80039e4:	4413      	add	r3, r2
 80039e6:	0fda      	lsrs	r2, r3, #31
 80039e8:	4413      	add	r3, r2
 80039ea:	105b      	asrs	r3, r3, #1
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	801a      	strh	r2, [r3, #0]
        *y = (y1 + y2) / 2;
 80039f2:	8a7b      	ldrh	r3, [r7, #18]
 80039f4:	461a      	mov	r2, r3
 80039f6:	89fb      	ldrh	r3, [r7, #14]
 80039f8:	4413      	add	r3, r2
 80039fa:	0fda      	lsrs	r2, r3, #31
 80039fc:	4413      	add	r3, r2
 80039fe:	105b      	asrs	r3, r3, #1
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	801a      	strh	r2, [r3, #0]
        return 1;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e000      	b.n	8003a0c <TP_Read_XY2+0xc4>
    }
    else
    	return 0;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3718      	adds	r7, #24
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <TP_Scan>:
 * @retvalue   :Current touch screen status,
								0-no touch
								1-touch
******************************************************************************/
uint8_t TP_Scan(uint8_t tp)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	71fb      	strb	r3, [r7, #7]
	if(T_IRQ == 0)
 8003a1e:	2102      	movs	r1, #2
 8003a20:	483f      	ldr	r0, [pc, #252]	; (8003b20 <TP_Scan+0x10c>)
 8003a22:	f7fd f85d 	bl	8000ae0 <HAL_GPIO_ReadPin>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d155      	bne.n	8003ad8 <TP_Scan+0xc4>
	{
		if(tp)
 8003a2c:	79fb      	ldrb	r3, [r7, #7]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d004      	beq.n	8003a3c <TP_Scan+0x28>
			TP_Read_XY2(&tp_dev.x,&tp_dev.y);
 8003a32:	493c      	ldr	r1, [pc, #240]	; (8003b24 <TP_Scan+0x110>)
 8003a34:	483c      	ldr	r0, [pc, #240]	; (8003b28 <TP_Scan+0x114>)
 8003a36:	f7ff ff87 	bl	8003948 <TP_Read_XY2>
 8003a3a:	e03c      	b.n	8003ab6 <TP_Scan+0xa2>
		else if(TP_Read_XY2(&tp_dev.x,&tp_dev.y))
 8003a3c:	4939      	ldr	r1, [pc, #228]	; (8003b24 <TP_Scan+0x110>)
 8003a3e:	483a      	ldr	r0, [pc, #232]	; (8003b28 <TP_Scan+0x114>)
 8003a40:	f7ff ff82 	bl	8003948 <TP_Read_XY2>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d035      	beq.n	8003ab6 <TP_Scan+0xa2>
		{
	 		tp_dev.x = tp_dev.xfac * tp_dev.x + tp_dev.xoff;
 8003a4a:	4b38      	ldr	r3, [pc, #224]	; (8003b2c <TP_Scan+0x118>)
 8003a4c:	ed93 7a05 	vldr	s14, [r3, #20]
 8003a50:	4b36      	ldr	r3, [pc, #216]	; (8003b2c <TP_Scan+0x118>)
 8003a52:	899b      	ldrh	r3, [r3, #12]
 8003a54:	ee07 3a90 	vmov	s15, r3
 8003a58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a60:	4b32      	ldr	r3, [pc, #200]	; (8003b2c <TP_Scan+0x118>)
 8003a62:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8003a66:	ee07 3a90 	vmov	s15, r3
 8003a6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a76:	ee17 3a90 	vmov	r3, s15
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	4b2b      	ldr	r3, [pc, #172]	; (8003b2c <TP_Scan+0x118>)
 8003a7e:	819a      	strh	r2, [r3, #12]
			tp_dev.y = tp_dev.yfac * tp_dev.y + tp_dev.yoff;
 8003a80:	4b2a      	ldr	r3, [pc, #168]	; (8003b2c <TP_Scan+0x118>)
 8003a82:	ed93 7a06 	vldr	s14, [r3, #24]
 8003a86:	4b29      	ldr	r3, [pc, #164]	; (8003b2c <TP_Scan+0x118>)
 8003a88:	89db      	ldrh	r3, [r3, #14]
 8003a8a:	ee07 3a90 	vmov	s15, r3
 8003a8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a96:	4b25      	ldr	r3, [pc, #148]	; (8003b2c <TP_Scan+0x118>)
 8003a98:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8003a9c:	ee07 3a90 	vmov	s15, r3
 8003aa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003aa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003aa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003aac:	ee17 3a90 	vmov	r3, s15
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	4b1e      	ldr	r3, [pc, #120]	; (8003b2c <TP_Scan+0x118>)
 8003ab4:	81da      	strh	r2, [r3, #14]
	 	}
		if((tp_dev.sta & TP_PRES_DOWN) == 0)
 8003ab6:	4b1d      	ldr	r3, [pc, #116]	; (8003b2c <TP_Scan+0x118>)
 8003ab8:	7c1b      	ldrb	r3, [r3, #16]
 8003aba:	b25b      	sxtb	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	db26      	blt.n	8003b0e <TP_Scan+0xfa>
		{
			tp_dev.sta = TP_PRES_DOWN | TP_CATH_PRES;
 8003ac0:	4b1a      	ldr	r3, [pc, #104]	; (8003b2c <TP_Scan+0x118>)
 8003ac2:	22c0      	movs	r2, #192	; 0xc0
 8003ac4:	741a      	strb	r2, [r3, #16]
			tp_dev.x0 = tp_dev.x;
 8003ac6:	4b19      	ldr	r3, [pc, #100]	; (8003b2c <TP_Scan+0x118>)
 8003ac8:	899a      	ldrh	r2, [r3, #12]
 8003aca:	4b18      	ldr	r3, [pc, #96]	; (8003b2c <TP_Scan+0x118>)
 8003acc:	811a      	strh	r2, [r3, #8]
			tp_dev.y0 = tp_dev.y;
 8003ace:	4b17      	ldr	r3, [pc, #92]	; (8003b2c <TP_Scan+0x118>)
 8003ad0:	89da      	ldrh	r2, [r3, #14]
 8003ad2:	4b16      	ldr	r3, [pc, #88]	; (8003b2c <TP_Scan+0x118>)
 8003ad4:	815a      	strh	r2, [r3, #10]
 8003ad6:	e01a      	b.n	8003b0e <TP_Scan+0xfa>
		}
	}
	else
	{
		if(tp_dev.sta & TP_PRES_DOWN)
 8003ad8:	4b14      	ldr	r3, [pc, #80]	; (8003b2c <TP_Scan+0x118>)
 8003ada:	7c1b      	ldrb	r3, [r3, #16]
 8003adc:	b25b      	sxtb	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	da07      	bge.n	8003af2 <TP_Scan+0xde>
		{
			tp_dev.sta&=~(1<<7);
 8003ae2:	4b12      	ldr	r3, [pc, #72]	; (8003b2c <TP_Scan+0x118>)
 8003ae4:	7c1b      	ldrb	r3, [r3, #16]
 8003ae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003aea:	b2da      	uxtb	r2, r3
 8003aec:	4b0f      	ldr	r3, [pc, #60]	; (8003b2c <TP_Scan+0x118>)
 8003aee:	741a      	strb	r2, [r3, #16]
 8003af0:	e00d      	b.n	8003b0e <TP_Scan+0xfa>
		}
		else
		{
			tp_dev.x0 	= 0;
 8003af2:	4b0e      	ldr	r3, [pc, #56]	; (8003b2c <TP_Scan+0x118>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	811a      	strh	r2, [r3, #8]
			tp_dev.y0 	= 0;
 8003af8:	4b0c      	ldr	r3, [pc, #48]	; (8003b2c <TP_Scan+0x118>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	815a      	strh	r2, [r3, #10]
			tp_dev.x  	= 0xffff;
 8003afe:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <TP_Scan+0x118>)
 8003b00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b04:	819a      	strh	r2, [r3, #12]
			tp_dev.y 	= 0xffff;
 8003b06:	4b09      	ldr	r3, [pc, #36]	; (8003b2c <TP_Scan+0x118>)
 8003b08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b0c:	81da      	strh	r2, [r3, #14]
		}
	}
	return tp_dev.sta & TP_PRES_DOWN;
 8003b0e:	4b07      	ldr	r3, [pc, #28]	; (8003b2c <TP_Scan+0x118>)
 8003b10:	7c1b      	ldrb	r3, [r3, #16]
 8003b12:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003b16:	b2db      	uxtb	r3, r3
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3708      	adds	r7, #8
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	48000400 	.word	0x48000400
 8003b24:	20000022 	.word	0x20000022
 8003b28:	20000020 	.word	0x20000020
 8003b2c:	20000014 	.word	0x20000014

08003b30 <TP_Init>:
 * @parameters :None
 * @retvalue   :0-no calibration
								1-Has been calibrated
******************************************************************************/
uint8_t TP_Init(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin 	= T_IRQ_Pin | T_DO_Pin;
 8003b36:	2306      	movs	r3, #6
 8003b38:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode 	= GPIO_MODE_INPUT;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed 	= GPIO_SPEED_FREQ_LOW;
 8003b42:	2300      	movs	r3, #0
 8003b44:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b46:	1d3b      	adds	r3, r7, #4
 8003b48:	4619      	mov	r1, r3
 8003b4a:	4811      	ldr	r0, [pc, #68]	; (8003b90 <TP_Init+0x60>)
 8003b4c:	f7fc fe4e 	bl	80007ec <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	= T_CLK_Pin;
 8003b50:	2301      	movs	r3, #1
 8003b52:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8003b54:	2301      	movs	r3, #1
 8003b56:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed 	= GPIO_SPEED_FREQ_LOW;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b60:	1d3b      	adds	r3, r7, #4
 8003b62:	4619      	mov	r1, r3
 8003b64:	480a      	ldr	r0, [pc, #40]	; (8003b90 <TP_Init+0x60>)
 8003b66:	f7fc fe41 	bl	80007ec <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	= T_DIN_Pin | T_CS_Pin;
 8003b6a:	2330      	movs	r3, #48	; 0x30
 8003b6c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8003b72:	2300      	movs	r3, #0
 8003b74:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed 	= GPIO_SPEED_FREQ_LOW;
 8003b76:	2300      	movs	r3, #0
 8003b78:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b7a:	1d3b      	adds	r3, r7, #4
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	4805      	ldr	r0, [pc, #20]	; (8003b94 <TP_Init+0x64>)
 8003b80:	f7fc fe34 	bl	80007ec <HAL_GPIO_Init>

	return 1;
 8003b84:	2301      	movs	r3, #1
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	48000400 	.word	0x48000400
 8003b94:	48000800 	.word	0x48000800

08003b98 <__libc_init_array>:
 8003b98:	b570      	push	{r4, r5, r6, lr}
 8003b9a:	4e0d      	ldr	r6, [pc, #52]	; (8003bd0 <__libc_init_array+0x38>)
 8003b9c:	4c0d      	ldr	r4, [pc, #52]	; (8003bd4 <__libc_init_array+0x3c>)
 8003b9e:	1ba4      	subs	r4, r4, r6
 8003ba0:	10a4      	asrs	r4, r4, #2
 8003ba2:	2500      	movs	r5, #0
 8003ba4:	42a5      	cmp	r5, r4
 8003ba6:	d109      	bne.n	8003bbc <__libc_init_array+0x24>
 8003ba8:	4e0b      	ldr	r6, [pc, #44]	; (8003bd8 <__libc_init_array+0x40>)
 8003baa:	4c0c      	ldr	r4, [pc, #48]	; (8003bdc <__libc_init_array+0x44>)
 8003bac:	f000 f820 	bl	8003bf0 <_init>
 8003bb0:	1ba4      	subs	r4, r4, r6
 8003bb2:	10a4      	asrs	r4, r4, #2
 8003bb4:	2500      	movs	r5, #0
 8003bb6:	42a5      	cmp	r5, r4
 8003bb8:	d105      	bne.n	8003bc6 <__libc_init_array+0x2e>
 8003bba:	bd70      	pop	{r4, r5, r6, pc}
 8003bbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003bc0:	4798      	blx	r3
 8003bc2:	3501      	adds	r5, #1
 8003bc4:	e7ee      	b.n	8003ba4 <__libc_init_array+0xc>
 8003bc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003bca:	4798      	blx	r3
 8003bcc:	3501      	adds	r5, #1
 8003bce:	e7f2      	b.n	8003bb6 <__libc_init_array+0x1e>
 8003bd0:	0803b3a8 	.word	0x0803b3a8
 8003bd4:	0803b3a8 	.word	0x0803b3a8
 8003bd8:	0803b3a8 	.word	0x0803b3a8
 8003bdc:	0803b3ac 	.word	0x0803b3ac

08003be0 <memset>:
 8003be0:	4402      	add	r2, r0
 8003be2:	4603      	mov	r3, r0
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d100      	bne.n	8003bea <memset+0xa>
 8003be8:	4770      	bx	lr
 8003bea:	f803 1b01 	strb.w	r1, [r3], #1
 8003bee:	e7f9      	b.n	8003be4 <memset+0x4>

08003bf0 <_init>:
 8003bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bf2:	bf00      	nop
 8003bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bf6:	bc08      	pop	{r3}
 8003bf8:	469e      	mov	lr, r3
 8003bfa:	4770      	bx	lr

08003bfc <_fini>:
 8003bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bfe:	bf00      	nop
 8003c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c02:	bc08      	pop	{r3}
 8003c04:	469e      	mov	lr, r3
 8003c06:	4770      	bx	lr
