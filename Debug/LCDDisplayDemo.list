
LCDDisplayDemo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003658  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00037770  080037e0  080037e0  000137e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803af50  0803af50  0005003c  2**0
                  CONTENTS
  4 .ARM          00000000  0803af50  0803af50  0005003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0803af50  0803af50  0005003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803af50  0803af50  0004af50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803af54  0803af54  0004af54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  0803af58  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000003c  0803af94  0005003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  0803af94  0005012c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0005003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a02e  00000000  00000000  0005006c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001867  00000000  00000000  0005a09a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000730  00000000  00000000  0005b908  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000668  00000000  00000000  0005c038  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019bde  00000000  00000000  0005c6a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000074f7  00000000  00000000  0007627e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009115c  00000000  00000000  0007d775  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010e8d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b84  00000000  00000000  0010e94c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000003c 	.word	0x2000003c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080037c8 	.word	0x080037c8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000040 	.word	0x20000040
 80001c4:	080037c8 	.word	0x080037c8

080001c8 <Display_Round_Icon_40x40>:
#include "captain.h"
#include "spiderman.h"
#include "transistor.h"

void Display_Round_Icon_40x40(const unsigned int icon[], unsigned int x0, unsigned int y0, unsigned int r)
{
 80001c8:	b590      	push	{r4, r7, lr}
 80001ca:	b089      	sub	sp, #36	; 0x24
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	607a      	str	r2, [r7, #4]
 80001d4:	603b      	str	r3, [r7, #0]
	uint64_t k = 0;
 80001d6:	f04f 0300 	mov.w	r3, #0
 80001da:	f04f 0400 	mov.w	r4, #0
 80001de:	e9c7 3406 	strd	r3, r4, [r7, #24]

//    ILI9341_Draw_Circle(x0, y0, r, BLUE, 1);

	for(uint32_t j = y0 - 19; j < y0 + 21; j++)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	3b13      	subs	r3, #19
 80001e6:	617b      	str	r3, [r7, #20]
 80001e8:	e01f      	b.n	800022a <Display_Round_Icon_40x40+0x62>
	{
		for(uint32_t i = x0 -19; i < x0 + 21; i++)
 80001ea:	68bb      	ldr	r3, [r7, #8]
 80001ec:	3b13      	subs	r3, #19
 80001ee:	613b      	str	r3, [r7, #16]
 80001f0:	e013      	b.n	800021a <Display_Round_Icon_40x40+0x52>
		{
				ILI9341_Draw_Pixel(i, j, icon[k]);
 80001f2:	6938      	ldr	r0, [r7, #16]
 80001f4:	6979      	ldr	r1, [r7, #20]
 80001f6:	69bb      	ldr	r3, [r7, #24]
 80001f8:	009b      	lsls	r3, r3, #2
 80001fa:	68fa      	ldr	r2, [r7, #12]
 80001fc:	4413      	add	r3, r2
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	461a      	mov	r2, r3
 8000202:	f002 fac1 	bl	8002788 <ILI9341_Draw_Pixel>
				k++;
 8000206:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800020a:	1c59      	adds	r1, r3, #1
 800020c:	f144 0200 	adc.w	r2, r4, #0
 8000210:	e9c7 1206 	strd	r1, r2, [r7, #24]
		for(uint32_t i = x0 -19; i < x0 + 21; i++)
 8000214:	693b      	ldr	r3, [r7, #16]
 8000216:	3301      	adds	r3, #1
 8000218:	613b      	str	r3, [r7, #16]
 800021a:	68bb      	ldr	r3, [r7, #8]
 800021c:	3315      	adds	r3, #21
 800021e:	693a      	ldr	r2, [r7, #16]
 8000220:	429a      	cmp	r2, r3
 8000222:	d3e6      	bcc.n	80001f2 <Display_Round_Icon_40x40+0x2a>
	for(uint32_t j = y0 - 19; j < y0 + 21; j++)
 8000224:	697b      	ldr	r3, [r7, #20]
 8000226:	3301      	adds	r3, #1
 8000228:	617b      	str	r3, [r7, #20]
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	3315      	adds	r3, #21
 800022e:	697a      	ldr	r2, [r7, #20]
 8000230:	429a      	cmp	r2, r3
 8000232:	d3da      	bcc.n	80001ea <Display_Round_Icon_40x40+0x22>
		}
	}
}
 8000234:	bf00      	nop
 8000236:	3724      	adds	r7, #36	; 0x24
 8000238:	46bd      	mov	sp, r7
 800023a:	bd90      	pop	{r4, r7, pc}

0800023c <Display_Square_Icon_40x40>:

void Display_Square_Icon_40x40(const unsigned int icon[], unsigned int x0, unsigned int y0)
{
 800023c:	b590      	push	{r4, r7, lr}
 800023e:	b089      	sub	sp, #36	; 0x24
 8000240:	af00      	add	r7, sp, #0
 8000242:	60f8      	str	r0, [r7, #12]
 8000244:	60b9      	str	r1, [r7, #8]
 8000246:	607a      	str	r2, [r7, #4]
	uint64_t k = 0;
 8000248:	f04f 0300 	mov.w	r3, #0
 800024c:	f04f 0400 	mov.w	r4, #0
 8000250:	e9c7 3406 	strd	r3, r4, [r7, #24]

	for(uint32_t j = y0; j < y0 + 40; j++)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	617b      	str	r3, [r7, #20]
 8000258:	e01e      	b.n	8000298 <Display_Square_Icon_40x40+0x5c>
	{
		for(uint32_t i = x0; i < x0 + 40; i++)
 800025a:	68bb      	ldr	r3, [r7, #8]
 800025c:	613b      	str	r3, [r7, #16]
 800025e:	e013      	b.n	8000288 <Display_Square_Icon_40x40+0x4c>
		{
				ILI9341_Draw_Pixel(i, j, icon[k]);
 8000260:	6938      	ldr	r0, [r7, #16]
 8000262:	6979      	ldr	r1, [r7, #20]
 8000264:	69bb      	ldr	r3, [r7, #24]
 8000266:	009b      	lsls	r3, r3, #2
 8000268:	68fa      	ldr	r2, [r7, #12]
 800026a:	4413      	add	r3, r2
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	461a      	mov	r2, r3
 8000270:	f002 fa8a 	bl	8002788 <ILI9341_Draw_Pixel>
				k++;
 8000274:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8000278:	1c59      	adds	r1, r3, #1
 800027a:	f144 0200 	adc.w	r2, r4, #0
 800027e:	e9c7 1206 	strd	r1, r2, [r7, #24]
		for(uint32_t i = x0; i < x0 + 40; i++)
 8000282:	693b      	ldr	r3, [r7, #16]
 8000284:	3301      	adds	r3, #1
 8000286:	613b      	str	r3, [r7, #16]
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	3328      	adds	r3, #40	; 0x28
 800028c:	693a      	ldr	r2, [r7, #16]
 800028e:	429a      	cmp	r2, r3
 8000290:	d3e6      	bcc.n	8000260 <Display_Square_Icon_40x40+0x24>
	for(uint32_t j = y0; j < y0 + 40; j++)
 8000292:	697b      	ldr	r3, [r7, #20]
 8000294:	3301      	adds	r3, #1
 8000296:	617b      	str	r3, [r7, #20]
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	3328      	adds	r3, #40	; 0x28
 800029c:	697a      	ldr	r2, [r7, #20]
 800029e:	429a      	cmp	r2, r3
 80002a0:	d3db      	bcc.n	800025a <Display_Square_Icon_40x40+0x1e>
		}
	}
}
 80002a2:	bf00      	nop
 80002a4:	3724      	adds	r7, #36	; 0x24
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd90      	pop	{r4, r7, pc}
	...

080002ac <Display_Menu>:

void Display_Menu()
{
 80002ac:	b590      	push	{r4, r7, lr}
 80002ae:	b087      	sub	sp, #28
 80002b0:	af02      	add	r7, sp, #8
	/* Refresh the screen to black background */
	ILI9341_Set_Rotation(3);
 80002b2:	2003      	movs	r0, #3
 80002b4:	f002 f99e 	bl	80025f4 <ILI9341_Set_Rotation>
	ILI9341_Fill_Screen(BLUE);
 80002b8:	201f      	movs	r0, #31
 80002ba:	f002 fa41 	bl	8002740 <ILI9341_Fill_Screen>
	HAL_Delay(500);
 80002be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002c2:	f000 f96d 	bl	80005a0 <HAL_Delay>

	/* Counting through all the bytes of those icons */
	uint64_t k = 0;
 80002c6:	f04f 0300 	mov.w	r3, #0
 80002ca:	f04f 0400 	mov.w	r4, #0
 80002ce:	e9c7 3402 	strd	r3, r4, [r7, #8]
	/* Draw border for the menu */
    ILI9341_Draw_Empty_Rectangle(GREEN, 10, 30, 310, 230);
 80002d2:	23e6      	movs	r3, #230	; 0xe6
 80002d4:	9300      	str	r3, [sp, #0]
 80002d6:	f44f 739b 	mov.w	r3, #310	; 0x136
 80002da:	221e      	movs	r2, #30
 80002dc:	210a      	movs	r1, #10
 80002de:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80002e2:	f002 fa95 	bl	8002810 <ILI9341_Draw_Empty_Rectangle>
//    ILI9341_Draw_Empty_Rectangle(BLUE, 15, 35, 305, 225);

    /* Write something */
	ILI9341_Draw_String(10,10,WHITE,BLUE,"It's a good day!",2);
 80002e6:	2302      	movs	r3, #2
 80002e8:	9301      	str	r3, [sp, #4]
 80002ea:	4b2e      	ldr	r3, [pc, #184]	; (80003a4 <Display_Menu+0xf8>)
 80002ec:	9300      	str	r3, [sp, #0]
 80002ee:	231f      	movs	r3, #31
 80002f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002f4:	210a      	movs	r1, #10
 80002f6:	200a      	movs	r0, #10
 80002f8:	f002 fb36 	bl	8002968 <ILI9341_Draw_String>

	/* Battery Icon in the top right corner */
    for(uint32_t j = 10; j < 20; j++) {
 80002fc:	230a      	movs	r3, #10
 80002fe:	607b      	str	r3, [r7, #4]
 8000300:	e01d      	b.n	800033e <Display_Menu+0x92>
    	for(uint32_t i = 280; i < 300; i++) {
 8000302:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000306:	603b      	str	r3, [r7, #0]
 8000308:	e012      	b.n	8000330 <Display_Menu+0x84>
				ILI9341_Draw_Pixel(i, j, battery_icon[k]);
 800030a:	6838      	ldr	r0, [r7, #0]
 800030c:	6879      	ldr	r1, [r7, #4]
 800030e:	4a26      	ldr	r2, [pc, #152]	; (80003a8 <Display_Menu+0xfc>)
 8000310:	68bb      	ldr	r3, [r7, #8]
 8000312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000316:	461a      	mov	r2, r3
 8000318:	f002 fa36 	bl	8002788 <ILI9341_Draw_Pixel>
				k++;
 800031c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000320:	1c59      	adds	r1, r3, #1
 8000322:	f144 0200 	adc.w	r2, r4, #0
 8000326:	e9c7 1202 	strd	r1, r2, [r7, #8]
    	for(uint32_t i = 280; i < 300; i++) {
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	3301      	adds	r3, #1
 800032e:	603b      	str	r3, [r7, #0]
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000336:	d3e8      	bcc.n	800030a <Display_Menu+0x5e>
    for(uint32_t j = 10; j < 20; j++) {
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	3301      	adds	r3, #1
 800033c:	607b      	str	r3, [r7, #4]
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	2b13      	cmp	r3, #19
 8000342:	d9de      	bls.n	8000302 <Display_Menu+0x56>
	}

    /* =================================List of Icons================================= */

    /* ===========================Icon No.1=========================== */
    Display_Round_Icon_40x40(home_icon_40x40, 59, 79, 40);
 8000344:	2328      	movs	r3, #40	; 0x28
 8000346:	224f      	movs	r2, #79	; 0x4f
 8000348:	213b      	movs	r1, #59	; 0x3b
 800034a:	4818      	ldr	r0, [pc, #96]	; (80003ac <Display_Menu+0x100>)
 800034c:	f7ff ff3c 	bl	80001c8 <Display_Round_Icon_40x40>

    /* ===========================Icon No.2=========================== */
    Display_Round_Icon_40x40(music_icon_40x40, 159, 79, 40);
 8000350:	2328      	movs	r3, #40	; 0x28
 8000352:	224f      	movs	r2, #79	; 0x4f
 8000354:	219f      	movs	r1, #159	; 0x9f
 8000356:	4816      	ldr	r0, [pc, #88]	; (80003b0 <Display_Menu+0x104>)
 8000358:	f7ff ff36 	bl	80001c8 <Display_Round_Icon_40x40>

    /* ===========================Icon No.3=========================== */
    Display_Round_Icon_40x40(note_icon_40x40, 259, 79, 40);
 800035c:	2328      	movs	r3, #40	; 0x28
 800035e:	224f      	movs	r2, #79	; 0x4f
 8000360:	f240 1103 	movw	r1, #259	; 0x103
 8000364:	4813      	ldr	r0, [pc, #76]	; (80003b4 <Display_Menu+0x108>)
 8000366:	f7ff ff2f 	bl	80001c8 <Display_Round_Icon_40x40>

    /* ===========================Icon No.4=========================== */
    Display_Round_Icon_40x40(game_icon_40x40, 59, 179, 40);
 800036a:	2328      	movs	r3, #40	; 0x28
 800036c:	22b3      	movs	r2, #179	; 0xb3
 800036e:	213b      	movs	r1, #59	; 0x3b
 8000370:	4811      	ldr	r0, [pc, #68]	; (80003b8 <Display_Menu+0x10c>)
 8000372:	f7ff ff29 	bl	80001c8 <Display_Round_Icon_40x40>

    /* ===========================Icon No.5=========================== */
    Display_Round_Icon_40x40(facebook_icon_40x40, 159, 179, 40);
 8000376:	2328      	movs	r3, #40	; 0x28
 8000378:	22b3      	movs	r2, #179	; 0xb3
 800037a:	219f      	movs	r1, #159	; 0x9f
 800037c:	480f      	ldr	r0, [pc, #60]	; (80003bc <Display_Menu+0x110>)
 800037e:	f7ff ff23 	bl	80001c8 <Display_Round_Icon_40x40>

    /* ===========================Icon No.6=========================== */
    Display_Round_Icon_40x40(image_icon_40x40, 259, 179, 40);
 8000382:	2328      	movs	r3, #40	; 0x28
 8000384:	22b3      	movs	r2, #179	; 0xb3
 8000386:	f240 1103 	movw	r1, #259	; 0x103
 800038a:	480d      	ldr	r0, [pc, #52]	; (80003c0 <Display_Menu+0x114>)
 800038c:	f7ff ff1c 	bl	80001c8 <Display_Round_Icon_40x40>

	CS_OFF;
 8000390:	2201      	movs	r2, #1
 8000392:	2104      	movs	r1, #4
 8000394:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000398:	f000 fb9c 	bl	8000ad4 <HAL_GPIO_WritePin>
}
 800039c:	bf00      	nop
 800039e:	3714      	adds	r7, #20
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd90      	pop	{r4, r7, pc}
 80003a4:	080037e0 	.word	0x080037e0
 80003a8:	08003838 	.word	0x08003838
 80003ac:	08003b58 	.word	0x08003b58
 80003b0:	08005458 	.word	0x08005458
 80003b4:	08006d58 	.word	0x08006d58
 80003b8:	08008658 	.word	0x08008658
 80003bc:	08009f58 	.word	0x08009f58
 80003c0:	0800b858 	.word	0x0800b858

080003c4 <Display_Text>:

	Display_Square_Icon_40x40(back_icon_40x40, 0, 200);
}

void Display_Text()
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af02      	add	r7, sp, #8
	/* Refresh the screen to black background */
	ILI9341_Fill_Screen(BLACK);
 80003ca:	2000      	movs	r0, #0
 80003cc:	f002 f9b8 	bl	8002740 <ILI9341_Fill_Screen>
	HAL_Delay(500);
 80003d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003d4:	f000 f8e4 	bl	80005a0 <HAL_Delay>

	/* Draw border for the menu */
    ILI9341_Draw_Empty_Rectangle(YELLOW, 10, 30, 310, 230);
 80003d8:	23e6      	movs	r3, #230	; 0xe6
 80003da:	9300      	str	r3, [sp, #0]
 80003dc:	f44f 739b 	mov.w	r3, #310	; 0x136
 80003e0:	221e      	movs	r2, #30
 80003e2:	210a      	movs	r1, #10
 80003e4:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80003e8:	f002 fa12 	bl	8002810 <ILI9341_Draw_Empty_Rectangle>

    /* Write something */
	ILI9341_Draw_String(20, 40, WHITE, BLACK, "Hello User!", 2);
 80003ec:	2302      	movs	r3, #2
 80003ee:	9301      	str	r3, [sp, #4]
 80003f0:	4b13      	ldr	r3, [pc, #76]	; (8000440 <Display_Text+0x7c>)
 80003f2:	9300      	str	r3, [sp, #0]
 80003f4:	2300      	movs	r3, #0
 80003f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003fa:	2128      	movs	r1, #40	; 0x28
 80003fc:	2014      	movs	r0, #20
 80003fe:	f002 fab3 	bl	8002968 <ILI9341_Draw_String>

	ILI9341_Draw_String(20, 60, WHITE, BLACK, "This is the test for TFT LCD!", 2);
 8000402:	2302      	movs	r3, #2
 8000404:	9301      	str	r3, [sp, #4]
 8000406:	4b0f      	ldr	r3, [pc, #60]	; (8000444 <Display_Text+0x80>)
 8000408:	9300      	str	r3, [sp, #0]
 800040a:	2300      	movs	r3, #0
 800040c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000410:	213c      	movs	r1, #60	; 0x3c
 8000412:	2014      	movs	r0, #20
 8000414:	f002 faa8 	bl	8002968 <ILI9341_Draw_String>

	ILI9341_Draw_String(20, 80, WHITE, BLACK, "What will you do today?", 2);
 8000418:	2302      	movs	r3, #2
 800041a:	9301      	str	r3, [sp, #4]
 800041c:	4b0a      	ldr	r3, [pc, #40]	; (8000448 <Display_Text+0x84>)
 800041e:	9300      	str	r3, [sp, #0]
 8000420:	2300      	movs	r3, #0
 8000422:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000426:	2150      	movs	r1, #80	; 0x50
 8000428:	2014      	movs	r0, #20
 800042a:	f002 fa9d 	bl	8002968 <ILI9341_Draw_String>

	Display_Square_Icon_40x40(back_icon_40x40, 0, 200);
 800042e:	22c8      	movs	r2, #200	; 0xc8
 8000430:	2100      	movs	r1, #0
 8000432:	4806      	ldr	r0, [pc, #24]	; (800044c <Display_Text+0x88>)
 8000434:	f7ff ff02 	bl	800023c <Display_Square_Icon_40x40>
}
 8000438:	bf00      	nop
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	080037f4 	.word	0x080037f4
 8000444:	08003800 	.word	0x08003800
 8000448:	08003820 	.word	0x08003820
 800044c:	0800d158 	.word	0x0800d158

08000450 <Display_Color_Picture>:
//int pictureCounter = 0;
//int pictureSelection = 0;
//int maxPictures = 4;

void Display_Color_Picture()
{
 8000450:	b590      	push	{r4, r7, lr}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0

	/* Select image to display */
//	int pictureSelection = rand() % 4;
//	pictureSelection = pictureCounter++ % maxPictures;

	for (uint16_t i = 0; i < 280; i++)
 8000456:	2300      	movs	r3, #0
 8000458:	80fb      	strh	r3, [r7, #6]
 800045a:	e029      	b.n	80004b0 <Display_Color_Picture+0x60>
	{
		for (uint16_t j = 0; j < 320; j++)
 800045c:	2300      	movs	r3, #0
 800045e:	80bb      	strh	r3, [r7, #4]
 8000460:	e01f      	b.n	80004a2 <Display_Color_Picture+0x52>
		{

//			if(pictureSelection == 0) {
				ILI9341_Draw_Double_Pixel(j, i, spiderman[(640 * i) + j * 2], spiderman[(640 * i) + j * 2 + 1]);
 8000462:	88b8      	ldrh	r0, [r7, #4]
 8000464:	88f9      	ldrh	r1, [r7, #6]
 8000466:	88fa      	ldrh	r2, [r7, #6]
 8000468:	4613      	mov	r3, r2
 800046a:	009b      	lsls	r3, r3, #2
 800046c:	4413      	add	r3, r2
 800046e:	019b      	lsls	r3, r3, #6
 8000470:	461a      	mov	r2, r3
 8000472:	88bb      	ldrh	r3, [r7, #4]
 8000474:	4413      	add	r3, r2
 8000476:	005b      	lsls	r3, r3, #1
 8000478:	4a14      	ldr	r2, [pc, #80]	; (80004cc <Display_Color_Picture+0x7c>)
 800047a:	5cd3      	ldrb	r3, [r2, r3]
 800047c:	461c      	mov	r4, r3
 800047e:	88fa      	ldrh	r2, [r7, #6]
 8000480:	4613      	mov	r3, r2
 8000482:	009b      	lsls	r3, r3, #2
 8000484:	4413      	add	r3, r2
 8000486:	019b      	lsls	r3, r3, #6
 8000488:	461a      	mov	r2, r3
 800048a:	88bb      	ldrh	r3, [r7, #4]
 800048c:	4413      	add	r3, r2
 800048e:	005b      	lsls	r3, r3, #1
 8000490:	3301      	adds	r3, #1
 8000492:	4a0e      	ldr	r2, [pc, #56]	; (80004cc <Display_Color_Picture+0x7c>)
 8000494:	5cd3      	ldrb	r3, [r2, r3]
 8000496:	4622      	mov	r2, r4
 8000498:	f002 fbb4 	bl	8002c04 <ILI9341_Draw_Double_Pixel>
		for (uint16_t j = 0; j < 320; j++)
 800049c:	88bb      	ldrh	r3, [r7, #4]
 800049e:	3301      	adds	r3, #1
 80004a0:	80bb      	strh	r3, [r7, #4]
 80004a2:	88bb      	ldrh	r3, [r7, #4]
 80004a4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80004a8:	d3db      	bcc.n	8000462 <Display_Color_Picture+0x12>
	for (uint16_t i = 0; i < 280; i++)
 80004aa:	88fb      	ldrh	r3, [r7, #6]
 80004ac:	3301      	adds	r3, #1
 80004ae:	80fb      	strh	r3, [r7, #6]
 80004b0:	88fb      	ldrh	r3, [r7, #6]
 80004b2:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 80004b6:	d3d1      	bcc.n	800045c <Display_Color_Picture+0xc>
//				ILI9341_Draw_Double_Pixel(j, i, transistor[(640 * i) + j * 2], transistor[(640 * i) + j * 2 + 1]);
//			}
		}
	}

	Display_Square_Icon_40x40(back_icon_40x40, 0, 200);
 80004b8:	22c8      	movs	r2, #200	; 0xc8
 80004ba:	2100      	movs	r1, #0
 80004bc:	4804      	ldr	r0, [pc, #16]	; (80004d0 <Display_Color_Picture+0x80>)
 80004be:	f7ff febd 	bl	800023c <Display_Square_Icon_40x40>
}
 80004c2:	bf00      	nop
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd90      	pop	{r4, r7, pc}
 80004ca:	bf00      	nop
 80004cc:	0800ea58 	.word	0x0800ea58
 80004d0:	0800d158 	.word	0x0800d158

080004d4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004d8:	4b08      	ldr	r3, [pc, #32]	; (80004fc <HAL_Init+0x28>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a07      	ldr	r2, [pc, #28]	; (80004fc <HAL_Init+0x28>)
 80004de:	f043 0310 	orr.w	r3, r3, #16
 80004e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004e4:	2003      	movs	r0, #3
 80004e6:	f000 f92f 	bl	8000748 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004ea:	2000      	movs	r0, #0
 80004ec:	f000 f808 	bl	8000500 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004f0:	f002 fdfe 	bl	80030f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004f4:	2300      	movs	r3, #0
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	40022000 	.word	0x40022000

08000500 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000508:	4b12      	ldr	r3, [pc, #72]	; (8000554 <HAL_InitTick+0x54>)
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	4b12      	ldr	r3, [pc, #72]	; (8000558 <HAL_InitTick+0x58>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	4619      	mov	r1, r3
 8000512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000516:	fbb3 f3f1 	udiv	r3, r3, r1
 800051a:	fbb2 f3f3 	udiv	r3, r2, r3
 800051e:	4618      	mov	r0, r3
 8000520:	f000 f939 	bl	8000796 <HAL_SYSTICK_Config>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800052a:	2301      	movs	r3, #1
 800052c:	e00e      	b.n	800054c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	2b0f      	cmp	r3, #15
 8000532:	d80a      	bhi.n	800054a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000534:	2200      	movs	r2, #0
 8000536:	6879      	ldr	r1, [r7, #4]
 8000538:	f04f 30ff 	mov.w	r0, #4294967295
 800053c:	f000 f90f 	bl	800075e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000540:	4a06      	ldr	r2, [pc, #24]	; (800055c <HAL_InitTick+0x5c>)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000546:	2300      	movs	r3, #0
 8000548:	e000      	b.n	800054c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800054a:	2301      	movs	r3, #1
}
 800054c:	4618      	mov	r0, r3
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	20000010 	.word	0x20000010
 8000558:	20000004 	.word	0x20000004
 800055c:	20000000 	.word	0x20000000

08000560 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <HAL_IncTick+0x20>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	461a      	mov	r2, r3
 800056a:	4b06      	ldr	r3, [pc, #24]	; (8000584 <HAL_IncTick+0x24>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4413      	add	r3, r2
 8000570:	4a04      	ldr	r2, [pc, #16]	; (8000584 <HAL_IncTick+0x24>)
 8000572:	6013      	str	r3, [r2, #0]
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	20000004 	.word	0x20000004
 8000584:	200000c0 	.word	0x200000c0

08000588 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  return uwTick;  
 800058c:	4b03      	ldr	r3, [pc, #12]	; (800059c <HAL_GetTick+0x14>)
 800058e:	681b      	ldr	r3, [r3, #0]
}
 8000590:	4618      	mov	r0, r3
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	200000c0 	.word	0x200000c0

080005a0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005a8:	f7ff ffee 	bl	8000588 <HAL_GetTick>
 80005ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005b8:	d005      	beq.n	80005c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005ba:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <HAL_Delay+0x40>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	461a      	mov	r2, r3
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	4413      	add	r3, r2
 80005c4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80005c6:	bf00      	nop
 80005c8:	f7ff ffde 	bl	8000588 <HAL_GetTick>
 80005cc:	4602      	mov	r2, r0
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	1ad3      	subs	r3, r2, r3
 80005d2:	68fa      	ldr	r2, [r7, #12]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d8f7      	bhi.n	80005c8 <HAL_Delay+0x28>
  {
  }
}
 80005d8:	bf00      	nop
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000004 	.word	0x20000004

080005e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	f003 0307 	and.w	r3, r3, #7
 80005f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <__NVIC_SetPriorityGrouping+0x44>)
 80005f6:	68db      	ldr	r3, [r3, #12]
 80005f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005fa:	68ba      	ldr	r2, [r7, #8]
 80005fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000600:	4013      	ands	r3, r2
 8000602:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800060c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000614:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000616:	4a04      	ldr	r2, [pc, #16]	; (8000628 <__NVIC_SetPriorityGrouping+0x44>)
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	60d3      	str	r3, [r2, #12]
}
 800061c:	bf00      	nop
 800061e:	3714      	adds	r7, #20
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000630:	4b04      	ldr	r3, [pc, #16]	; (8000644 <__NVIC_GetPriorityGrouping+0x18>)
 8000632:	68db      	ldr	r3, [r3, #12]
 8000634:	0a1b      	lsrs	r3, r3, #8
 8000636:	f003 0307 	and.w	r3, r3, #7
}
 800063a:	4618      	mov	r0, r3
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	e000ed00 	.word	0xe000ed00

08000648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	6039      	str	r1, [r7, #0]
 8000652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000658:	2b00      	cmp	r3, #0
 800065a:	db0a      	blt.n	8000672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	b2da      	uxtb	r2, r3
 8000660:	490c      	ldr	r1, [pc, #48]	; (8000694 <__NVIC_SetPriority+0x4c>)
 8000662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000666:	0112      	lsls	r2, r2, #4
 8000668:	b2d2      	uxtb	r2, r2
 800066a:	440b      	add	r3, r1
 800066c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000670:	e00a      	b.n	8000688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	b2da      	uxtb	r2, r3
 8000676:	4908      	ldr	r1, [pc, #32]	; (8000698 <__NVIC_SetPriority+0x50>)
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	f003 030f 	and.w	r3, r3, #15
 800067e:	3b04      	subs	r3, #4
 8000680:	0112      	lsls	r2, r2, #4
 8000682:	b2d2      	uxtb	r2, r2
 8000684:	440b      	add	r3, r1
 8000686:	761a      	strb	r2, [r3, #24]
}
 8000688:	bf00      	nop
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	e000e100 	.word	0xe000e100
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800069c:	b480      	push	{r7}
 800069e:	b089      	sub	sp, #36	; 0x24
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	60b9      	str	r1, [r7, #8]
 80006a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	f003 0307 	and.w	r3, r3, #7
 80006ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006b0:	69fb      	ldr	r3, [r7, #28]
 80006b2:	f1c3 0307 	rsb	r3, r3, #7
 80006b6:	2b04      	cmp	r3, #4
 80006b8:	bf28      	it	cs
 80006ba:	2304      	movcs	r3, #4
 80006bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	3304      	adds	r3, #4
 80006c2:	2b06      	cmp	r3, #6
 80006c4:	d902      	bls.n	80006cc <NVIC_EncodePriority+0x30>
 80006c6:	69fb      	ldr	r3, [r7, #28]
 80006c8:	3b03      	subs	r3, #3
 80006ca:	e000      	b.n	80006ce <NVIC_EncodePriority+0x32>
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d0:	f04f 32ff 	mov.w	r2, #4294967295
 80006d4:	69bb      	ldr	r3, [r7, #24]
 80006d6:	fa02 f303 	lsl.w	r3, r2, r3
 80006da:	43da      	mvns	r2, r3
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	401a      	ands	r2, r3
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006e4:	f04f 31ff 	mov.w	r1, #4294967295
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	fa01 f303 	lsl.w	r3, r1, r3
 80006ee:	43d9      	mvns	r1, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f4:	4313      	orrs	r3, r2
         );
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3724      	adds	r7, #36	; 0x24
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
	...

08000704 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	3b01      	subs	r3, #1
 8000710:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000714:	d301      	bcc.n	800071a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000716:	2301      	movs	r3, #1
 8000718:	e00f      	b.n	800073a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800071a:	4a0a      	ldr	r2, [pc, #40]	; (8000744 <SysTick_Config+0x40>)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	3b01      	subs	r3, #1
 8000720:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000722:	210f      	movs	r1, #15
 8000724:	f04f 30ff 	mov.w	r0, #4294967295
 8000728:	f7ff ff8e 	bl	8000648 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800072c:	4b05      	ldr	r3, [pc, #20]	; (8000744 <SysTick_Config+0x40>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000732:	4b04      	ldr	r3, [pc, #16]	; (8000744 <SysTick_Config+0x40>)
 8000734:	2207      	movs	r2, #7
 8000736:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000738:	2300      	movs	r3, #0
}
 800073a:	4618      	mov	r0, r3
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	e000e010 	.word	0xe000e010

08000748 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f7ff ff47 	bl	80005e4 <__NVIC_SetPriorityGrouping>
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	b086      	sub	sp, #24
 8000762:	af00      	add	r7, sp, #0
 8000764:	4603      	mov	r3, r0
 8000766:	60b9      	str	r1, [r7, #8]
 8000768:	607a      	str	r2, [r7, #4]
 800076a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000770:	f7ff ff5c 	bl	800062c <__NVIC_GetPriorityGrouping>
 8000774:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	68b9      	ldr	r1, [r7, #8]
 800077a:	6978      	ldr	r0, [r7, #20]
 800077c:	f7ff ff8e 	bl	800069c <NVIC_EncodePriority>
 8000780:	4602      	mov	r2, r0
 8000782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000786:	4611      	mov	r1, r2
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff ff5d 	bl	8000648 <__NVIC_SetPriority>
}
 800078e:	bf00      	nop
 8000790:	3718      	adds	r7, #24
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b082      	sub	sp, #8
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f7ff ffb0 	bl	8000704 <SysTick_Config>
 80007a4:	4603      	mov	r3, r0
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
	...

080007b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b087      	sub	sp, #28
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007be:	e154      	b.n	8000a6a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	2101      	movs	r1, #1
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	fa01 f303 	lsl.w	r3, r1, r3
 80007cc:	4013      	ands	r3, r2
 80007ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	f000 8146 	beq.w	8000a64 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	2b02      	cmp	r3, #2
 80007de:	d003      	beq.n	80007e8 <HAL_GPIO_Init+0x38>
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	2b12      	cmp	r3, #18
 80007e6:	d123      	bne.n	8000830 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	08da      	lsrs	r2, r3, #3
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3208      	adds	r2, #8
 80007f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	f003 0307 	and.w	r3, r3, #7
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	220f      	movs	r2, #15
 8000800:	fa02 f303 	lsl.w	r3, r2, r3
 8000804:	43db      	mvns	r3, r3
 8000806:	693a      	ldr	r2, [r7, #16]
 8000808:	4013      	ands	r3, r2
 800080a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	691a      	ldr	r2, [r3, #16]
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	f003 0307 	and.w	r3, r3, #7
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	fa02 f303 	lsl.w	r3, r2, r3
 800081c:	693a      	ldr	r2, [r7, #16]
 800081e:	4313      	orrs	r3, r2
 8000820:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	08da      	lsrs	r2, r3, #3
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	3208      	adds	r2, #8
 800082a:	6939      	ldr	r1, [r7, #16]
 800082c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	2203      	movs	r2, #3
 800083c:	fa02 f303 	lsl.w	r3, r2, r3
 8000840:	43db      	mvns	r3, r3
 8000842:	693a      	ldr	r2, [r7, #16]
 8000844:	4013      	ands	r3, r2
 8000846:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	f003 0203 	and.w	r2, r3, #3
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	fa02 f303 	lsl.w	r3, r2, r3
 8000858:	693a      	ldr	r2, [r7, #16]
 800085a:	4313      	orrs	r3, r2
 800085c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	693a      	ldr	r2, [r7, #16]
 8000862:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d00b      	beq.n	8000884 <HAL_GPIO_Init+0xd4>
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	2b02      	cmp	r3, #2
 8000872:	d007      	beq.n	8000884 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000878:	2b11      	cmp	r3, #17
 800087a:	d003      	beq.n	8000884 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	2b12      	cmp	r3, #18
 8000882:	d130      	bne.n	80008e6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	689b      	ldr	r3, [r3, #8]
 8000888:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	2203      	movs	r2, #3
 8000890:	fa02 f303 	lsl.w	r3, r2, r3
 8000894:	43db      	mvns	r3, r3
 8000896:	693a      	ldr	r2, [r7, #16]
 8000898:	4013      	ands	r3, r2
 800089a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	68da      	ldr	r2, [r3, #12]
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	fa02 f303 	lsl.w	r3, r2, r3
 80008a8:	693a      	ldr	r2, [r7, #16]
 80008aa:	4313      	orrs	r3, r2
 80008ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	693a      	ldr	r2, [r7, #16]
 80008b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008ba:	2201      	movs	r2, #1
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	fa02 f303 	lsl.w	r3, r2, r3
 80008c2:	43db      	mvns	r3, r3
 80008c4:	693a      	ldr	r2, [r7, #16]
 80008c6:	4013      	ands	r3, r2
 80008c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	091b      	lsrs	r3, r3, #4
 80008d0:	f003 0201 	and.w	r2, r3, #1
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	693a      	ldr	r2, [r7, #16]
 80008dc:	4313      	orrs	r3, r2
 80008de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	68db      	ldr	r3, [r3, #12]
 80008ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	2203      	movs	r2, #3
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	43db      	mvns	r3, r3
 80008f8:	693a      	ldr	r2, [r7, #16]
 80008fa:	4013      	ands	r3, r2
 80008fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	689a      	ldr	r2, [r3, #8]
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	fa02 f303 	lsl.w	r3, r2, r3
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	4313      	orrs	r3, r2
 800090e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091e:	2b00      	cmp	r3, #0
 8000920:	f000 80a0 	beq.w	8000a64 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000924:	4b58      	ldr	r3, [pc, #352]	; (8000a88 <HAL_GPIO_Init+0x2d8>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	4a57      	ldr	r2, [pc, #348]	; (8000a88 <HAL_GPIO_Init+0x2d8>)
 800092a:	f043 0301 	orr.w	r3, r3, #1
 800092e:	6193      	str	r3, [r2, #24]
 8000930:	4b55      	ldr	r3, [pc, #340]	; (8000a88 <HAL_GPIO_Init+0x2d8>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	f003 0301 	and.w	r3, r3, #1
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800093c:	4a53      	ldr	r2, [pc, #332]	; (8000a8c <HAL_GPIO_Init+0x2dc>)
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	089b      	lsrs	r3, r3, #2
 8000942:	3302      	adds	r3, #2
 8000944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000948:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	f003 0303 	and.w	r3, r3, #3
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	220f      	movs	r2, #15
 8000954:	fa02 f303 	lsl.w	r3, r2, r3
 8000958:	43db      	mvns	r3, r3
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	4013      	ands	r3, r2
 800095e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000966:	d019      	beq.n	800099c <HAL_GPIO_Init+0x1ec>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4a49      	ldr	r2, [pc, #292]	; (8000a90 <HAL_GPIO_Init+0x2e0>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d013      	beq.n	8000998 <HAL_GPIO_Init+0x1e8>
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4a48      	ldr	r2, [pc, #288]	; (8000a94 <HAL_GPIO_Init+0x2e4>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d00d      	beq.n	8000994 <HAL_GPIO_Init+0x1e4>
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	4a47      	ldr	r2, [pc, #284]	; (8000a98 <HAL_GPIO_Init+0x2e8>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d007      	beq.n	8000990 <HAL_GPIO_Init+0x1e0>
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4a46      	ldr	r2, [pc, #280]	; (8000a9c <HAL_GPIO_Init+0x2ec>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d101      	bne.n	800098c <HAL_GPIO_Init+0x1dc>
 8000988:	2304      	movs	r3, #4
 800098a:	e008      	b.n	800099e <HAL_GPIO_Init+0x1ee>
 800098c:	2305      	movs	r3, #5
 800098e:	e006      	b.n	800099e <HAL_GPIO_Init+0x1ee>
 8000990:	2303      	movs	r3, #3
 8000992:	e004      	b.n	800099e <HAL_GPIO_Init+0x1ee>
 8000994:	2302      	movs	r3, #2
 8000996:	e002      	b.n	800099e <HAL_GPIO_Init+0x1ee>
 8000998:	2301      	movs	r3, #1
 800099a:	e000      	b.n	800099e <HAL_GPIO_Init+0x1ee>
 800099c:	2300      	movs	r3, #0
 800099e:	697a      	ldr	r2, [r7, #20]
 80009a0:	f002 0203 	and.w	r2, r2, #3
 80009a4:	0092      	lsls	r2, r2, #2
 80009a6:	4093      	lsls	r3, r2
 80009a8:	693a      	ldr	r2, [r7, #16]
 80009aa:	4313      	orrs	r3, r2
 80009ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009ae:	4937      	ldr	r1, [pc, #220]	; (8000a8c <HAL_GPIO_Init+0x2dc>)
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	089b      	lsrs	r3, r3, #2
 80009b4:	3302      	adds	r3, #2
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009bc:	4b38      	ldr	r3, [pc, #224]	; (8000aa0 <HAL_GPIO_Init+0x2f0>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	43db      	mvns	r3, r3
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	4013      	ands	r3, r2
 80009ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d003      	beq.n	80009e0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80009d8:	693a      	ldr	r2, [r7, #16]
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	4313      	orrs	r3, r2
 80009de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80009e0:	4a2f      	ldr	r2, [pc, #188]	; (8000aa0 <HAL_GPIO_Init+0x2f0>)
 80009e2:	693b      	ldr	r3, [r7, #16]
 80009e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80009e6:	4b2e      	ldr	r3, [pc, #184]	; (8000aa0 <HAL_GPIO_Init+0x2f0>)
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	43db      	mvns	r3, r3
 80009f0:	693a      	ldr	r2, [r7, #16]
 80009f2:	4013      	ands	r3, r2
 80009f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d003      	beq.n	8000a0a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a0a:	4a25      	ldr	r2, [pc, #148]	; (8000aa0 <HAL_GPIO_Init+0x2f0>)
 8000a0c:	693b      	ldr	r3, [r7, #16]
 8000a0e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a10:	4b23      	ldr	r3, [pc, #140]	; (8000aa0 <HAL_GPIO_Init+0x2f0>)
 8000a12:	689b      	ldr	r3, [r3, #8]
 8000a14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	43db      	mvns	r3, r3
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d003      	beq.n	8000a34 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	4313      	orrs	r3, r2
 8000a32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a34:	4a1a      	ldr	r2, [pc, #104]	; (8000aa0 <HAL_GPIO_Init+0x2f0>)
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a3a:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <HAL_GPIO_Init+0x2f0>)
 8000a3c:	68db      	ldr	r3, [r3, #12]
 8000a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	43db      	mvns	r3, r3
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	4013      	ands	r3, r2
 8000a48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d003      	beq.n	8000a5e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000a5e:	4a10      	ldr	r2, [pc, #64]	; (8000aa0 <HAL_GPIO_Init+0x2f0>)
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	3301      	adds	r3, #1
 8000a68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	fa22 f303 	lsr.w	r3, r2, r3
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	f47f aea3 	bne.w	80007c0 <HAL_GPIO_Init+0x10>
  }
}
 8000a7a:	bf00      	nop
 8000a7c:	371c      	adds	r7, #28
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	40010000 	.word	0x40010000
 8000a90:	48000400 	.word	0x48000400
 8000a94:	48000800 	.word	0x48000800
 8000a98:	48000c00 	.word	0x48000c00
 8000a9c:	48001000 	.word	0x48001000
 8000aa0:	40010400 	.word	0x40010400

08000aa4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	460b      	mov	r3, r1
 8000aae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	691a      	ldr	r2, [r3, #16]
 8000ab4:	887b      	ldrh	r3, [r7, #2]
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d002      	beq.n	8000ac2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000abc:	2301      	movs	r3, #1
 8000abe:	73fb      	strb	r3, [r7, #15]
 8000ac0:	e001      	b.n	8000ac6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3714      	adds	r7, #20
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	460b      	mov	r3, r1
 8000ade:	807b      	strh	r3, [r7, #2]
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ae4:	787b      	ldrb	r3, [r7, #1]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d003      	beq.n	8000af2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000aea:	887a      	ldrh	r2, [r7, #2]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000af0:	e002      	b.n	8000af8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000af2:	887a      	ldrh	r2, [r7, #2]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d102      	bne.n	8000b1e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	f000 bef4 	b.w	8001906 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f003 0301 	and.w	r3, r3, #1
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	f000 816a 	beq.w	8000e02 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b2e:	4bb3      	ldr	r3, [pc, #716]	; (8000dfc <HAL_RCC_OscConfig+0x2f8>)
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f003 030c 	and.w	r3, r3, #12
 8000b36:	2b04      	cmp	r3, #4
 8000b38:	d00c      	beq.n	8000b54 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b3a:	4bb0      	ldr	r3, [pc, #704]	; (8000dfc <HAL_RCC_OscConfig+0x2f8>)
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f003 030c 	and.w	r3, r3, #12
 8000b42:	2b08      	cmp	r3, #8
 8000b44:	d159      	bne.n	8000bfa <HAL_RCC_OscConfig+0xf6>
 8000b46:	4bad      	ldr	r3, [pc, #692]	; (8000dfc <HAL_RCC_OscConfig+0x2f8>)
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b52:	d152      	bne.n	8000bfa <HAL_RCC_OscConfig+0xf6>
 8000b54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b58:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b5c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000b60:	fa93 f3a3 	rbit	r3, r3
 8000b64:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000b68:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b6c:	fab3 f383 	clz	r3, r3
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	095b      	lsrs	r3, r3, #5
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	f043 0301 	orr.w	r3, r3, #1
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d102      	bne.n	8000b86 <HAL_RCC_OscConfig+0x82>
 8000b80:	4b9e      	ldr	r3, [pc, #632]	; (8000dfc <HAL_RCC_OscConfig+0x2f8>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	e015      	b.n	8000bb2 <HAL_RCC_OscConfig+0xae>
 8000b86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b8a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b8e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000b92:	fa93 f3a3 	rbit	r3, r3
 8000b96:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000b9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b9e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000ba2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000ba6:	fa93 f3a3 	rbit	r3, r3
 8000baa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000bae:	4b93      	ldr	r3, [pc, #588]	; (8000dfc <HAL_RCC_OscConfig+0x2f8>)
 8000bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000bb6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000bba:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000bbe:	fa92 f2a2 	rbit	r2, r2
 8000bc2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000bc6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000bca:	fab2 f282 	clz	r2, r2
 8000bce:	b2d2      	uxtb	r2, r2
 8000bd0:	f042 0220 	orr.w	r2, r2, #32
 8000bd4:	b2d2      	uxtb	r2, r2
 8000bd6:	f002 021f 	and.w	r2, r2, #31
 8000bda:	2101      	movs	r1, #1
 8000bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8000be0:	4013      	ands	r3, r2
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f000 810c 	beq.w	8000e00 <HAL_RCC_OscConfig+0x2fc>
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f040 8106 	bne.w	8000e00 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	f000 be86 	b.w	8001906 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c04:	d106      	bne.n	8000c14 <HAL_RCC_OscConfig+0x110>
 8000c06:	4b7d      	ldr	r3, [pc, #500]	; (8000dfc <HAL_RCC_OscConfig+0x2f8>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a7c      	ldr	r2, [pc, #496]	; (8000dfc <HAL_RCC_OscConfig+0x2f8>)
 8000c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c10:	6013      	str	r3, [r2, #0]
 8000c12:	e030      	b.n	8000c76 <HAL_RCC_OscConfig+0x172>
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d10c      	bne.n	8000c38 <HAL_RCC_OscConfig+0x134>
 8000c1e:	4b77      	ldr	r3, [pc, #476]	; (8000dfc <HAL_RCC_OscConfig+0x2f8>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a76      	ldr	r2, [pc, #472]	; (8000dfc <HAL_RCC_OscConfig+0x2f8>)
 8000c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c28:	6013      	str	r3, [r2, #0]
 8000c2a:	4b74      	ldr	r3, [pc, #464]	; (8000dfc <HAL_RCC_OscConfig+0x2f8>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a73      	ldr	r2, [pc, #460]	; (8000dfc <HAL_RCC_OscConfig+0x2f8>)
 8000c30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c34:	6013      	str	r3, [r2, #0]
 8000c36:	e01e      	b.n	8000c76 <HAL_RCC_OscConfig+0x172>
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c42:	d10c      	bne.n	8000c5e <HAL_RCC_OscConfig+0x15a>
 8000c44:	4b6d      	ldr	r3, [pc, #436]	; (8000dfc <HAL_RCC_OscConfig+0x2f8>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a6c      	ldr	r2, [pc, #432]	; (8000dfc <HAL_RCC_OscConfig+0x2f8>)
 8000c4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c4e:	6013      	str	r3, [r2, #0]
 8000c50:	4b6a      	ldr	r3, [pc, #424]	; (8000dfc <HAL_RCC_OscConfig+0x2f8>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a69      	ldr	r2, [pc, #420]	; (8000dfc <HAL_RCC_OscConfig+0x2f8>)
 8000c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c5a:	6013      	str	r3, [r2, #0]
 8000c5c:	e00b      	b.n	8000c76 <HAL_RCC_OscConfig+0x172>
 8000c5e:	4b67      	ldr	r3, [pc, #412]	; (8000dfc <HAL_RCC_OscConfig+0x2f8>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a66      	ldr	r2, [pc, #408]	; (8000dfc <HAL_RCC_OscConfig+0x2f8>)
 8000c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c68:	6013      	str	r3, [r2, #0]
 8000c6a:	4b64      	ldr	r3, [pc, #400]	; (8000dfc <HAL_RCC_OscConfig+0x2f8>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a63      	ldr	r2, [pc, #396]	; (8000dfc <HAL_RCC_OscConfig+0x2f8>)
 8000c70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c74:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000c76:	4b61      	ldr	r3, [pc, #388]	; (8000dfc <HAL_RCC_OscConfig+0x2f8>)
 8000c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c7a:	f023 020f 	bic.w	r2, r3, #15
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	495d      	ldr	r1, [pc, #372]	; (8000dfc <HAL_RCC_OscConfig+0x2f8>)
 8000c86:	4313      	orrs	r3, r2
 8000c88:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d059      	beq.n	8000d48 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c94:	f7ff fc78 	bl	8000588 <HAL_GetTick>
 8000c98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c9c:	e00a      	b.n	8000cb4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c9e:	f7ff fc73 	bl	8000588 <HAL_GetTick>
 8000ca2:	4602      	mov	r2, r0
 8000ca4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	2b64      	cmp	r3, #100	; 0x64
 8000cac:	d902      	bls.n	8000cb4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	f000 be29 	b.w	8001906 <HAL_RCC_OscConfig+0xe02>
 8000cb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cb8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cbc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000cc0:	fa93 f3a3 	rbit	r3, r3
 8000cc4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000cc8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ccc:	fab3 f383 	clz	r3, r3
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	095b      	lsrs	r3, r3, #5
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d102      	bne.n	8000ce6 <HAL_RCC_OscConfig+0x1e2>
 8000ce0:	4b46      	ldr	r3, [pc, #280]	; (8000dfc <HAL_RCC_OscConfig+0x2f8>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	e015      	b.n	8000d12 <HAL_RCC_OscConfig+0x20e>
 8000ce6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cea:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cee:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000cf2:	fa93 f3a3 	rbit	r3, r3
 8000cf6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000cfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cfe:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000d02:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000d06:	fa93 f3a3 	rbit	r3, r3
 8000d0a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000d0e:	4b3b      	ldr	r3, [pc, #236]	; (8000dfc <HAL_RCC_OscConfig+0x2f8>)
 8000d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d16:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000d1a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000d1e:	fa92 f2a2 	rbit	r2, r2
 8000d22:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000d26:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000d2a:	fab2 f282 	clz	r2, r2
 8000d2e:	b2d2      	uxtb	r2, r2
 8000d30:	f042 0220 	orr.w	r2, r2, #32
 8000d34:	b2d2      	uxtb	r2, r2
 8000d36:	f002 021f 	and.w	r2, r2, #31
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d40:	4013      	ands	r3, r2
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d0ab      	beq.n	8000c9e <HAL_RCC_OscConfig+0x19a>
 8000d46:	e05c      	b.n	8000e02 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d48:	f7ff fc1e 	bl	8000588 <HAL_GetTick>
 8000d4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d50:	e00a      	b.n	8000d68 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d52:	f7ff fc19 	bl	8000588 <HAL_GetTick>
 8000d56:	4602      	mov	r2, r0
 8000d58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	2b64      	cmp	r3, #100	; 0x64
 8000d60:	d902      	bls.n	8000d68 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8000d62:	2303      	movs	r3, #3
 8000d64:	f000 bdcf 	b.w	8001906 <HAL_RCC_OscConfig+0xe02>
 8000d68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d6c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d70:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000d74:	fa93 f3a3 	rbit	r3, r3
 8000d78:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000d7c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d80:	fab3 f383 	clz	r3, r3
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	095b      	lsrs	r3, r3, #5
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	f043 0301 	orr.w	r3, r3, #1
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d102      	bne.n	8000d9a <HAL_RCC_OscConfig+0x296>
 8000d94:	4b19      	ldr	r3, [pc, #100]	; (8000dfc <HAL_RCC_OscConfig+0x2f8>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	e015      	b.n	8000dc6 <HAL_RCC_OscConfig+0x2c2>
 8000d9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d9e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000da2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000da6:	fa93 f3a3 	rbit	r3, r3
 8000daa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000dae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000db2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000db6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000dba:	fa93 f3a3 	rbit	r3, r3
 8000dbe:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <HAL_RCC_OscConfig+0x2f8>)
 8000dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dca:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000dce:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000dd2:	fa92 f2a2 	rbit	r2, r2
 8000dd6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000dda:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	b2d2      	uxtb	r2, r2
 8000de4:	f042 0220 	orr.w	r2, r2, #32
 8000de8:	b2d2      	uxtb	r2, r2
 8000dea:	f002 021f 	and.w	r2, r2, #31
 8000dee:	2101      	movs	r1, #1
 8000df0:	fa01 f202 	lsl.w	r2, r1, r2
 8000df4:	4013      	ands	r3, r2
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d1ab      	bne.n	8000d52 <HAL_RCC_OscConfig+0x24e>
 8000dfa:	e002      	b.n	8000e02 <HAL_RCC_OscConfig+0x2fe>
 8000dfc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f003 0302 	and.w	r3, r3, #2
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	f000 816f 	beq.w	80010f0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e12:	4bd0      	ldr	r3, [pc, #832]	; (8001154 <HAL_RCC_OscConfig+0x650>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f003 030c 	and.w	r3, r3, #12
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d00b      	beq.n	8000e36 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e1e:	4bcd      	ldr	r3, [pc, #820]	; (8001154 <HAL_RCC_OscConfig+0x650>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f003 030c 	and.w	r3, r3, #12
 8000e26:	2b08      	cmp	r3, #8
 8000e28:	d16c      	bne.n	8000f04 <HAL_RCC_OscConfig+0x400>
 8000e2a:	4bca      	ldr	r3, [pc, #808]	; (8001154 <HAL_RCC_OscConfig+0x650>)
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d166      	bne.n	8000f04 <HAL_RCC_OscConfig+0x400>
 8000e36:	2302      	movs	r3, #2
 8000e38:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e3c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000e40:	fa93 f3a3 	rbit	r3, r3
 8000e44:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000e48:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e4c:	fab3 f383 	clz	r3, r3
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	095b      	lsrs	r3, r3, #5
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	f043 0301 	orr.w	r3, r3, #1
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d102      	bne.n	8000e66 <HAL_RCC_OscConfig+0x362>
 8000e60:	4bbc      	ldr	r3, [pc, #752]	; (8001154 <HAL_RCC_OscConfig+0x650>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	e013      	b.n	8000e8e <HAL_RCC_OscConfig+0x38a>
 8000e66:	2302      	movs	r3, #2
 8000e68:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e6c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000e70:	fa93 f3a3 	rbit	r3, r3
 8000e74:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000e78:	2302      	movs	r3, #2
 8000e7a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000e7e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000e82:	fa93 f3a3 	rbit	r3, r3
 8000e86:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000e8a:	4bb2      	ldr	r3, [pc, #712]	; (8001154 <HAL_RCC_OscConfig+0x650>)
 8000e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e8e:	2202      	movs	r2, #2
 8000e90:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000e94:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000e98:	fa92 f2a2 	rbit	r2, r2
 8000e9c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8000ea0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000ea4:	fab2 f282 	clz	r2, r2
 8000ea8:	b2d2      	uxtb	r2, r2
 8000eaa:	f042 0220 	orr.w	r2, r2, #32
 8000eae:	b2d2      	uxtb	r2, r2
 8000eb0:	f002 021f 	and.w	r2, r2, #31
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eba:	4013      	ands	r3, r2
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d007      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x3cc>
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	691b      	ldr	r3, [r3, #16]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d002      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	f000 bd1b 	b.w	8001906 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ed0:	4ba0      	ldr	r3, [pc, #640]	; (8001154 <HAL_RCC_OscConfig+0x650>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ed8:	1d3b      	adds	r3, r7, #4
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	21f8      	movs	r1, #248	; 0xf8
 8000ee0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000ee8:	fa91 f1a1 	rbit	r1, r1
 8000eec:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8000ef0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8000ef4:	fab1 f181 	clz	r1, r1
 8000ef8:	b2c9      	uxtb	r1, r1
 8000efa:	408b      	lsls	r3, r1
 8000efc:	4995      	ldr	r1, [pc, #596]	; (8001154 <HAL_RCC_OscConfig+0x650>)
 8000efe:	4313      	orrs	r3, r2
 8000f00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f02:	e0f5      	b.n	80010f0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	691b      	ldr	r3, [r3, #16]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	f000 8085 	beq.w	800101a <HAL_RCC_OscConfig+0x516>
 8000f10:	2301      	movs	r3, #1
 8000f12:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f16:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000f1a:	fa93 f3a3 	rbit	r3, r3
 8000f1e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8000f22:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f26:	fab3 f383 	clz	r3, r3
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	461a      	mov	r2, r3
 8000f38:	2301      	movs	r3, #1
 8000f3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f3c:	f7ff fb24 	bl	8000588 <HAL_GetTick>
 8000f40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f44:	e00a      	b.n	8000f5c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f46:	f7ff fb1f 	bl	8000588 <HAL_GetTick>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d902      	bls.n	8000f5c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8000f56:	2303      	movs	r3, #3
 8000f58:	f000 bcd5 	b.w	8001906 <HAL_RCC_OscConfig+0xe02>
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f62:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000f66:	fa93 f3a3 	rbit	r3, r3
 8000f6a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8000f6e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f72:	fab3 f383 	clz	r3, r3
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	095b      	lsrs	r3, r3, #5
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d102      	bne.n	8000f8c <HAL_RCC_OscConfig+0x488>
 8000f86:	4b73      	ldr	r3, [pc, #460]	; (8001154 <HAL_RCC_OscConfig+0x650>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	e013      	b.n	8000fb4 <HAL_RCC_OscConfig+0x4b0>
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f92:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000f96:	fa93 f3a3 	rbit	r3, r3
 8000f9a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000fa4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000fa8:	fa93 f3a3 	rbit	r3, r3
 8000fac:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8000fb0:	4b68      	ldr	r3, [pc, #416]	; (8001154 <HAL_RCC_OscConfig+0x650>)
 8000fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8000fba:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000fbe:	fa92 f2a2 	rbit	r2, r2
 8000fc2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8000fc6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8000fca:	fab2 f282 	clz	r2, r2
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	f042 0220 	orr.w	r2, r2, #32
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	f002 021f 	and.w	r2, r2, #31
 8000fda:	2101      	movs	r1, #1
 8000fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d0af      	beq.n	8000f46 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fe6:	4b5b      	ldr	r3, [pc, #364]	; (8001154 <HAL_RCC_OscConfig+0x650>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	695b      	ldr	r3, [r3, #20]
 8000ff4:	21f8      	movs	r1, #248	; 0xf8
 8000ff6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ffa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8000ffe:	fa91 f1a1 	rbit	r1, r1
 8001002:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001006:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800100a:	fab1 f181 	clz	r1, r1
 800100e:	b2c9      	uxtb	r1, r1
 8001010:	408b      	lsls	r3, r1
 8001012:	4950      	ldr	r1, [pc, #320]	; (8001154 <HAL_RCC_OscConfig+0x650>)
 8001014:	4313      	orrs	r3, r2
 8001016:	600b      	str	r3, [r1, #0]
 8001018:	e06a      	b.n	80010f0 <HAL_RCC_OscConfig+0x5ec>
 800101a:	2301      	movs	r3, #1
 800101c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001020:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001024:	fa93 f3a3 	rbit	r3, r3
 8001028:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800102c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001030:	fab3 f383 	clz	r3, r3
 8001034:	b2db      	uxtb	r3, r3
 8001036:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800103a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	461a      	mov	r2, r3
 8001042:	2300      	movs	r3, #0
 8001044:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001046:	f7ff fa9f 	bl	8000588 <HAL_GetTick>
 800104a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800104e:	e00a      	b.n	8001066 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001050:	f7ff fa9a 	bl	8000588 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	2b02      	cmp	r3, #2
 800105e:	d902      	bls.n	8001066 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001060:	2303      	movs	r3, #3
 8001062:	f000 bc50 	b.w	8001906 <HAL_RCC_OscConfig+0xe02>
 8001066:	2302      	movs	r3, #2
 8001068:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001070:	fa93 f3a3 	rbit	r3, r3
 8001074:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001078:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800107c:	fab3 f383 	clz	r3, r3
 8001080:	b2db      	uxtb	r3, r3
 8001082:	095b      	lsrs	r3, r3, #5
 8001084:	b2db      	uxtb	r3, r3
 8001086:	f043 0301 	orr.w	r3, r3, #1
 800108a:	b2db      	uxtb	r3, r3
 800108c:	2b01      	cmp	r3, #1
 800108e:	d102      	bne.n	8001096 <HAL_RCC_OscConfig+0x592>
 8001090:	4b30      	ldr	r3, [pc, #192]	; (8001154 <HAL_RCC_OscConfig+0x650>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	e013      	b.n	80010be <HAL_RCC_OscConfig+0x5ba>
 8001096:	2302      	movs	r3, #2
 8001098:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800109c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80010a0:	fa93 f3a3 	rbit	r3, r3
 80010a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80010a8:	2302      	movs	r3, #2
 80010aa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80010ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80010b2:	fa93 f3a3 	rbit	r3, r3
 80010b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80010ba:	4b26      	ldr	r3, [pc, #152]	; (8001154 <HAL_RCC_OscConfig+0x650>)
 80010bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010be:	2202      	movs	r2, #2
 80010c0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80010c4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80010c8:	fa92 f2a2 	rbit	r2, r2
 80010cc:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80010d0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80010d4:	fab2 f282 	clz	r2, r2
 80010d8:	b2d2      	uxtb	r2, r2
 80010da:	f042 0220 	orr.w	r2, r2, #32
 80010de:	b2d2      	uxtb	r2, r2
 80010e0:	f002 021f 	and.w	r2, r2, #31
 80010e4:	2101      	movs	r1, #1
 80010e6:	fa01 f202 	lsl.w	r2, r1, r2
 80010ea:	4013      	ands	r3, r2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d1af      	bne.n	8001050 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0308 	and.w	r3, r3, #8
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f000 80da 	beq.w	80012b4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	699b      	ldr	r3, [r3, #24]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d069      	beq.n	80011de <HAL_RCC_OscConfig+0x6da>
 800110a:	2301      	movs	r3, #1
 800110c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001110:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001114:	fa93 f3a3 	rbit	r3, r3
 8001118:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800111c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001120:	fab3 f383 	clz	r3, r3
 8001124:	b2db      	uxtb	r3, r3
 8001126:	461a      	mov	r2, r3
 8001128:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <HAL_RCC_OscConfig+0x654>)
 800112a:	4413      	add	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	461a      	mov	r2, r3
 8001130:	2301      	movs	r3, #1
 8001132:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001134:	f7ff fa28 	bl	8000588 <HAL_GetTick>
 8001138:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800113c:	e00e      	b.n	800115c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800113e:	f7ff fa23 	bl	8000588 <HAL_GetTick>
 8001142:	4602      	mov	r2, r0
 8001144:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b02      	cmp	r3, #2
 800114c:	d906      	bls.n	800115c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e3d9      	b.n	8001906 <HAL_RCC_OscConfig+0xe02>
 8001152:	bf00      	nop
 8001154:	40021000 	.word	0x40021000
 8001158:	10908120 	.word	0x10908120
 800115c:	2302      	movs	r3, #2
 800115e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001162:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001166:	fa93 f3a3 	rbit	r3, r3
 800116a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800116e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001172:	2202      	movs	r2, #2
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	fa93 f2a3 	rbit	r2, r3
 8001180:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800118a:	2202      	movs	r2, #2
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	fa93 f2a3 	rbit	r2, r3
 8001198:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800119c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800119e:	4ba5      	ldr	r3, [pc, #660]	; (8001434 <HAL_RCC_OscConfig+0x930>)
 80011a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011a2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80011a6:	2102      	movs	r1, #2
 80011a8:	6019      	str	r1, [r3, #0]
 80011aa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	fa93 f1a3 	rbit	r1, r3
 80011b4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80011b8:	6019      	str	r1, [r3, #0]
  return result;
 80011ba:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	fab3 f383 	clz	r3, r3
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	f003 031f 	and.w	r3, r3, #31
 80011d0:	2101      	movs	r1, #1
 80011d2:	fa01 f303 	lsl.w	r3, r1, r3
 80011d6:	4013      	ands	r3, r2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d0b0      	beq.n	800113e <HAL_RCC_OscConfig+0x63a>
 80011dc:	e06a      	b.n	80012b4 <HAL_RCC_OscConfig+0x7b0>
 80011de:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80011e2:	2201      	movs	r2, #1
 80011e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	fa93 f2a3 	rbit	r2, r3
 80011f0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80011f4:	601a      	str	r2, [r3, #0]
  return result;
 80011f6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80011fa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011fc:	fab3 f383 	clz	r3, r3
 8001200:	b2db      	uxtb	r3, r3
 8001202:	461a      	mov	r2, r3
 8001204:	4b8c      	ldr	r3, [pc, #560]	; (8001438 <HAL_RCC_OscConfig+0x934>)
 8001206:	4413      	add	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	461a      	mov	r2, r3
 800120c:	2300      	movs	r3, #0
 800120e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001210:	f7ff f9ba 	bl	8000588 <HAL_GetTick>
 8001214:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001218:	e009      	b.n	800122e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800121a:	f7ff f9b5 	bl	8000588 <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b02      	cmp	r3, #2
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e36b      	b.n	8001906 <HAL_RCC_OscConfig+0xe02>
 800122e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001232:	2202      	movs	r2, #2
 8001234:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001236:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	fa93 f2a3 	rbit	r2, r3
 8001240:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800124a:	2202      	movs	r2, #2
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	fa93 f2a3 	rbit	r2, r3
 8001258:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001262:	2202      	movs	r2, #2
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	fa93 f2a3 	rbit	r2, r3
 8001270:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001274:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001276:	4b6f      	ldr	r3, [pc, #444]	; (8001434 <HAL_RCC_OscConfig+0x930>)
 8001278:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800127a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800127e:	2102      	movs	r1, #2
 8001280:	6019      	str	r1, [r3, #0]
 8001282:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	fa93 f1a3 	rbit	r1, r3
 800128c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001290:	6019      	str	r1, [r3, #0]
  return result;
 8001292:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	fab3 f383 	clz	r3, r3
 800129c:	b2db      	uxtb	r3, r3
 800129e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	f003 031f 	and.w	r3, r3, #31
 80012a8:	2101      	movs	r1, #1
 80012aa:	fa01 f303 	lsl.w	r3, r1, r3
 80012ae:	4013      	ands	r3, r2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d1b2      	bne.n	800121a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0304 	and.w	r3, r3, #4
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f000 8158 	beq.w	8001574 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012c4:	2300      	movs	r3, #0
 80012c6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ca:	4b5a      	ldr	r3, [pc, #360]	; (8001434 <HAL_RCC_OscConfig+0x930>)
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d112      	bne.n	80012fc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012d6:	4b57      	ldr	r3, [pc, #348]	; (8001434 <HAL_RCC_OscConfig+0x930>)
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	4a56      	ldr	r2, [pc, #344]	; (8001434 <HAL_RCC_OscConfig+0x930>)
 80012dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e0:	61d3      	str	r3, [r2, #28]
 80012e2:	4b54      	ldr	r3, [pc, #336]	; (8001434 <HAL_RCC_OscConfig+0x930>)
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80012ea:	f107 0308 	add.w	r3, r7, #8
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	f107 0308 	add.w	r3, r7, #8
 80012f4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80012f6:	2301      	movs	r3, #1
 80012f8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012fc:	4b4f      	ldr	r3, [pc, #316]	; (800143c <HAL_RCC_OscConfig+0x938>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001304:	2b00      	cmp	r3, #0
 8001306:	d11a      	bne.n	800133e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001308:	4b4c      	ldr	r3, [pc, #304]	; (800143c <HAL_RCC_OscConfig+0x938>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a4b      	ldr	r2, [pc, #300]	; (800143c <HAL_RCC_OscConfig+0x938>)
 800130e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001312:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001314:	f7ff f938 	bl	8000588 <HAL_GetTick>
 8001318:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800131c:	e009      	b.n	8001332 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800131e:	f7ff f933 	bl	8000588 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b64      	cmp	r3, #100	; 0x64
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e2e9      	b.n	8001906 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001332:	4b42      	ldr	r3, [pc, #264]	; (800143c <HAL_RCC_OscConfig+0x938>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800133a:	2b00      	cmp	r3, #0
 800133c:	d0ef      	beq.n	800131e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d106      	bne.n	8001356 <HAL_RCC_OscConfig+0x852>
 8001348:	4b3a      	ldr	r3, [pc, #232]	; (8001434 <HAL_RCC_OscConfig+0x930>)
 800134a:	6a1b      	ldr	r3, [r3, #32]
 800134c:	4a39      	ldr	r2, [pc, #228]	; (8001434 <HAL_RCC_OscConfig+0x930>)
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	6213      	str	r3, [r2, #32]
 8001354:	e02f      	b.n	80013b6 <HAL_RCC_OscConfig+0x8b2>
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d10c      	bne.n	800137a <HAL_RCC_OscConfig+0x876>
 8001360:	4b34      	ldr	r3, [pc, #208]	; (8001434 <HAL_RCC_OscConfig+0x930>)
 8001362:	6a1b      	ldr	r3, [r3, #32]
 8001364:	4a33      	ldr	r2, [pc, #204]	; (8001434 <HAL_RCC_OscConfig+0x930>)
 8001366:	f023 0301 	bic.w	r3, r3, #1
 800136a:	6213      	str	r3, [r2, #32]
 800136c:	4b31      	ldr	r3, [pc, #196]	; (8001434 <HAL_RCC_OscConfig+0x930>)
 800136e:	6a1b      	ldr	r3, [r3, #32]
 8001370:	4a30      	ldr	r2, [pc, #192]	; (8001434 <HAL_RCC_OscConfig+0x930>)
 8001372:	f023 0304 	bic.w	r3, r3, #4
 8001376:	6213      	str	r3, [r2, #32]
 8001378:	e01d      	b.n	80013b6 <HAL_RCC_OscConfig+0x8b2>
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	2b05      	cmp	r3, #5
 8001382:	d10c      	bne.n	800139e <HAL_RCC_OscConfig+0x89a>
 8001384:	4b2b      	ldr	r3, [pc, #172]	; (8001434 <HAL_RCC_OscConfig+0x930>)
 8001386:	6a1b      	ldr	r3, [r3, #32]
 8001388:	4a2a      	ldr	r2, [pc, #168]	; (8001434 <HAL_RCC_OscConfig+0x930>)
 800138a:	f043 0304 	orr.w	r3, r3, #4
 800138e:	6213      	str	r3, [r2, #32]
 8001390:	4b28      	ldr	r3, [pc, #160]	; (8001434 <HAL_RCC_OscConfig+0x930>)
 8001392:	6a1b      	ldr	r3, [r3, #32]
 8001394:	4a27      	ldr	r2, [pc, #156]	; (8001434 <HAL_RCC_OscConfig+0x930>)
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	6213      	str	r3, [r2, #32]
 800139c:	e00b      	b.n	80013b6 <HAL_RCC_OscConfig+0x8b2>
 800139e:	4b25      	ldr	r3, [pc, #148]	; (8001434 <HAL_RCC_OscConfig+0x930>)
 80013a0:	6a1b      	ldr	r3, [r3, #32]
 80013a2:	4a24      	ldr	r2, [pc, #144]	; (8001434 <HAL_RCC_OscConfig+0x930>)
 80013a4:	f023 0301 	bic.w	r3, r3, #1
 80013a8:	6213      	str	r3, [r2, #32]
 80013aa:	4b22      	ldr	r3, [pc, #136]	; (8001434 <HAL_RCC_OscConfig+0x930>)
 80013ac:	6a1b      	ldr	r3, [r3, #32]
 80013ae:	4a21      	ldr	r2, [pc, #132]	; (8001434 <HAL_RCC_OscConfig+0x930>)
 80013b0:	f023 0304 	bic.w	r3, r3, #4
 80013b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d06b      	beq.n	8001498 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c0:	f7ff f8e2 	bl	8000588 <HAL_GetTick>
 80013c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013c8:	e00b      	b.n	80013e2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ca:	f7ff f8dd 	bl	8000588 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013da:	4293      	cmp	r3, r2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e291      	b.n	8001906 <HAL_RCC_OscConfig+0xe02>
 80013e2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80013e6:	2202      	movs	r2, #2
 80013e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ea:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	fa93 f2a3 	rbit	r2, r3
 80013f4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80013fe:	2202      	movs	r2, #2
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	fa93 f2a3 	rbit	r2, r3
 800140c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001410:	601a      	str	r2, [r3, #0]
  return result;
 8001412:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001416:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001418:	fab3 f383 	clz	r3, r3
 800141c:	b2db      	uxtb	r3, r3
 800141e:	095b      	lsrs	r3, r3, #5
 8001420:	b2db      	uxtb	r3, r3
 8001422:	f043 0302 	orr.w	r3, r3, #2
 8001426:	b2db      	uxtb	r3, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d109      	bne.n	8001440 <HAL_RCC_OscConfig+0x93c>
 800142c:	4b01      	ldr	r3, [pc, #4]	; (8001434 <HAL_RCC_OscConfig+0x930>)
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	e014      	b.n	800145c <HAL_RCC_OscConfig+0x958>
 8001432:	bf00      	nop
 8001434:	40021000 	.word	0x40021000
 8001438:	10908120 	.word	0x10908120
 800143c:	40007000 	.word	0x40007000
 8001440:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001444:	2202      	movs	r2, #2
 8001446:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001448:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	fa93 f2a3 	rbit	r2, r3
 8001452:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	4bbb      	ldr	r3, [pc, #748]	; (8001748 <HAL_RCC_OscConfig+0xc44>)
 800145a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001460:	2102      	movs	r1, #2
 8001462:	6011      	str	r1, [r2, #0]
 8001464:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001468:	6812      	ldr	r2, [r2, #0]
 800146a:	fa92 f1a2 	rbit	r1, r2
 800146e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001472:	6011      	str	r1, [r2, #0]
  return result;
 8001474:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001478:	6812      	ldr	r2, [r2, #0]
 800147a:	fab2 f282 	clz	r2, r2
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	f002 021f 	and.w	r2, r2, #31
 800148a:	2101      	movs	r1, #1
 800148c:	fa01 f202 	lsl.w	r2, r1, r2
 8001490:	4013      	ands	r3, r2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d099      	beq.n	80013ca <HAL_RCC_OscConfig+0x8c6>
 8001496:	e063      	b.n	8001560 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001498:	f7ff f876 	bl	8000588 <HAL_GetTick>
 800149c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014a0:	e00b      	b.n	80014ba <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014a2:	f7ff f871 	bl	8000588 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e225      	b.n	8001906 <HAL_RCC_OscConfig+0xe02>
 80014ba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80014be:	2202      	movs	r2, #2
 80014c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	fa93 f2a3 	rbit	r2, r3
 80014cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80014d6:	2202      	movs	r2, #2
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	fa93 f2a3 	rbit	r2, r3
 80014e4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80014e8:	601a      	str	r2, [r3, #0]
  return result;
 80014ea:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80014ee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014f0:	fab3 f383 	clz	r3, r3
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	095b      	lsrs	r3, r3, #5
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	f043 0302 	orr.w	r3, r3, #2
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d102      	bne.n	800150a <HAL_RCC_OscConfig+0xa06>
 8001504:	4b90      	ldr	r3, [pc, #576]	; (8001748 <HAL_RCC_OscConfig+0xc44>)
 8001506:	6a1b      	ldr	r3, [r3, #32]
 8001508:	e00d      	b.n	8001526 <HAL_RCC_OscConfig+0xa22>
 800150a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800150e:	2202      	movs	r2, #2
 8001510:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001512:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	fa93 f2a3 	rbit	r2, r3
 800151c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	4b89      	ldr	r3, [pc, #548]	; (8001748 <HAL_RCC_OscConfig+0xc44>)
 8001524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001526:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800152a:	2102      	movs	r1, #2
 800152c:	6011      	str	r1, [r2, #0]
 800152e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001532:	6812      	ldr	r2, [r2, #0]
 8001534:	fa92 f1a2 	rbit	r1, r2
 8001538:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800153c:	6011      	str	r1, [r2, #0]
  return result;
 800153e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001542:	6812      	ldr	r2, [r2, #0]
 8001544:	fab2 f282 	clz	r2, r2
 8001548:	b2d2      	uxtb	r2, r2
 800154a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	f002 021f 	and.w	r2, r2, #31
 8001554:	2101      	movs	r1, #1
 8001556:	fa01 f202 	lsl.w	r2, r1, r2
 800155a:	4013      	ands	r3, r2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1a0      	bne.n	80014a2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001560:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001564:	2b01      	cmp	r3, #1
 8001566:	d105      	bne.n	8001574 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001568:	4b77      	ldr	r3, [pc, #476]	; (8001748 <HAL_RCC_OscConfig+0xc44>)
 800156a:	69db      	ldr	r3, [r3, #28]
 800156c:	4a76      	ldr	r2, [pc, #472]	; (8001748 <HAL_RCC_OscConfig+0xc44>)
 800156e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001572:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	2b00      	cmp	r3, #0
 800157c:	f000 81c2 	beq.w	8001904 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001580:	4b71      	ldr	r3, [pc, #452]	; (8001748 <HAL_RCC_OscConfig+0xc44>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 030c 	and.w	r3, r3, #12
 8001588:	2b08      	cmp	r3, #8
 800158a:	f000 819c 	beq.w	80018c6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800158e:	1d3b      	adds	r3, r7, #4
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	69db      	ldr	r3, [r3, #28]
 8001594:	2b02      	cmp	r3, #2
 8001596:	f040 8114 	bne.w	80017c2 <HAL_RCC_OscConfig+0xcbe>
 800159a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800159e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	fa93 f2a3 	rbit	r2, r3
 80015ae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80015b2:	601a      	str	r2, [r3, #0]
  return result;
 80015b4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80015b8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ba:	fab3 f383 	clz	r3, r3
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	461a      	mov	r2, r3
 80015cc:	2300      	movs	r3, #0
 80015ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d0:	f7fe ffda 	bl	8000588 <HAL_GetTick>
 80015d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015d8:	e009      	b.n	80015ee <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015da:	f7fe ffd5 	bl	8000588 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e18b      	b.n	8001906 <HAL_RCC_OscConfig+0xe02>
 80015ee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80015f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	fa93 f2a3 	rbit	r2, r3
 8001602:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001606:	601a      	str	r2, [r3, #0]
  return result;
 8001608:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800160c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800160e:	fab3 f383 	clz	r3, r3
 8001612:	b2db      	uxtb	r3, r3
 8001614:	095b      	lsrs	r3, r3, #5
 8001616:	b2db      	uxtb	r3, r3
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b01      	cmp	r3, #1
 8001620:	d102      	bne.n	8001628 <HAL_RCC_OscConfig+0xb24>
 8001622:	4b49      	ldr	r3, [pc, #292]	; (8001748 <HAL_RCC_OscConfig+0xc44>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	e01b      	b.n	8001660 <HAL_RCC_OscConfig+0xb5c>
 8001628:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800162c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001630:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001632:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	fa93 f2a3 	rbit	r2, r3
 800163c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001646:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	fa93 f2a3 	rbit	r2, r3
 8001656:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	4b3a      	ldr	r3, [pc, #232]	; (8001748 <HAL_RCC_OscConfig+0xc44>)
 800165e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001660:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001664:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001668:	6011      	str	r1, [r2, #0]
 800166a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800166e:	6812      	ldr	r2, [r2, #0]
 8001670:	fa92 f1a2 	rbit	r1, r2
 8001674:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001678:	6011      	str	r1, [r2, #0]
  return result;
 800167a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800167e:	6812      	ldr	r2, [r2, #0]
 8001680:	fab2 f282 	clz	r2, r2
 8001684:	b2d2      	uxtb	r2, r2
 8001686:	f042 0220 	orr.w	r2, r2, #32
 800168a:	b2d2      	uxtb	r2, r2
 800168c:	f002 021f 	and.w	r2, r2, #31
 8001690:	2101      	movs	r1, #1
 8001692:	fa01 f202 	lsl.w	r2, r1, r2
 8001696:	4013      	ands	r3, r2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d19e      	bne.n	80015da <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800169c:	4b2a      	ldr	r3, [pc, #168]	; (8001748 <HAL_RCC_OscConfig+0xc44>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016a4:	1d3b      	adds	r3, r7, #4
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	430b      	orrs	r3, r1
 80016b2:	4925      	ldr	r1, [pc, #148]	; (8001748 <HAL_RCC_OscConfig+0xc44>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	604b      	str	r3, [r1, #4]
 80016b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80016c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	fa93 f2a3 	rbit	r2, r3
 80016cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016d0:	601a      	str	r2, [r3, #0]
  return result;
 80016d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016d6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016d8:	fab3 f383 	clz	r3, r3
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016e2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	461a      	mov	r2, r3
 80016ea:	2301      	movs	r3, #1
 80016ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ee:	f7fe ff4b 	bl	8000588 <HAL_GetTick>
 80016f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016f6:	e009      	b.n	800170c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016f8:	f7fe ff46 	bl	8000588 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e0fc      	b.n	8001906 <HAL_RCC_OscConfig+0xe02>
 800170c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001710:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001714:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001716:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	fa93 f2a3 	rbit	r2, r3
 8001720:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001724:	601a      	str	r2, [r3, #0]
  return result;
 8001726:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800172a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800172c:	fab3 f383 	clz	r3, r3
 8001730:	b2db      	uxtb	r3, r3
 8001732:	095b      	lsrs	r3, r3, #5
 8001734:	b2db      	uxtb	r3, r3
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b01      	cmp	r3, #1
 800173e:	d105      	bne.n	800174c <HAL_RCC_OscConfig+0xc48>
 8001740:	4b01      	ldr	r3, [pc, #4]	; (8001748 <HAL_RCC_OscConfig+0xc44>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	e01e      	b.n	8001784 <HAL_RCC_OscConfig+0xc80>
 8001746:	bf00      	nop
 8001748:	40021000 	.word	0x40021000
 800174c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001750:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001754:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001756:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	fa93 f2a3 	rbit	r2, r3
 8001760:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800176a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	fa93 f2a3 	rbit	r2, r3
 800177a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	4b63      	ldr	r3, [pc, #396]	; (8001910 <HAL_RCC_OscConfig+0xe0c>)
 8001782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001784:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001788:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800178c:	6011      	str	r1, [r2, #0]
 800178e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001792:	6812      	ldr	r2, [r2, #0]
 8001794:	fa92 f1a2 	rbit	r1, r2
 8001798:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800179c:	6011      	str	r1, [r2, #0]
  return result;
 800179e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80017a2:	6812      	ldr	r2, [r2, #0]
 80017a4:	fab2 f282 	clz	r2, r2
 80017a8:	b2d2      	uxtb	r2, r2
 80017aa:	f042 0220 	orr.w	r2, r2, #32
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	f002 021f 	and.w	r2, r2, #31
 80017b4:	2101      	movs	r1, #1
 80017b6:	fa01 f202 	lsl.w	r2, r1, r2
 80017ba:	4013      	ands	r3, r2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d09b      	beq.n	80016f8 <HAL_RCC_OscConfig+0xbf4>
 80017c0:	e0a0      	b.n	8001904 <HAL_RCC_OscConfig+0xe00>
 80017c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	fa93 f2a3 	rbit	r2, r3
 80017d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017da:	601a      	str	r2, [r3, #0]
  return result;
 80017dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017e0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e2:	fab3 f383 	clz	r3, r3
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	461a      	mov	r2, r3
 80017f4:	2300      	movs	r3, #0
 80017f6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f8:	f7fe fec6 	bl	8000588 <HAL_GetTick>
 80017fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001800:	e009      	b.n	8001816 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001802:	f7fe fec1 	bl	8000588 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e077      	b.n	8001906 <HAL_RCC_OscConfig+0xe02>
 8001816:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800181a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800181e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001820:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	fa93 f2a3 	rbit	r2, r3
 800182a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800182e:	601a      	str	r2, [r3, #0]
  return result;
 8001830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001834:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001836:	fab3 f383 	clz	r3, r3
 800183a:	b2db      	uxtb	r3, r3
 800183c:	095b      	lsrs	r3, r3, #5
 800183e:	b2db      	uxtb	r3, r3
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b01      	cmp	r3, #1
 8001848:	d102      	bne.n	8001850 <HAL_RCC_OscConfig+0xd4c>
 800184a:	4b31      	ldr	r3, [pc, #196]	; (8001910 <HAL_RCC_OscConfig+0xe0c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	e01b      	b.n	8001888 <HAL_RCC_OscConfig+0xd84>
 8001850:	f107 0320 	add.w	r3, r7, #32
 8001854:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001858:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185a:	f107 0320 	add.w	r3, r7, #32
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	fa93 f2a3 	rbit	r2, r3
 8001864:	f107 031c 	add.w	r3, r7, #28
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	f107 0318 	add.w	r3, r7, #24
 800186e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	f107 0318 	add.w	r3, r7, #24
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	fa93 f2a3 	rbit	r2, r3
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	4b22      	ldr	r3, [pc, #136]	; (8001910 <HAL_RCC_OscConfig+0xe0c>)
 8001886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001888:	f107 0210 	add.w	r2, r7, #16
 800188c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001890:	6011      	str	r1, [r2, #0]
 8001892:	f107 0210 	add.w	r2, r7, #16
 8001896:	6812      	ldr	r2, [r2, #0]
 8001898:	fa92 f1a2 	rbit	r1, r2
 800189c:	f107 020c 	add.w	r2, r7, #12
 80018a0:	6011      	str	r1, [r2, #0]
  return result;
 80018a2:	f107 020c 	add.w	r2, r7, #12
 80018a6:	6812      	ldr	r2, [r2, #0]
 80018a8:	fab2 f282 	clz	r2, r2
 80018ac:	b2d2      	uxtb	r2, r2
 80018ae:	f042 0220 	orr.w	r2, r2, #32
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	f002 021f 	and.w	r2, r2, #31
 80018b8:	2101      	movs	r1, #1
 80018ba:	fa01 f202 	lsl.w	r2, r1, r2
 80018be:	4013      	ands	r3, r2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d19e      	bne.n	8001802 <HAL_RCC_OscConfig+0xcfe>
 80018c4:	e01e      	b.n	8001904 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018c6:	1d3b      	adds	r3, r7, #4
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	69db      	ldr	r3, [r3, #28]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d101      	bne.n	80018d4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e018      	b.n	8001906 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018d4:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <HAL_RCC_OscConfig+0xe0c>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80018dc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80018e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018e4:	1d3b      	adds	r3, r7, #4
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6a1b      	ldr	r3, [r3, #32]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d108      	bne.n	8001900 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80018ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80018f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018f6:	1d3b      	adds	r3, r7, #4
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d001      	beq.n	8001904 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e000      	b.n	8001906 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40021000 	.word	0x40021000

08001914 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b09e      	sub	sp, #120	; 0x78
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800191e:	2300      	movs	r3, #0
 8001920:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e162      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800192c:	4b90      	ldr	r3, [pc, #576]	; (8001b70 <HAL_RCC_ClockConfig+0x25c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	429a      	cmp	r2, r3
 8001938:	d910      	bls.n	800195c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193a:	4b8d      	ldr	r3, [pc, #564]	; (8001b70 <HAL_RCC_ClockConfig+0x25c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f023 0207 	bic.w	r2, r3, #7
 8001942:	498b      	ldr	r1, [pc, #556]	; (8001b70 <HAL_RCC_ClockConfig+0x25c>)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	4313      	orrs	r3, r2
 8001948:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800194a:	4b89      	ldr	r3, [pc, #548]	; (8001b70 <HAL_RCC_ClockConfig+0x25c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	429a      	cmp	r2, r3
 8001956:	d001      	beq.n	800195c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e14a      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d008      	beq.n	800197a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001968:	4b82      	ldr	r3, [pc, #520]	; (8001b74 <HAL_RCC_ClockConfig+0x260>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	497f      	ldr	r1, [pc, #508]	; (8001b74 <HAL_RCC_ClockConfig+0x260>)
 8001976:	4313      	orrs	r3, r2
 8001978:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 80dc 	beq.w	8001b40 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d13c      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xf6>
 8001990:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001994:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001996:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001998:	fa93 f3a3 	rbit	r3, r3
 800199c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800199e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a0:	fab3 f383 	clz	r3, r3
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	095b      	lsrs	r3, r3, #5
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d102      	bne.n	80019ba <HAL_RCC_ClockConfig+0xa6>
 80019b4:	4b6f      	ldr	r3, [pc, #444]	; (8001b74 <HAL_RCC_ClockConfig+0x260>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	e00f      	b.n	80019da <HAL_RCC_ClockConfig+0xc6>
 80019ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019c2:	fa93 f3a3 	rbit	r3, r3
 80019c6:	667b      	str	r3, [r7, #100]	; 0x64
 80019c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019cc:	663b      	str	r3, [r7, #96]	; 0x60
 80019ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019d0:	fa93 f3a3 	rbit	r3, r3
 80019d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80019d6:	4b67      	ldr	r3, [pc, #412]	; (8001b74 <HAL_RCC_ClockConfig+0x260>)
 80019d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019de:	65ba      	str	r2, [r7, #88]	; 0x58
 80019e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80019e2:	fa92 f2a2 	rbit	r2, r2
 80019e6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80019e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80019ea:	fab2 f282 	clz	r2, r2
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	f042 0220 	orr.w	r2, r2, #32
 80019f4:	b2d2      	uxtb	r2, r2
 80019f6:	f002 021f 	and.w	r2, r2, #31
 80019fa:	2101      	movs	r1, #1
 80019fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001a00:	4013      	ands	r3, r2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d17b      	bne.n	8001afe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e0f3      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d13c      	bne.n	8001a8c <HAL_RCC_ClockConfig+0x178>
 8001a12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a16:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a1a:	fa93 f3a3 	rbit	r3, r3
 8001a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a22:	fab3 f383 	clz	r3, r3
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	095b      	lsrs	r3, r3, #5
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d102      	bne.n	8001a3c <HAL_RCC_ClockConfig+0x128>
 8001a36:	4b4f      	ldr	r3, [pc, #316]	; (8001b74 <HAL_RCC_ClockConfig+0x260>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	e00f      	b.n	8001a5c <HAL_RCC_ClockConfig+0x148>
 8001a3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a40:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a44:	fa93 f3a3 	rbit	r3, r3
 8001a48:	647b      	str	r3, [r7, #68]	; 0x44
 8001a4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a4e:	643b      	str	r3, [r7, #64]	; 0x40
 8001a50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a52:	fa93 f3a3 	rbit	r3, r3
 8001a56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a58:	4b46      	ldr	r3, [pc, #280]	; (8001b74 <HAL_RCC_ClockConfig+0x260>)
 8001a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a60:	63ba      	str	r2, [r7, #56]	; 0x38
 8001a62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a64:	fa92 f2a2 	rbit	r2, r2
 8001a68:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001a6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a6c:	fab2 f282 	clz	r2, r2
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	f042 0220 	orr.w	r2, r2, #32
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	f002 021f 	and.w	r2, r2, #31
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a82:	4013      	ands	r3, r2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d13a      	bne.n	8001afe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e0b2      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x2de>
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a92:	fa93 f3a3 	rbit	r3, r3
 8001a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a9a:	fab3 f383 	clz	r3, r3
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	095b      	lsrs	r3, r3, #5
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d102      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0x1a0>
 8001aae:	4b31      	ldr	r3, [pc, #196]	; (8001b74 <HAL_RCC_ClockConfig+0x260>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	e00d      	b.n	8001ad0 <HAL_RCC_ClockConfig+0x1bc>
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aba:	fa93 f3a3 	rbit	r3, r3
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	623b      	str	r3, [r7, #32]
 8001ac4:	6a3b      	ldr	r3, [r7, #32]
 8001ac6:	fa93 f3a3 	rbit	r3, r3
 8001aca:	61fb      	str	r3, [r7, #28]
 8001acc:	4b29      	ldr	r3, [pc, #164]	; (8001b74 <HAL_RCC_ClockConfig+0x260>)
 8001ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	61ba      	str	r2, [r7, #24]
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	fa92 f2a2 	rbit	r2, r2
 8001ada:	617a      	str	r2, [r7, #20]
  return result;
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	fab2 f282 	clz	r2, r2
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	f042 0220 	orr.w	r2, r2, #32
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	f002 021f 	and.w	r2, r2, #31
 8001aee:	2101      	movs	r1, #1
 8001af0:	fa01 f202 	lsl.w	r2, r1, r2
 8001af4:	4013      	ands	r3, r2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e079      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001afe:	4b1d      	ldr	r3, [pc, #116]	; (8001b74 <HAL_RCC_ClockConfig+0x260>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f023 0203 	bic.w	r2, r3, #3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	491a      	ldr	r1, [pc, #104]	; (8001b74 <HAL_RCC_ClockConfig+0x260>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b10:	f7fe fd3a 	bl	8000588 <HAL_GetTick>
 8001b14:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b16:	e00a      	b.n	8001b2e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b18:	f7fe fd36 	bl	8000588 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e061      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b2e:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <HAL_RCC_ClockConfig+0x260>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f003 020c 	and.w	r2, r3, #12
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d1eb      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b40:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <HAL_RCC_ClockConfig+0x25c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d214      	bcs.n	8001b78 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b4e:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <HAL_RCC_ClockConfig+0x25c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f023 0207 	bic.w	r2, r3, #7
 8001b56:	4906      	ldr	r1, [pc, #24]	; (8001b70 <HAL_RCC_ClockConfig+0x25c>)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5e:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <HAL_RCC_ClockConfig+0x25c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d005      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e040      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x2de>
 8001b70:	40022000 	.word	0x40022000
 8001b74:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d008      	beq.n	8001b96 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b84:	4b1d      	ldr	r3, [pc, #116]	; (8001bfc <HAL_RCC_ClockConfig+0x2e8>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	491a      	ldr	r1, [pc, #104]	; (8001bfc <HAL_RCC_ClockConfig+0x2e8>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0308 	and.w	r3, r3, #8
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d009      	beq.n	8001bb6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ba2:	4b16      	ldr	r3, [pc, #88]	; (8001bfc <HAL_RCC_ClockConfig+0x2e8>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	4912      	ldr	r1, [pc, #72]	; (8001bfc <HAL_RCC_ClockConfig+0x2e8>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001bb6:	f000 f829 	bl	8001c0c <HAL_RCC_GetSysClockFreq>
 8001bba:	4601      	mov	r1, r0
 8001bbc:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <HAL_RCC_ClockConfig+0x2e8>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bc4:	22f0      	movs	r2, #240	; 0xf0
 8001bc6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	fa92 f2a2 	rbit	r2, r2
 8001bce:	60fa      	str	r2, [r7, #12]
  return result;
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	fab2 f282 	clz	r2, r2
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	40d3      	lsrs	r3, r2
 8001bda:	4a09      	ldr	r2, [pc, #36]	; (8001c00 <HAL_RCC_ClockConfig+0x2ec>)
 8001bdc:	5cd3      	ldrb	r3, [r2, r3]
 8001bde:	fa21 f303 	lsr.w	r3, r1, r3
 8001be2:	4a08      	ldr	r2, [pc, #32]	; (8001c04 <HAL_RCC_ClockConfig+0x2f0>)
 8001be4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001be6:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <HAL_RCC_ClockConfig+0x2f4>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7fe fc88 	bl	8000500 <HAL_InitTick>
  
  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3778      	adds	r7, #120	; 0x78
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	0803af40 	.word	0x0803af40
 8001c04:	20000010 	.word	0x20000010
 8001c08:	20000000 	.word	0x20000000

08001c0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b08b      	sub	sp, #44	; 0x2c
 8001c10:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61fb      	str	r3, [r7, #28]
 8001c16:	2300      	movs	r3, #0
 8001c18:	61bb      	str	r3, [r7, #24]
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c1e:	2300      	movs	r3, #0
 8001c20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001c26:	4b29      	ldr	r3, [pc, #164]	; (8001ccc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f003 030c 	and.w	r3, r3, #12
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	d002      	beq.n	8001c3c <HAL_RCC_GetSysClockFreq+0x30>
 8001c36:	2b08      	cmp	r3, #8
 8001c38:	d003      	beq.n	8001c42 <HAL_RCC_GetSysClockFreq+0x36>
 8001c3a:	e03c      	b.n	8001cb6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c3c:	4b24      	ldr	r3, [pc, #144]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c3e:	623b      	str	r3, [r7, #32]
      break;
 8001c40:	e03c      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001c48:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001c4c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	fa92 f2a2 	rbit	r2, r2
 8001c54:	607a      	str	r2, [r7, #4]
  return result;
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	fab2 f282 	clz	r2, r2
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	40d3      	lsrs	r3, r2
 8001c60:	4a1c      	ldr	r2, [pc, #112]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001c62:	5cd3      	ldrb	r3, [r2, r3]
 8001c64:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001c66:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	220f      	movs	r2, #15
 8001c70:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	fa92 f2a2 	rbit	r2, r2
 8001c78:	60fa      	str	r2, [r7, #12]
  return result;
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	fab2 f282 	clz	r2, r2
 8001c80:	b2d2      	uxtb	r2, r2
 8001c82:	40d3      	lsrs	r3, r2
 8001c84:	4a14      	ldr	r2, [pc, #80]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001c86:	5cd3      	ldrb	r3, [r2, r3]
 8001c88:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d008      	beq.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c94:	4a0e      	ldr	r2, [pc, #56]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca4:	e004      	b.n	8001cb0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	4a0c      	ldr	r2, [pc, #48]	; (8001cdc <HAL_RCC_GetSysClockFreq+0xd0>)
 8001caa:	fb02 f303 	mul.w	r3, r2, r3
 8001cae:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb2:	623b      	str	r3, [r7, #32]
      break;
 8001cb4:	e002      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cb6:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001cb8:	623b      	str	r3, [r7, #32]
      break;
 8001cba:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cbc:	6a3b      	ldr	r3, [r7, #32]
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	372c      	adds	r7, #44	; 0x2c
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	007a1200 	.word	0x007a1200
 8001cd4:	0803a658 	.word	0x0803a658
 8001cd8:	0803a668 	.word	0x0803a668
 8001cdc:	003d0900 	.word	0x003d0900

08001ce0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e084      	b.n	8001dfc <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d106      	bne.n	8001d12 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f001 fa13 	bl	8003138 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2202      	movs	r2, #2
 8001d16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d28:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001d32:	d902      	bls.n	8001d3a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001d34:	2300      	movs	r3, #0
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	e002      	b.n	8001d40 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001d3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d3e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001d48:	d007      	beq.n	8001d5a <HAL_SPI_Init+0x7a>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001d52:	d002      	beq.n	8001d5a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d10b      	bne.n	8001d7a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001d6a:	d903      	bls.n	8001d74 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2202      	movs	r2, #2
 8001d70:	631a      	str	r2, [r3, #48]	; 0x30
 8001d72:	e002      	b.n	8001d7a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	431a      	orrs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	ea42 0103 	orr.w	r1, r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	430a      	orrs	r2, r1
 8001db2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	0c1b      	lsrs	r3, r3, #16
 8001dba:	f003 0204 	and.w	r2, r3, #4
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	ea42 0103 	orr.w	r1, r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	69da      	ldr	r2, [r3, #28]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b088      	sub	sp, #32
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	603b      	str	r3, [r7, #0]
 8001e10:	4613      	mov	r3, r2
 8001e12:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e14:	2300      	movs	r3, #0
 8001e16:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d101      	bne.n	8001e26 <HAL_SPI_Transmit+0x22>
 8001e22:	2302      	movs	r3, #2
 8001e24:	e150      	b.n	80020c8 <HAL_SPI_Transmit+0x2c4>
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e2e:	f7fe fbab 	bl	8000588 <HAL_GetTick>
 8001e32:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001e34:	88fb      	ldrh	r3, [r7, #6]
 8001e36:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d002      	beq.n	8001e4a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001e44:	2302      	movs	r3, #2
 8001e46:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e48:	e135      	b.n	80020b6 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d002      	beq.n	8001e56 <HAL_SPI_Transmit+0x52>
 8001e50:	88fb      	ldrh	r3, [r7, #6]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d102      	bne.n	8001e5c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e5a:	e12c      	b.n	80020b6 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2203      	movs	r2, #3
 8001e60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	68ba      	ldr	r2, [r7, #8]
 8001e6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	88fa      	ldrh	r2, [r7, #6]
 8001e74:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	88fa      	ldrh	r2, [r7, #6]
 8001e7a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ea6:	d107      	bne.n	8001eb8 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001eb6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec2:	2b40      	cmp	r3, #64	; 0x40
 8001ec4:	d007      	beq.n	8001ed6 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ed4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001ede:	d94b      	bls.n	8001f78 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d002      	beq.n	8001eee <HAL_SPI_Transmit+0xea>
 8001ee8:	8afb      	ldrh	r3, [r7, #22]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d13e      	bne.n	8001f6c <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef2:	881a      	ldrh	r2, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001efe:	1c9a      	adds	r2, r3, #2
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001f12:	e02b      	b.n	8001f6c <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d112      	bne.n	8001f48 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f26:	881a      	ldrh	r2, [r3, #0]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f32:	1c9a      	adds	r2, r3, #2
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001f46:	e011      	b.n	8001f6c <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f48:	f7fe fb1e 	bl	8000588 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d803      	bhi.n	8001f60 <HAL_SPI_Transmit+0x15c>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f5e:	d102      	bne.n	8001f66 <HAL_SPI_Transmit+0x162>
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d102      	bne.n	8001f6c <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001f6a:	e0a4      	b.n	80020b6 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1ce      	bne.n	8001f14 <HAL_SPI_Transmit+0x110>
 8001f76:	e07c      	b.n	8002072 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d002      	beq.n	8001f86 <HAL_SPI_Transmit+0x182>
 8001f80:	8afb      	ldrh	r3, [r7, #22]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d170      	bne.n	8002068 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d912      	bls.n	8001fb6 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f94:	881a      	ldrh	r2, [r3, #0]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa0:	1c9a      	adds	r2, r3, #2
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	3b02      	subs	r3, #2
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001fb4:	e058      	b.n	8002068 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	330c      	adds	r3, #12
 8001fc0:	7812      	ldrb	r2, [r2, #0]
 8001fc2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc8:	1c5a      	adds	r2, r3, #1
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001fdc:	e044      	b.n	8002068 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d12b      	bne.n	8002044 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d912      	bls.n	800201c <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ffa:	881a      	ldrh	r2, [r3, #0]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002006:	1c9a      	adds	r2, r3, #2
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002010:	b29b      	uxth	r3, r3
 8002012:	3b02      	subs	r3, #2
 8002014:	b29a      	uxth	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	87da      	strh	r2, [r3, #62]	; 0x3e
 800201a:	e025      	b.n	8002068 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	330c      	adds	r3, #12
 8002026:	7812      	ldrb	r2, [r2, #0]
 8002028:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800202e:	1c5a      	adds	r2, r3, #1
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002038:	b29b      	uxth	r3, r3
 800203a:	3b01      	subs	r3, #1
 800203c:	b29a      	uxth	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002042:	e011      	b.n	8002068 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002044:	f7fe faa0 	bl	8000588 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	429a      	cmp	r2, r3
 8002052:	d803      	bhi.n	800205c <HAL_SPI_Transmit+0x258>
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800205a:	d102      	bne.n	8002062 <HAL_SPI_Transmit+0x25e>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d102      	bne.n	8002068 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002066:	e026      	b.n	80020b6 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800206c:	b29b      	uxth	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1b5      	bne.n	8001fde <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	6839      	ldr	r1, [r7, #0]
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f000 f901 	bl	800227e <SPI_EndRxTxTransaction>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d002      	beq.n	8002088 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2220      	movs	r2, #32
 8002086:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d10a      	bne.n	80020a6 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002090:	2300      	movs	r3, #0
 8002092:	613b      	str	r3, [r7, #16]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	613b      	str	r3, [r7, #16]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	613b      	str	r3, [r7, #16]
 80020a4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d002      	beq.n	80020b4 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	77fb      	strb	r3, [r7, #31]
 80020b2:	e000      	b.n	80020b6 <HAL_SPI_Transmit+0x2b2>
  }

error:
 80020b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80020c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3720      	adds	r7, #32
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	603b      	str	r3, [r7, #0]
 80020dc:	4613      	mov	r3, r2
 80020de:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020e0:	e04c      	b.n	800217c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e8:	d048      	beq.n	800217c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80020ea:	f7fe fa4d 	bl	8000588 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d902      	bls.n	8002100 <SPI_WaitFlagStateUntilTimeout+0x30>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d13d      	bne.n	800217c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800210e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002118:	d111      	bne.n	800213e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002122:	d004      	beq.n	800212e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800212c:	d107      	bne.n	800213e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800213c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002142:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002146:	d10f      	bne.n	8002168 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002166:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e00f      	b.n	800219c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	4013      	ands	r3, r2
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	429a      	cmp	r2, r3
 800218a:	bf0c      	ite	eq
 800218c:	2301      	moveq	r3, #1
 800218e:	2300      	movne	r3, #0
 8002190:	b2db      	uxtb	r3, r3
 8002192:	461a      	mov	r2, r3
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	429a      	cmp	r2, r3
 8002198:	d1a3      	bne.n	80020e2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3710      	adds	r7, #16
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
 80021b0:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80021b2:	e057      	b.n	8002264 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80021ba:	d106      	bne.n	80021ca <SPI_WaitFifoStateUntilTimeout+0x26>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d103      	bne.n	80021ca <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	330c      	adds	r3, #12
 80021c8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d0:	d048      	beq.n	8002264 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80021d2:	f7fe f9d9 	bl	8000588 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d902      	bls.n	80021e8 <SPI_WaitFifoStateUntilTimeout+0x44>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d13d      	bne.n	8002264 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80021f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002200:	d111      	bne.n	8002226 <SPI_WaitFifoStateUntilTimeout+0x82>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800220a:	d004      	beq.n	8002216 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002214:	d107      	bne.n	8002226 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002224:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800222e:	d10f      	bne.n	8002250 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800224e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e008      	b.n	8002276 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	4013      	ands	r3, r2
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	429a      	cmp	r2, r3
 8002272:	d19f      	bne.n	80021b4 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b086      	sub	sp, #24
 8002282:	af02      	add	r7, sp, #8
 8002284:	60f8      	str	r0, [r7, #12]
 8002286:	60b9      	str	r1, [r7, #8]
 8002288:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	9300      	str	r3, [sp, #0]
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	2200      	movs	r2, #0
 8002292:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f7ff ff84 	bl	80021a4 <SPI_WaitFifoStateUntilTimeout>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d007      	beq.n	80022b2 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a6:	f043 0220 	orr.w	r2, r3, #32
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e027      	b.n	8002302 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	2200      	movs	r2, #0
 80022ba:	2180      	movs	r1, #128	; 0x80
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f7ff ff07 	bl	80020d0 <SPI_WaitFlagStateUntilTimeout>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d007      	beq.n	80022d8 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022cc:	f043 0220 	orr.w	r2, r3, #32
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e014      	b.n	8002302 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	2200      	movs	r2, #0
 80022e0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f7ff ff5d 	bl	80021a4 <SPI_WaitFifoStateUntilTimeout>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d007      	beq.n	8002300 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022f4:	f043 0220 	orr.w	r2, r3, #32
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e000      	b.n	8002302 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
static SPI_HandleTypeDef lcd_spi;

void ILI9341_Init() {
 800230a:	b580      	push	{r7, lr}
 800230c:	af00      	add	r7, sp, #0
	ILI9341_SPI_Init();
 800230e:	f000 f901 	bl	8002514 <ILI9341_SPI_Init>

	/* Reset The Screen */
	ILI9341_Reset();
 8002312:	f000 f949 	bl	80025a8 <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 8002316:	2001      	movs	r0, #1
 8002318:	f000 fb96 	bl	8002a48 <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 800231c:	20cb      	movs	r0, #203	; 0xcb
 800231e:	f000 fb93 	bl	8002a48 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 8002322:	2039      	movs	r0, #57	; 0x39
 8002324:	f000 fb9f 	bl	8002a66 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 8002328:	202c      	movs	r0, #44	; 0x2c
 800232a:	f000 fb9c 	bl	8002a66 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 800232e:	2000      	movs	r0, #0
 8002330:	f000 fb99 	bl	8002a66 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 8002334:	2034      	movs	r0, #52	; 0x34
 8002336:	f000 fb96 	bl	8002a66 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 800233a:	2002      	movs	r0, #2
 800233c:	f000 fb93 	bl	8002a66 <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 8002340:	20cf      	movs	r0, #207	; 0xcf
 8002342:	f000 fb81 	bl	8002a48 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8002346:	2000      	movs	r0, #0
 8002348:	f000 fb8d 	bl	8002a66 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800234c:	20c1      	movs	r0, #193	; 0xc1
 800234e:	f000 fb8a 	bl	8002a66 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 8002352:	2030      	movs	r0, #48	; 0x30
 8002354:	f000 fb87 	bl	8002a66 <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 8002358:	20e8      	movs	r0, #232	; 0xe8
 800235a:	f000 fb75 	bl	8002a48 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 800235e:	2085      	movs	r0, #133	; 0x85
 8002360:	f000 fb81 	bl	8002a66 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8002364:	2000      	movs	r0, #0
 8002366:	f000 fb7e 	bl	8002a66 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 800236a:	2078      	movs	r0, #120	; 0x78
 800236c:	f000 fb7b 	bl	8002a66 <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 8002370:	20ea      	movs	r0, #234	; 0xea
 8002372:	f000 fb69 	bl	8002a48 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8002376:	2000      	movs	r0, #0
 8002378:	f000 fb75 	bl	8002a66 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 800237c:	2000      	movs	r0, #0
 800237e:	f000 fb72 	bl	8002a66 <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 8002382:	20ed      	movs	r0, #237	; 0xed
 8002384:	f000 fb60 	bl	8002a48 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 8002388:	2064      	movs	r0, #100	; 0x64
 800238a:	f000 fb6c 	bl	8002a66 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 800238e:	2003      	movs	r0, #3
 8002390:	f000 fb69 	bl	8002a66 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 8002394:	2012      	movs	r0, #18
 8002396:	f000 fb66 	bl	8002a66 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 800239a:	2081      	movs	r0, #129	; 0x81
 800239c:	f000 fb63 	bl	8002a66 <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 80023a0:	20f7      	movs	r0, #247	; 0xf7
 80023a2:	f000 fb51 	bl	8002a48 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 80023a6:	2020      	movs	r0, #32
 80023a8:	f000 fb5d 	bl	8002a66 <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 80023ac:	20c0      	movs	r0, #192	; 0xc0
 80023ae:	f000 fb4b 	bl	8002a48 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 80023b2:	2010      	movs	r0, #16
 80023b4:	f000 fb57 	bl	8002a66 <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 80023b8:	20c1      	movs	r0, #193	; 0xc1
 80023ba:	f000 fb45 	bl	8002a48 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 80023be:	2010      	movs	r0, #16
 80023c0:	f000 fb51 	bl	8002a66 <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 80023c4:	20c5      	movs	r0, #197	; 0xc5
 80023c6:	f000 fb3f 	bl	8002a48 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 80023ca:	203e      	movs	r0, #62	; 0x3e
 80023cc:	f000 fb4b 	bl	8002a66 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 80023d0:	2028      	movs	r0, #40	; 0x28
 80023d2:	f000 fb48 	bl	8002a66 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 80023d6:	20c7      	movs	r0, #199	; 0xc7
 80023d8:	f000 fb36 	bl	8002a48 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 80023dc:	2086      	movs	r0, #134	; 0x86
 80023de:	f000 fb42 	bl	8002a66 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 80023e2:	2036      	movs	r0, #54	; 0x36
 80023e4:	f000 fb30 	bl	8002a48 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 80023e8:	2048      	movs	r0, #72	; 0x48
 80023ea:	f000 fb3c 	bl	8002a66 <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 80023ee:	203a      	movs	r0, #58	; 0x3a
 80023f0:	f000 fb2a 	bl	8002a48 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 80023f4:	2055      	movs	r0, #85	; 0x55
 80023f6:	f000 fb36 	bl	8002a66 <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 80023fa:	20b1      	movs	r0, #177	; 0xb1
 80023fc:	f000 fb24 	bl	8002a48 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8002400:	2000      	movs	r0, #0
 8002402:	f000 fb30 	bl	8002a66 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 8002406:	2018      	movs	r0, #24
 8002408:	f000 fb2d 	bl	8002a66 <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 800240c:	20b6      	movs	r0, #182	; 0xb6
 800240e:	f000 fb1b 	bl	8002a48 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 8002412:	2008      	movs	r0, #8
 8002414:	f000 fb27 	bl	8002a66 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 8002418:	2082      	movs	r0, #130	; 0x82
 800241a:	f000 fb24 	bl	8002a66 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 800241e:	2027      	movs	r0, #39	; 0x27
 8002420:	f000 fb21 	bl	8002a66 <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 8002424:	20f2      	movs	r0, #242	; 0xf2
 8002426:	f000 fb0f 	bl	8002a48 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 800242a:	2000      	movs	r0, #0
 800242c:	f000 fb1b 	bl	8002a66 <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 8002430:	2026      	movs	r0, #38	; 0x26
 8002432:	f000 fb09 	bl	8002a48 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 8002436:	2001      	movs	r0, #1
 8002438:	f000 fb15 	bl	8002a66 <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 800243c:	20e0      	movs	r0, #224	; 0xe0
 800243e:	f000 fb03 	bl	8002a48 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 8002442:	200f      	movs	r0, #15
 8002444:	f000 fb0f 	bl	8002a66 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8002448:	2031      	movs	r0, #49	; 0x31
 800244a:	f000 fb0c 	bl	8002a66 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 800244e:	202b      	movs	r0, #43	; 0x2b
 8002450:	f000 fb09 	bl	8002a66 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 8002454:	200c      	movs	r0, #12
 8002456:	f000 fb06 	bl	8002a66 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 800245a:	200e      	movs	r0, #14
 800245c:	f000 fb03 	bl	8002a66 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 8002460:	2008      	movs	r0, #8
 8002462:	f000 fb00 	bl	8002a66 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 8002466:	204e      	movs	r0, #78	; 0x4e
 8002468:	f000 fafd 	bl	8002a66 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 800246c:	20f1      	movs	r0, #241	; 0xf1
 800246e:	f000 fafa 	bl	8002a66 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 8002472:	2037      	movs	r0, #55	; 0x37
 8002474:	f000 faf7 	bl	8002a66 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 8002478:	2007      	movs	r0, #7
 800247a:	f000 faf4 	bl	8002a66 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 800247e:	2010      	movs	r0, #16
 8002480:	f000 faf1 	bl	8002a66 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8002484:	2003      	movs	r0, #3
 8002486:	f000 faee 	bl	8002a66 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 800248a:	200e      	movs	r0, #14
 800248c:	f000 faeb 	bl	8002a66 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 8002490:	2009      	movs	r0, #9
 8002492:	f000 fae8 	bl	8002a66 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8002496:	2000      	movs	r0, #0
 8002498:	f000 fae5 	bl	8002a66 <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 800249c:	20e1      	movs	r0, #225	; 0xe1
 800249e:	f000 fad3 	bl	8002a48 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80024a2:	2000      	movs	r0, #0
 80024a4:	f000 fadf 	bl	8002a66 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 80024a8:	200e      	movs	r0, #14
 80024aa:	f000 fadc 	bl	8002a66 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 80024ae:	2014      	movs	r0, #20
 80024b0:	f000 fad9 	bl	8002a66 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 80024b4:	2003      	movs	r0, #3
 80024b6:	f000 fad6 	bl	8002a66 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 80024ba:	2011      	movs	r0, #17
 80024bc:	f000 fad3 	bl	8002a66 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 80024c0:	2007      	movs	r0, #7
 80024c2:	f000 fad0 	bl	8002a66 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80024c6:	2031      	movs	r0, #49	; 0x31
 80024c8:	f000 facd 	bl	8002a66 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 80024cc:	20c1      	movs	r0, #193	; 0xc1
 80024ce:	f000 faca 	bl	8002a66 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 80024d2:	2048      	movs	r0, #72	; 0x48
 80024d4:	f000 fac7 	bl	8002a66 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 80024d8:	2008      	movs	r0, #8
 80024da:	f000 fac4 	bl	8002a66 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80024de:	200f      	movs	r0, #15
 80024e0:	f000 fac1 	bl	8002a66 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 80024e4:	200c      	movs	r0, #12
 80024e6:	f000 fabe 	bl	8002a66 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80024ea:	2031      	movs	r0, #49	; 0x31
 80024ec:	f000 fabb 	bl	8002a66 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 80024f0:	2036      	movs	r0, #54	; 0x36
 80024f2:	f000 fab8 	bl	8002a66 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80024f6:	200f      	movs	r0, #15
 80024f8:	f000 fab5 	bl	8002a66 <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 80024fc:	2011      	movs	r0, #17
 80024fe:	f000 faa3 	bl	8002a48 <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 8002502:	2029      	movs	r0, #41	; 0x29
 8002504:	f000 faa0 	bl	8002a48 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 8002508:	202c      	movs	r0, #44	; 0x2c
 800250a:	f000 faac 	bl	8002a66 <ILI9341_Send_Data>
}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}
	...

08002514 <ILI9341_SPI_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void ILI9341_SPI_Init() {
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
	lcd_spi.Instance 				= SPI1;
 8002518:	4b18      	ldr	r3, [pc, #96]	; (800257c <ILI9341_SPI_Init+0x68>)
 800251a:	4a19      	ldr	r2, [pc, #100]	; (8002580 <ILI9341_SPI_Init+0x6c>)
 800251c:	601a      	str	r2, [r3, #0]
	lcd_spi.Init.Mode 				= SPI_MODE_MASTER;
 800251e:	4b17      	ldr	r3, [pc, #92]	; (800257c <ILI9341_SPI_Init+0x68>)
 8002520:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002524:	605a      	str	r2, [r3, #4]
	lcd_spi.Init.Direction 			= SPI_DIRECTION_2LINES;
 8002526:	4b15      	ldr	r3, [pc, #84]	; (800257c <ILI9341_SPI_Init+0x68>)
 8002528:	2200      	movs	r2, #0
 800252a:	609a      	str	r2, [r3, #8]
	lcd_spi.Init.DataSize 			= SPI_DATASIZE_8BIT;
 800252c:	4b13      	ldr	r3, [pc, #76]	; (800257c <ILI9341_SPI_Init+0x68>)
 800252e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002532:	60da      	str	r2, [r3, #12]
	lcd_spi.Init.CLKPolarity 		= SPI_POLARITY_LOW;
 8002534:	4b11      	ldr	r3, [pc, #68]	; (800257c <ILI9341_SPI_Init+0x68>)
 8002536:	2200      	movs	r2, #0
 8002538:	611a      	str	r2, [r3, #16]
	lcd_spi.Init.CLKPhase 			= SPI_PHASE_1EDGE;
 800253a:	4b10      	ldr	r3, [pc, #64]	; (800257c <ILI9341_SPI_Init+0x68>)
 800253c:	2200      	movs	r2, #0
 800253e:	615a      	str	r2, [r3, #20]
	lcd_spi.Init.NSS 				= SPI_NSS_SOFT;
 8002540:	4b0e      	ldr	r3, [pc, #56]	; (800257c <ILI9341_SPI_Init+0x68>)
 8002542:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002546:	619a      	str	r2, [r3, #24]
	lcd_spi.Init.BaudRatePrescaler 	= SPI_BAUDRATEPRESCALER_2;
 8002548:	4b0c      	ldr	r3, [pc, #48]	; (800257c <ILI9341_SPI_Init+0x68>)
 800254a:	2200      	movs	r2, #0
 800254c:	61da      	str	r2, [r3, #28]
	lcd_spi.Init.FirstBit 			= SPI_FIRSTBIT_MSB;
 800254e:	4b0b      	ldr	r3, [pc, #44]	; (800257c <ILI9341_SPI_Init+0x68>)
 8002550:	2200      	movs	r2, #0
 8002552:	621a      	str	r2, [r3, #32]
	lcd_spi.Init.TIMode 			= SPI_TIMODE_DISABLE;
 8002554:	4b09      	ldr	r3, [pc, #36]	; (800257c <ILI9341_SPI_Init+0x68>)
 8002556:	2200      	movs	r2, #0
 8002558:	625a      	str	r2, [r3, #36]	; 0x24
	lcd_spi.Init.CRCCalculation 	= SPI_CRCCALCULATION_DISABLE;
 800255a:	4b08      	ldr	r3, [pc, #32]	; (800257c <ILI9341_SPI_Init+0x68>)
 800255c:	2200      	movs	r2, #0
 800255e:	629a      	str	r2, [r3, #40]	; 0x28
	lcd_spi.Init.CRCPolynomial 		= 10;
 8002560:	4b06      	ldr	r3, [pc, #24]	; (800257c <ILI9341_SPI_Init+0x68>)
 8002562:	220a      	movs	r2, #10
 8002564:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&lcd_spi) != HAL_OK) {
 8002566:	4805      	ldr	r0, [pc, #20]	; (800257c <ILI9341_SPI_Init+0x68>)
 8002568:	f7ff fbba 	bl	8001ce0 <HAL_SPI_Init>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <ILI9341_SPI_Init+0x62>
		Error_Handler();
 8002572:	f000 fdb5 	bl	80030e0 <Error_Handler>
	}
}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20000058 	.word	0x20000058
 8002580:	40013000 	.word	0x40013000

08002584 <ILI9341_SPI_Send>:

void ILI9341_SPI_Send(unsigned char data)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&lcd_spi, &data, 1, 1);
 800258e:	1df9      	adds	r1, r7, #7
 8002590:	2301      	movs	r3, #1
 8002592:	2201      	movs	r2, #1
 8002594:	4803      	ldr	r0, [pc, #12]	; (80025a4 <ILI9341_SPI_Send+0x20>)
 8002596:	f7ff fc35 	bl	8001e04 <HAL_SPI_Transmit>
}
 800259a:	bf00      	nop
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20000058 	.word	0x20000058

080025a8 <ILI9341_Reset>:
void ILI9341_SPI_Send_Multiple(unsigned char data, int size)
{
	HAL_SPI_Transmit(&lcd_spi, &data, size, 10);
}

void ILI9341_Reset() {
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
	RESET_ON;
 80025ac:	2200      	movs	r2, #0
 80025ae:	2101      	movs	r1, #1
 80025b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025b4:	f7fe fa8e 	bl	8000ad4 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80025b8:	2032      	movs	r0, #50	; 0x32
 80025ba:	f7fd fff1 	bl	80005a0 <HAL_Delay>
	RESET_OFF;
 80025be:	2201      	movs	r2, #1
 80025c0:	2101      	movs	r1, #1
 80025c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025c6:	f7fe fa85 	bl	8000ad4 <HAL_GPIO_WritePin>
	CS_ON;
 80025ca:	2200      	movs	r2, #0
 80025cc:	2104      	movs	r1, #4
 80025ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025d2:	f7fe fa7f 	bl	8000ad4 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80025d6:	2032      	movs	r0, #50	; 0x32
 80025d8:	f7fd ffe2 	bl	80005a0 <HAL_Delay>
	ILI9341_Send_Command(0x01);
 80025dc:	2001      	movs	r0, #1
 80025de:	f000 fa33 	bl	8002a48 <ILI9341_Send_Command>
	CS_OFF;
 80025e2:	2201      	movs	r2, #1
 80025e4:	2104      	movs	r1, #4
 80025e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025ea:	f7fe fa73 	bl	8000ad4 <HAL_GPIO_WritePin>
}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <ILI9341_Set_Rotation>:

void ILI9341_Set_Rotation(unsigned char rotation) {
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	71fb      	strb	r3, [r7, #7]
	ILI9341_Send_Command(0x36);
 80025fe:	2036      	movs	r0, #54	; 0x36
 8002600:	f000 fa22 	bl	8002a48 <ILI9341_Send_Command>
	switch (rotation) {
 8002604:	79fb      	ldrb	r3, [r7, #7]
 8002606:	2b03      	cmp	r3, #3
 8002608:	d836      	bhi.n	8002678 <ILI9341_Set_Rotation+0x84>
 800260a:	a201      	add	r2, pc, #4	; (adr r2, 8002610 <ILI9341_Set_Rotation+0x1c>)
 800260c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002610:	08002621 	.word	0x08002621
 8002614:	08002637 	.word	0x08002637
 8002618:	0800264d 	.word	0x0800264d
 800261c:	08002663 	.word	0x08002663
	case 0:
		ILI9341_Send_Data(0x48);
 8002620:	2048      	movs	r0, #72	; 0x48
 8002622:	f000 fa20 	bl	8002a66 <ILI9341_Send_Data>
		X_SIZE = 240;
 8002626:	4b16      	ldr	r3, [pc, #88]	; (8002680 <ILI9341_Set_Rotation+0x8c>)
 8002628:	22f0      	movs	r2, #240	; 0xf0
 800262a:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 800262c:	4b15      	ldr	r3, [pc, #84]	; (8002684 <ILI9341_Set_Rotation+0x90>)
 800262e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002632:	601a      	str	r2, [r3, #0]
		break;
 8002634:	e020      	b.n	8002678 <ILI9341_Set_Rotation+0x84>
	case 1:
		ILI9341_Send_Data(0x28);
 8002636:	2028      	movs	r0, #40	; 0x28
 8002638:	f000 fa15 	bl	8002a66 <ILI9341_Send_Data>
		X_SIZE = 320;
 800263c:	4b10      	ldr	r3, [pc, #64]	; (8002680 <ILI9341_Set_Rotation+0x8c>)
 800263e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002642:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 8002644:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <ILI9341_Set_Rotation+0x90>)
 8002646:	22f0      	movs	r2, #240	; 0xf0
 8002648:	601a      	str	r2, [r3, #0]
		break;
 800264a:	e015      	b.n	8002678 <ILI9341_Set_Rotation+0x84>
	case 2:
		ILI9341_Send_Data(0x88);
 800264c:	2088      	movs	r0, #136	; 0x88
 800264e:	f000 fa0a 	bl	8002a66 <ILI9341_Send_Data>
		X_SIZE = 240;
 8002652:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <ILI9341_Set_Rotation+0x8c>)
 8002654:	22f0      	movs	r2, #240	; 0xf0
 8002656:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 8002658:	4b0a      	ldr	r3, [pc, #40]	; (8002684 <ILI9341_Set_Rotation+0x90>)
 800265a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800265e:	601a      	str	r2, [r3, #0]
		break;
 8002660:	e00a      	b.n	8002678 <ILI9341_Set_Rotation+0x84>
	case 3:
		ILI9341_Send_Data(0xE8);
 8002662:	20e8      	movs	r0, #232	; 0xe8
 8002664:	f000 f9ff 	bl	8002a66 <ILI9341_Send_Data>
		X_SIZE = 320;
 8002668:	4b05      	ldr	r3, [pc, #20]	; (8002680 <ILI9341_Set_Rotation+0x8c>)
 800266a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800266e:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 8002670:	4b04      	ldr	r3, [pc, #16]	; (8002684 <ILI9341_Set_Rotation+0x90>)
 8002672:	22f0      	movs	r2, #240	; 0xf0
 8002674:	601a      	str	r2, [r3, #0]
		break;
 8002676:	bf00      	nop
	}
}
 8002678:	bf00      	nop
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	20000008 	.word	0x20000008
 8002684:	2000000c 	.word	0x2000000c

08002688 <ILI9341_SPI_Send_32>:

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	6039      	str	r1, [r7, #0]
 8002692:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 8002694:	2200      	movs	r2, #0
 8002696:	2104      	movs	r1, #4
 8002698:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800269c:	f7fe fa1a 	bl	8000ad4 <HAL_GPIO_WritePin>
	DC_COMMAND;
 80026a0:	2200      	movs	r2, #0
 80026a2:	2102      	movs	r1, #2
 80026a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026a8:	f7fe fa14 	bl	8000ad4 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 80026ac:	79fb      	ldrb	r3, [r7, #7]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff ff68 	bl	8002584 <ILI9341_SPI_Send>

	DC_DATA;
 80026b4:	2201      	movs	r2, #1
 80026b6:	2102      	movs	r1, #2
 80026b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026bc:	f7fe fa0a 	bl	8000ad4 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	0e1b      	lsrs	r3, r3, #24
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff ff5c 	bl	8002584 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	0c1b      	lsrs	r3, r3, #16
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff ff56 	bl	8002584 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	0a1b      	lsrs	r3, r3, #8
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff ff50 	bl	8002584 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff ff4b 	bl	8002584 <ILI9341_SPI_Send>

}
 80026ee:	bf00      	nop
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b086      	sub	sp, #24
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	60f8      	str	r0, [r7, #12]
 80026fe:	60b9      	str	r1, [r7, #8]
 8002700:	607a      	str	r2, [r7, #4]
 8002702:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	041b      	lsls	r3, r3, #16
 800270c:	617b      	str	r3, [r7, #20]
	t |= x2;
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4313      	orrs	r3, r2
 8002714:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 8002716:	6979      	ldr	r1, [r7, #20]
 8002718:	202a      	movs	r0, #42	; 0x2a
 800271a:	f7ff ffb5 	bl	8002688 <ILI9341_SPI_Send_32>
	t = y1;
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	041b      	lsls	r3, r3, #16
 8002726:	617b      	str	r3, [r7, #20]
	t |= y2;
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	4313      	orrs	r3, r2
 800272e:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 8002730:	6979      	ldr	r1, [r7, #20]
 8002732:	202b      	movs	r0, #43	; 0x2b
 8002734:	f7ff ffa8 	bl	8002688 <ILI9341_SPI_Send_32>
}
 8002738:	bf00      	nop
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <ILI9341_Fill_Screen>:

void ILI9341_Fill_Screen(unsigned int color)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
	ILI9341_Set_Address(0, 0, X_SIZE-1, Y_SIZE-1);
 8002748:	4b0d      	ldr	r3, [pc, #52]	; (8002780 <ILI9341_Fill_Screen+0x40>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	1e5a      	subs	r2, r3, #1
 800274e:	4b0d      	ldr	r3, [pc, #52]	; (8002784 <ILI9341_Fill_Screen+0x44>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	3b01      	subs	r3, #1
 8002754:	2100      	movs	r1, #0
 8002756:	2000      	movs	r0, #0
 8002758:	f7ff ffcd 	bl	80026f6 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)X_SIZE * (long)Y_SIZE);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	b29a      	uxth	r2, r3
 8002760:	4b07      	ldr	r3, [pc, #28]	; (8002780 <ILI9341_Fill_Screen+0x40>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4619      	mov	r1, r3
 8002766:	4b07      	ldr	r3, [pc, #28]	; (8002784 <ILI9341_Fill_Screen+0x44>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	fb03 f301 	mul.w	r3, r3, r1
 800276e:	4619      	mov	r1, r3
 8002770:	4610      	mov	r0, r2
 8002772:	f000 f987 	bl	8002a84 <ILI9341_Send_Burst>
}
 8002776:	bf00      	nop
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	20000008 	.word	0x20000008
 8002784:	2000000c 	.word	0x2000000c

08002788 <ILI9341_Draw_Pixel>:

void ILI9341_Draw_Pixel(int x, int y, unsigned int color)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
	if((x < 0) || (y < 0) || (x >= X_SIZE) || (y >= Y_SIZE))
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2b00      	cmp	r3, #0
 8002798:	db31      	blt.n	80027fe <ILI9341_Draw_Pixel+0x76>
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	2b00      	cmp	r3, #0
 800279e:	db2e      	blt.n	80027fe <ILI9341_Draw_Pixel+0x76>
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	4b19      	ldr	r3, [pc, #100]	; (8002808 <ILI9341_Draw_Pixel+0x80>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d229      	bcs.n	80027fe <ILI9341_Draw_Pixel+0x76>
 80027aa:	68ba      	ldr	r2, [r7, #8]
 80027ac:	4b17      	ldr	r3, [pc, #92]	; (800280c <ILI9341_Draw_Pixel+0x84>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d224      	bcs.n	80027fe <ILI9341_Draw_Pixel+0x76>
	{
		return;
	}
	ILI9341_Set_Address(x, y, X_SIZE-1, Y_SIZE-1);
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	68b9      	ldr	r1, [r7, #8]
 80027b8:	4b13      	ldr	r3, [pc, #76]	; (8002808 <ILI9341_Draw_Pixel+0x80>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	1e5a      	subs	r2, r3, #1
 80027be:	4b13      	ldr	r3, [pc, #76]	; (800280c <ILI9341_Draw_Pixel+0x84>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	f7ff ff97 	bl	80026f6 <ILI9341_Set_Address>
	DC_COMMAND;
 80027c8:	2200      	movs	r2, #0
 80027ca:	2102      	movs	r1, #2
 80027cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027d0:	f7fe f980 	bl	8000ad4 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 80027d4:	202c      	movs	r0, #44	; 0x2c
 80027d6:	f7ff fed5 	bl	8002584 <ILI9341_SPI_Send>
	DC_DATA;
 80027da:	2201      	movs	r2, #1
 80027dc:	2102      	movs	r1, #2
 80027de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027e2:	f7fe f977 	bl	8000ad4 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(color>>8);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	0a1b      	lsrs	r3, r3, #8
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff fec9 	bl	8002584 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(color);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff fec4 	bl	8002584 <ILI9341_SPI_Send>
 80027fc:	e000      	b.n	8002800 <ILI9341_Draw_Pixel+0x78>
		return;
 80027fe:	bf00      	nop
}
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	20000008 	.word	0x20000008
 800280c:	2000000c 	.word	0x2000000c

08002810 <ILI9341_Draw_Empty_Rectangle>:
	ILI9341_Set_Address(x1, y1, x2, y2);
	ILI9341_Send_Burst(color, (long)(x2-x1+1) * (long)(y2-y1+1));
}

void ILI9341_Draw_Empty_Rectangle(unsigned int color,unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af02      	add	r7, sp, #8
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
 800281c:	603b      	str	r3, [r7, #0]
	ILI9341_Draw_Line(color, x1, y1, x2, y1);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	9300      	str	r3, [sp, #0]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	68b9      	ldr	r1, [r7, #8]
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f000 f81c 	bl	8002866 <ILI9341_Draw_Line>
	ILI9341_Draw_Line(color, x2, y1, x2, y2);
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6839      	ldr	r1, [r7, #0]
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f000 f814 	bl	8002866 <ILI9341_Draw_Line>
	ILI9341_Draw_Line(color, x1, y1, x1, y2);
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	68b9      	ldr	r1, [r7, #8]
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f000 f80c 	bl	8002866 <ILI9341_Draw_Line>
	ILI9341_Draw_Line(color, x1, y2, x2, y2);
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	68b9      	ldr	r1, [r7, #8]
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f000 f804 	bl	8002866 <ILI9341_Draw_Line>
}
 800285e:	bf00      	nop
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <ILI9341_Draw_Line>:

void ILI9341_Draw_Line(unsigned int color, unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b08c      	sub	sp, #48	; 0x30
 800286a:	af00      	add	r7, sp, #0
 800286c:	60f8      	str	r0, [r7, #12]
 800286e:	60b9      	str	r1, [r7, #8]
 8002870:	607a      	str	r2, [r7, #4]
 8002872:	603b      	str	r3, [r7, #0]
	int steep = abs(y2-y1) > abs(x2-x1);
 8002874:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800287e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002882:	6839      	ldr	r1, [r7, #0]
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	1acb      	subs	r3, r1, r3
 8002888:	2b00      	cmp	r3, #0
 800288a:	bfb8      	it	lt
 800288c:	425b      	neglt	r3, r3
 800288e:	429a      	cmp	r2, r3
 8002890:	bfcc      	ite	gt
 8002892:	2301      	movgt	r3, #1
 8002894:	2300      	movle	r3, #0
 8002896:	b2db      	uxtb	r3, r3
 8002898:	627b      	str	r3, [r7, #36]	; 0x24

	if (steep)
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00d      	beq.n	80028bc <ILI9341_Draw_Line+0x56>
	{
		swap(x1,y1);
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	847b      	strh	r3, [r7, #34]	; 0x22
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	60bb      	str	r3, [r7, #8]
 80028a8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80028ac:	607b      	str	r3, [r7, #4]
		swap(x2,y2);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	843b      	strh	r3, [r7, #32]
 80028b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b4:	603b      	str	r3, [r7, #0]
 80028b6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80028ba:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	if(x1>x2)
 80028bc:	68ba      	ldr	r2, [r7, #8]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d90d      	bls.n	80028e0 <ILI9341_Draw_Line+0x7a>
	{
		swap(x1,x2);
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	83fb      	strh	r3, [r7, #30]
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	60bb      	str	r3, [r7, #8]
 80028cc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80028d0:	603b      	str	r3, [r7, #0]
		swap(y1,y2);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	83bb      	strh	r3, [r7, #28]
 80028d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d8:	607b      	str	r3, [r7, #4]
 80028da:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80028de:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	int dx,dy;
	dx = (x2 - x1);
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	61bb      	str	r3, [r7, #24]
	dy = abs(y2 - y1);
 80028e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	bfb8      	it	lt
 80028f2:	425b      	neglt	r3, r3
 80028f4:	617b      	str	r3, [r7, #20]
	int err = dx / 2;
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	0fda      	lsrs	r2, r3, #31
 80028fa:	4413      	add	r3, r2
 80028fc:	105b      	asrs	r3, r3, #1
 80028fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	int ystep;
	if(y1 < y2)
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002904:	429a      	cmp	r2, r3
 8002906:	d202      	bcs.n	800290e <ILI9341_Draw_Line+0xa8>
	{
		ystep = 1;
 8002908:	2301      	movs	r3, #1
 800290a:	62bb      	str	r3, [r7, #40]	; 0x28
 800290c:	e023      	b.n	8002956 <ILI9341_Draw_Line+0xf0>
	}
	else
	{
		ystep = -1;
 800290e:	f04f 33ff 	mov.w	r3, #4294967295
 8002912:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	for (; x1 <= x2; x1++)
 8002914:	e01f      	b.n	8002956 <ILI9341_Draw_Line+0xf0>
	{
		if (steep)
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	2b00      	cmp	r3, #0
 800291a:	d006      	beq.n	800292a <ILI9341_Draw_Line+0xc4>
		{
			ILI9341_Draw_Pixel(y1, x1, color);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68b9      	ldr	r1, [r7, #8]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff ff30 	bl	8002788 <ILI9341_Draw_Pixel>
 8002928:	e005      	b.n	8002936 <ILI9341_Draw_Line+0xd0>
		}
		else
		{
			ILI9341_Draw_Pixel(x1, y1, color);
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff ff29 	bl	8002788 <ILI9341_Draw_Pixel>
		}
		err -= dy;
 8002936:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (err < 0)
 800293e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002940:	2b00      	cmp	r3, #0
 8002942:	da05      	bge.n	8002950 <ILI9341_Draw_Line+0xea>
		{
			y1 += ystep;
 8002944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	4413      	add	r3, r2
 800294a:	607b      	str	r3, [r7, #4]
			err = dx;
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (; x1 <= x2; x1++)
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	3301      	adds	r3, #1
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	429a      	cmp	r2, r3
 800295c:	d9db      	bls.n	8002916 <ILI9341_Draw_Line+0xb0>
		}
	}
}
 800295e:	bf00      	nop
 8002960:	3730      	adds	r7, #48	; 0x30
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
	...

08002968 <ILI9341_Draw_String>:
		}
	}
}

void ILI9341_Draw_String(unsigned int x, unsigned int y, unsigned int color, unsigned int phone, char *str, unsigned char size)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af02      	add	r7, sp, #8
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
 8002974:	603b      	str	r3, [r7, #0]
	switch (size)
 8002976:	7f3b      	ldrb	r3, [r7, #28]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d028      	beq.n	80029ce <ILI9341_Draw_String+0x66>
 800297c:	2b02      	cmp	r3, #2
 800297e:	d02b      	beq.n	80029d8 <ILI9341_Draw_String+0x70>
			x += hh*8;
			*str++;
		}
	break;
	}
}
 8002980:	e059      	b.n	8002a36 <ILI9341_Draw_String+0xce>
			if ((x+(size*8))>X_SIZE)
 8002982:	7f3b      	ldrb	r3, [r7, #28]
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	461a      	mov	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	441a      	add	r2, r3
 800298c:	4b2c      	ldr	r3, [pc, #176]	; (8002a40 <ILI9341_Draw_String+0xd8>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	429a      	cmp	r2, r3
 8002992:	d907      	bls.n	80029a4 <ILI9341_Draw_String+0x3c>
				x = 1;
 8002994:	2301      	movs	r3, #1
 8002996:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8002998:	7f3b      	ldrb	r3, [r7, #28]
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	461a      	mov	r2, r3
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	4413      	add	r3, r2
 80029a2:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x, y, color, phone, *str, size);
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	68b9      	ldr	r1, [r7, #8]
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	7f3a      	ldrb	r2, [r7, #28]
 80029ae:	9201      	str	r2, [sp, #4]
 80029b0:	9300      	str	r3, [sp, #0]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	f000 f969 	bl	8002c8c <ILI9341_Draw_Char>
			x += size*8-2;
 80029ba:	7f3b      	ldrb	r3, [r7, #28]
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	461a      	mov	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4413      	add	r3, r2
 80029c4:	3b02      	subs	r3, #2
 80029c6:	60fb      	str	r3, [r7, #12]
			*str++;
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	3301      	adds	r3, #1
 80029cc:	61bb      	str	r3, [r7, #24]
		while (*str)
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1d5      	bne.n	8002982 <ILI9341_Draw_String+0x1a>
	break;
 80029d6:	e02e      	b.n	8002a36 <ILI9341_Draw_String+0xce>
		hh=1;
 80029d8:	4b1a      	ldr	r3, [pc, #104]	; (8002a44 <ILI9341_Draw_String+0xdc>)
 80029da:	2201      	movs	r2, #1
 80029dc:	701a      	strb	r2, [r3, #0]
		while (*str)
 80029de:	e025      	b.n	8002a2c <ILI9341_Draw_String+0xc4>
			if ((x+(size*8))>X_SIZE)
 80029e0:	7f3b      	ldrb	r3, [r7, #28]
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	461a      	mov	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	441a      	add	r2, r3
 80029ea:	4b15      	ldr	r3, [pc, #84]	; (8002a40 <ILI9341_Draw_String+0xd8>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d907      	bls.n	8002a02 <ILI9341_Draw_String+0x9a>
				x = 1;
 80029f2:	2301      	movs	r3, #1
 80029f4:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 80029f6:	7f3b      	ldrb	r3, [r7, #28]
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	461a      	mov	r2, r3
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	4413      	add	r3, r2
 8002a00:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	68b9      	ldr	r1, [r7, #8]
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	7f3a      	ldrb	r2, [r7, #28]
 8002a0c:	9201      	str	r2, [sp, #4]
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	f000 f93a 	bl	8002c8c <ILI9341_Draw_Char>
			x += hh*8;
 8002a18:	4b0a      	ldr	r3, [pc, #40]	; (8002a44 <ILI9341_Draw_String+0xdc>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	461a      	mov	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4413      	add	r3, r2
 8002a24:	60fb      	str	r3, [r7, #12]
			*str++;
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	61bb      	str	r3, [r7, #24]
		while (*str)
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1d5      	bne.n	80029e0 <ILI9341_Draw_String+0x78>
	break;
 8002a34:	bf00      	nop
}
 8002a36:	bf00      	nop
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	20000008 	.word	0x20000008
 8002a44:	200000c4 	.word	0x200000c4

08002a48 <ILI9341_Send_Command>:

static void ILI9341_Send_Command(unsigned char command) {
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	4603      	mov	r3, r0
 8002a50:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Command();
 8002a52:	f000 f9eb 	bl	8002e2c <Before_Sending_Command>
	ILI9341_SPI_Send(command);
 8002a56:	79fb      	ldrb	r3, [r7, #7]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff fd93 	bl	8002584 <ILI9341_SPI_Send>
}
 8002a5e:	bf00      	nop
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <ILI9341_Send_Data>:

static void ILI9341_Send_Data(unsigned char data) {
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b082      	sub	sp, #8
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Data();
 8002a70:	f000 f9cc 	bl	8002e0c <Before_Sending_Data>
	ILI9341_SPI_Send(data);
 8002a74:	79fb      	ldrb	r3, [r7, #7]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff fd84 	bl	8002584 <ILI9341_SPI_Send>
}
 8002a7c:	bf00      	nop
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <ILI9341_Send_Burst>:

static void ILI9341_Send_Burst(unsigned short color, unsigned long len) {
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	6039      	str	r1, [r7, #0]
 8002a8e:	80fb      	strh	r3, [r7, #6]
	unsigned short blocks;
	unsigned char i, high_bit = color >> 8, low_bit = color;
 8002a90:	88fb      	ldrh	r3, [r7, #6]
 8002a92:	0a1b      	lsrs	r3, r3, #8
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	733b      	strb	r3, [r7, #12]
 8002a98:	88fb      	ldrh	r3, [r7, #6]
 8002a9a:	72fb      	strb	r3, [r7, #11]
	CS_ON;
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	2104      	movs	r1, #4
 8002aa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aa4:	f7fe f816 	bl	8000ad4 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	2102      	movs	r1, #2
 8002aac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ab0:	f7fe f810 	bl	8000ad4 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8002ab4:	202c      	movs	r0, #44	; 0x2c
 8002ab6:	f7ff fd65 	bl	8002584 <ILI9341_SPI_Send>
	DC_DATA;
 8002aba:	2201      	movs	r2, #1
 8002abc:	2102      	movs	r1, #2
 8002abe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ac2:	f7fe f807 	bl	8000ad4 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(high_bit);
 8002ac6:	7b3b      	ldrb	r3, [r7, #12]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff fd5b 	bl	8002584 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(low_bit);
 8002ace:	7afb      	ldrb	r3, [r7, #11]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff fd57 	bl	8002584 <ILI9341_SPI_Send>
	len--;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	603b      	str	r3, [r7, #0]
	blocks = (unsigned short) (len / 64); //64 pixels/block
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	099b      	lsrs	r3, r3, #6
 8002ae0:	81fb      	strh	r3, [r7, #14]
	if (high_bit == low_bit)
 8002ae2:	7b3a      	ldrb	r2, [r7, #12]
 8002ae4:	7afb      	ldrb	r3, [r7, #11]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d169      	bne.n	8002bbe <ILI9341_Send_Burst+0x13a>
	{
		while (blocks--) {
 8002aea:	e027      	b.n	8002b3c <ILI9341_Send_Burst+0xb8>
			i = 16;
 8002aec:	2310      	movs	r3, #16
 8002aee:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(low_bit);
 8002af0:	7afb      	ldrb	r3, [r7, #11]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff fd46 	bl	8002584 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8002af8:	7afb      	ldrb	r3, [r7, #11]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff fd42 	bl	8002584 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8002b00:	7afb      	ldrb	r3, [r7, #11]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff fd3e 	bl	8002584 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8002b08:	7afb      	ldrb	r3, [r7, #11]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff fd3a 	bl	8002584 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8002b10:	7afb      	ldrb	r3, [r7, #11]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff fd36 	bl	8002584 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8002b18:	7afb      	ldrb	r3, [r7, #11]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff fd32 	bl	8002584 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8002b20:	7afb      	ldrb	r3, [r7, #11]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff fd2e 	bl	8002584 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8002b28:	7afb      	ldrb	r3, [r7, #11]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7ff fd2a 	bl	8002584 <ILI9341_SPI_Send>
			} while (--i);
 8002b30:	7b7b      	ldrb	r3, [r7, #13]
 8002b32:	3b01      	subs	r3, #1
 8002b34:	737b      	strb	r3, [r7, #13]
 8002b36:	7b7b      	ldrb	r3, [r7, #13]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1d9      	bne.n	8002af0 <ILI9341_Send_Burst+0x6c>
		while (blocks--) {
 8002b3c:	89fb      	ldrh	r3, [r7, #14]
 8002b3e:	1e5a      	subs	r2, r3, #1
 8002b40:	81fa      	strh	r2, [r7, #14]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1d2      	bne.n	8002aec <ILI9341_Send_Burst+0x68>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b4e:	737b      	strb	r3, [r7, #13]
 8002b50:	e007      	b.n	8002b62 <ILI9341_Send_Burst+0xde>
			ILI9341_SPI_Send(low_bit);
 8002b52:	7afb      	ldrb	r3, [r7, #11]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff fd15 	bl	8002584 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8002b5a:	7afb      	ldrb	r3, [r7, #11]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff fd11 	bl	8002584 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8002b62:	7b7b      	ldrb	r3, [r7, #13]
 8002b64:	1e5a      	subs	r2, r3, #1
 8002b66:	737a      	strb	r2, [r7, #13]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1f2      	bne.n	8002b52 <ILI9341_Send_Burst+0xce>
 8002b6c:	e03f      	b.n	8002bee <ILI9341_Send_Burst+0x16a>
		}
	}
	else
	{
		while (blocks--) {
			i = 16;
 8002b6e:	2310      	movs	r3, #16
 8002b70:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(high_bit);
 8002b72:	7b3b      	ldrb	r3, [r7, #12]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff fd05 	bl	8002584 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8002b7a:	7afb      	ldrb	r3, [r7, #11]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff fd01 	bl	8002584 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8002b82:	7b3b      	ldrb	r3, [r7, #12]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff fcfd 	bl	8002584 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8002b8a:	7afb      	ldrb	r3, [r7, #11]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff fcf9 	bl	8002584 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8002b92:	7b3b      	ldrb	r3, [r7, #12]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff fcf5 	bl	8002584 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8002b9a:	7afb      	ldrb	r3, [r7, #11]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff fcf1 	bl	8002584 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8002ba2:	7b3b      	ldrb	r3, [r7, #12]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff fced 	bl	8002584 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8002baa:	7afb      	ldrb	r3, [r7, #11]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fce9 	bl	8002584 <ILI9341_SPI_Send>
			} while (--i);
 8002bb2:	7b7b      	ldrb	r3, [r7, #13]
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	737b      	strb	r3, [r7, #13]
 8002bb8:	7b7b      	ldrb	r3, [r7, #13]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1d9      	bne.n	8002b72 <ILI9341_Send_Burst+0xee>
		while (blocks--) {
 8002bbe:	89fb      	ldrh	r3, [r7, #14]
 8002bc0:	1e5a      	subs	r2, r3, #1
 8002bc2:	81fa      	strh	r2, [r7, #14]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1d2      	bne.n	8002b6e <ILI9341_Send_Burst+0xea>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bd0:	737b      	strb	r3, [r7, #13]
 8002bd2:	e007      	b.n	8002be4 <ILI9341_Send_Burst+0x160>
			ILI9341_SPI_Send(high_bit);
 8002bd4:	7b3b      	ldrb	r3, [r7, #12]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff fcd4 	bl	8002584 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8002bdc:	7afb      	ldrb	r3, [r7, #11]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff fcd0 	bl	8002584 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8002be4:	7b7b      	ldrb	r3, [r7, #13]
 8002be6:	1e5a      	subs	r2, r3, #1
 8002be8:	737a      	strb	r2, [r7, #13]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1f2      	bne.n	8002bd4 <ILI9341_Send_Burst+0x150>
		}
	}
	CS_OFF;
 8002bee:	2201      	movs	r2, #1
 8002bf0:	2104      	movs	r1, #4
 8002bf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bf6:	f7fd ff6d 	bl	8000ad4 <HAL_GPIO_WritePin>
}
 8002bfa:	bf00      	nop
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
	...

08002c04 <ILI9341_Draw_Double_Pixel>:

void ILI9341_Draw_Double_Pixel(int x, int y, unsigned int color1, unsigned int color2)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
 8002c10:	603b      	str	r3, [r7, #0]
	if((x < 0) || (y < 0) || (x >= X_SIZE) || (y >= Y_SIZE))
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	db30      	blt.n	8002c7a <ILI9341_Draw_Double_Pixel+0x76>
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	db2d      	blt.n	8002c7a <ILI9341_Draw_Double_Pixel+0x76>
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	4b18      	ldr	r3, [pc, #96]	; (8002c84 <ILI9341_Draw_Double_Pixel+0x80>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d228      	bcs.n	8002c7a <ILI9341_Draw_Double_Pixel+0x76>
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	4b17      	ldr	r3, [pc, #92]	; (8002c88 <ILI9341_Draw_Double_Pixel+0x84>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d223      	bcs.n	8002c7a <ILI9341_Draw_Double_Pixel+0x76>
	{
		return;
	}
	ILI9341_Set_Address(x, y, X_SIZE-1, Y_SIZE-1);
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	68b9      	ldr	r1, [r7, #8]
 8002c36:	4b13      	ldr	r3, [pc, #76]	; (8002c84 <ILI9341_Draw_Double_Pixel+0x80>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	1e5a      	subs	r2, r3, #1
 8002c3c:	4b12      	ldr	r3, [pc, #72]	; (8002c88 <ILI9341_Draw_Double_Pixel+0x84>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	3b01      	subs	r3, #1
 8002c42:	f7ff fd58 	bl	80026f6 <ILI9341_Set_Address>
	DC_COMMAND;
 8002c46:	2200      	movs	r2, #0
 8002c48:	2102      	movs	r1, #2
 8002c4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c4e:	f7fd ff41 	bl	8000ad4 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8002c52:	202c      	movs	r0, #44	; 0x2c
 8002c54:	f7ff fc96 	bl	8002584 <ILI9341_SPI_Send>
	DC_DATA;
 8002c58:	2201      	movs	r2, #1
 8002c5a:	2102      	movs	r1, #2
 8002c5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c60:	f7fd ff38 	bl	8000ad4 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(color1);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff fc8b 	bl	8002584 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(color2);
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff fc86 	bl	8002584 <ILI9341_SPI_Send>
 8002c78:	e000      	b.n	8002c7c <ILI9341_Draw_Double_Pixel+0x78>
		return;
 8002c7a:	bf00      	nop
}
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	20000008 	.word	0x20000008
 8002c88:	2000000c 	.word	0x2000000c

08002c8c <ILI9341_Draw_Char>:

static void ILI9341_Draw_Char(int x, int y, unsigned int color, unsigned int phone, unsigned char charcode, unsigned char size)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
 8002c98:	603b      	str	r3, [r7, #0]
	int i,h;
	switch(size)
 8002c9a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d002      	beq.n	8002ca8 <ILI9341_Draw_Char+0x1c>
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d055      	beq.n	8002d52 <ILI9341_Draw_Char+0xc6>
					}
				}
			}
		break;
	}
}
 8002ca6:	e0a9      	b.n	8002dfc <ILI9341_Draw_Char+0x170>
			ILI9341_Set_Address(x, y, x+5, y+8);
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	68b9      	ldr	r1, [r7, #8]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	3305      	adds	r3, #5
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	3308      	adds	r3, #8
 8002cb6:	f7ff fd1e 	bl	80026f6 <ILI9341_Set_Address>
			DC_COMMAND;
 8002cba:	2200      	movs	r2, #0
 8002cbc:	2102      	movs	r1, #2
 8002cbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cc2:	f7fd ff07 	bl	8000ad4 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8002cc6:	202c      	movs	r0, #44	; 0x2c
 8002cc8:	f7ff fc5c 	bl	8002584 <ILI9341_SPI_Send>
			DC_DATA;
 8002ccc:	2201      	movs	r2, #1
 8002cce:	2102      	movs	r1, #2
 8002cd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cd4:	f7fd fefe 	bl	8000ad4 <HAL_GPIO_WritePin>
			for(h=0;h<8;h++)
 8002cd8:	2300      	movs	r3, #0
 8002cda:	613b      	str	r3, [r7, #16]
 8002cdc:	e035      	b.n	8002d4a <ILI9341_Draw_Char+0xbe>
				for(i=2;i<8;i++)
 8002cde:	2302      	movs	r3, #2
 8002ce0:	617b      	str	r3, [r7, #20]
 8002ce2:	e02c      	b.n	8002d3e <ILI9341_Draw_Char+0xb2>
					if ((chars8[charcode-0x20][h]>>(7-i))&0x01)
 8002ce4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ce8:	3b20      	subs	r3, #32
 8002cea:	4a46      	ldr	r2, [pc, #280]	; (8002e04 <ILI9341_Draw_Char+0x178>)
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	441a      	add	r2, r3
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	f1c3 0307 	rsb	r3, r3, #7
 8002cfe:	fa42 f303 	asr.w	r3, r2, r3
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00b      	beq.n	8002d22 <ILI9341_Draw_Char+0x96>
						ILI9341_SPI_Send(color>>8);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	0a1b      	lsrs	r3, r3, #8
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff fc37 	bl	8002584 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff fc32 	bl	8002584 <ILI9341_SPI_Send>
 8002d20:	e00a      	b.n	8002d38 <ILI9341_Draw_Char+0xac>
						ILI9341_SPI_Send(phone>>8);
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	0a1b      	lsrs	r3, r3, #8
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff fc2b 	bl	8002584 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff fc26 	bl	8002584 <ILI9341_SPI_Send>
				for(i=2;i<8;i++)
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	2b07      	cmp	r3, #7
 8002d42:	ddcf      	ble.n	8002ce4 <ILI9341_Draw_Char+0x58>
			for(h=0;h<8;h++)
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	3301      	adds	r3, #1
 8002d48:	613b      	str	r3, [r7, #16]
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	2b07      	cmp	r3, #7
 8002d4e:	ddc6      	ble.n	8002cde <ILI9341_Draw_Char+0x52>
			break;
 8002d50:	e054      	b.n	8002dfc <ILI9341_Draw_Char+0x170>
			ILI9341_Set_Address(x, y, x+7, y+16);
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	68b9      	ldr	r1, [r7, #8]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	3307      	adds	r3, #7
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	3310      	adds	r3, #16
 8002d60:	f7ff fcc9 	bl	80026f6 <ILI9341_Set_Address>
			DC_COMMAND;
 8002d64:	2200      	movs	r2, #0
 8002d66:	2102      	movs	r1, #2
 8002d68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d6c:	f7fd feb2 	bl	8000ad4 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8002d70:	202c      	movs	r0, #44	; 0x2c
 8002d72:	f7ff fc07 	bl	8002584 <ILI9341_SPI_Send>
			DC_DATA;
 8002d76:	2201      	movs	r2, #1
 8002d78:	2102      	movs	r1, #2
 8002d7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d7e:	f7fd fea9 	bl	8000ad4 <HAL_GPIO_WritePin>
			for(h=0;h<16;h++)
 8002d82:	2300      	movs	r3, #0
 8002d84:	613b      	str	r3, [r7, #16]
 8002d86:	e035      	b.n	8002df4 <ILI9341_Draw_Char+0x168>
				for(i=0;i<8;i++)
 8002d88:	2300      	movs	r3, #0
 8002d8a:	617b      	str	r3, [r7, #20]
 8002d8c:	e02c      	b.n	8002de8 <ILI9341_Draw_Char+0x15c>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8002d8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d92:	3b20      	subs	r3, #32
 8002d94:	4a1c      	ldr	r2, [pc, #112]	; (8002e08 <ILI9341_Draw_Char+0x17c>)
 8002d96:	011b      	lsls	r3, r3, #4
 8002d98:	441a      	add	r2, r3
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	461a      	mov	r2, r3
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f1c3 0307 	rsb	r3, r3, #7
 8002da8:	fa42 f303 	asr.w	r3, r2, r3
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00b      	beq.n	8002dcc <ILI9341_Draw_Char+0x140>
						ILI9341_SPI_Send(color>>8);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	0a1b      	lsrs	r3, r3, #8
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff fbe2 	bl	8002584 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff fbdd 	bl	8002584 <ILI9341_SPI_Send>
 8002dca:	e00a      	b.n	8002de2 <ILI9341_Draw_Char+0x156>
						ILI9341_SPI_Send(phone>>8);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	0a1b      	lsrs	r3, r3, #8
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff fbd6 	bl	8002584 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff fbd1 	bl	8002584 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	3301      	adds	r3, #1
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	2b07      	cmp	r3, #7
 8002dec:	ddcf      	ble.n	8002d8e <ILI9341_Draw_Char+0x102>
			for(h=0;h<16;h++)
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	3301      	adds	r3, #1
 8002df2:	613b      	str	r3, [r7, #16]
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	2b0f      	cmp	r3, #15
 8002df8:	ddc6      	ble.n	8002d88 <ILI9341_Draw_Char+0xfc>
		break;
 8002dfa:	bf00      	nop
}
 8002dfc:	bf00      	nop
 8002dfe:	3718      	adds	r7, #24
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	0803a678 	.word	0x0803a678
 8002e08:	0803a950 	.word	0x0803a950

08002e0c <Before_Sending_Data>:

static void Before_Sending_Data() {
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8002e10:	2201      	movs	r2, #1
 8002e12:	2102      	movs	r1, #2
 8002e14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e18:	f7fd fe5c 	bl	8000ad4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	2104      	movs	r1, #4
 8002e20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e24:	f7fd fe56 	bl	8000ad4 <HAL_GPIO_WritePin>
}
 8002e28:	bf00      	nop
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <Before_Sending_Command>:

static void Before_Sending_Command() {
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8002e30:	2200      	movs	r2, #0
 8002e32:	2102      	movs	r1, #2
 8002e34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e38:	f7fd fe4c 	bl	8000ad4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	2104      	movs	r1, #4
 8002e40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e44:	f7fd fe46 	bl	8000ad4 <HAL_GPIO_WritePin>
}
 8002e48:	bf00      	nop
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e52:	f7fd fb3f 	bl	80004d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e56:	f000 f875 	bl	8002f44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e5a:	f000 f8ed 	bl	8003038 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002e5e:	f000 f8ad 	bl	8002fbc <MX_SPI1_Init>

  /* =============Initialization=============== */
  ILI9341_Init();
 8002e62:	f7ff fa52 	bl	800230a <ILI9341_Init>
//  HAL_Delay(500);
//  ILI9341_Fill_Screen(BLUE);
//  HAL_Delay(500);

    /* ===============Draw menu================= */
    Display_Menu();
 8002e66:	f7fd fa21 	bl	80002ac <Display_Menu>

//    while (1)
//      {
//  	  HAL_Delay(500);
//      }
	  TP_Init();
 8002e6a:	f000 fc4d 	bl	8003708 <TP_Init>
	  /* Infinite loop */
	  while (1)
	  {

		  tp_dev.scan(0);
 8002e6e:	4b33      	ldr	r3, [pc, #204]	; (8002f3c <main+0xf0>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2000      	movs	r0, #0
 8002e74:	4798      	blx	r3
		  if(tp_dev.sta & TP_PRES_DOWN)
 8002e76:	4b31      	ldr	r3, [pc, #196]	; (8002f3c <main+0xf0>)
 8002e78:	7c1b      	ldrb	r3, [r3, #16]
 8002e7a:	b25b      	sxtb	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	daf6      	bge.n	8002e6e <main+0x22>
		  {
			  xtemp = TP_Read_XOY(0xD0);
 8002e80:	20d0      	movs	r0, #208	; 0xd0
 8002e82:	f000 faa9 	bl	80033d8 <TP_Read_XOY>
 8002e86:	4603      	mov	r3, r0
 8002e88:	80fb      	strh	r3, [r7, #6]
			  ytemp = TP_Read_XOY(0x90);
 8002e8a:	2090      	movs	r0, #144	; 0x90
 8002e8c:	f000 faa4 	bl	80033d8 <TP_Read_XOY>
 8002e90:	4603      	mov	r3, r0
 8002e92:	80bb      	strh	r3, [r7, #4]

			  if(0 == state)
 8002e94:	4b2a      	ldr	r3, [pc, #168]	; (8002f40 <main+0xf4>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d131      	bne.n	8002f00 <main+0xb4>
			  {
				  if(xtemp > 2700 && xtemp < 3400 && ytemp > 3000 && ytemp < 3500) {
 8002e9c:	88fb      	ldrh	r3, [r7, #6]
 8002e9e:	f640 228c 	movw	r2, #2700	; 0xa8c
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d913      	bls.n	8002ece <main+0x82>
 8002ea6:	88fb      	ldrh	r3, [r7, #6]
 8002ea8:	f640 5247 	movw	r2, #3399	; 0xd47
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d80e      	bhi.n	8002ece <main+0x82>
 8002eb0:	88bb      	ldrh	r3, [r7, #4]
 8002eb2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d909      	bls.n	8002ece <main+0x82>
 8002eba:	88bb      	ldrh	r3, [r7, #4]
 8002ebc:	f640 52ab 	movw	r2, #3499	; 0xdab
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d804      	bhi.n	8002ece <main+0x82>
					  Display_Color_Picture();
 8002ec4:	f7fd fac4 	bl	8000450 <Display_Color_Picture>
					  state = 1;
 8002ec8:	4b1d      	ldr	r3, [pc, #116]	; (8002f40 <main+0xf4>)
 8002eca:	2201      	movs	r2, #1
 8002ecc:	701a      	strb	r2, [r3, #0]
				  }

				  if(xtemp > 1200 && xtemp < 1900 && ytemp > 3000 && ytemp < 3500) {
 8002ece:	88fb      	ldrh	r3, [r7, #6]
 8002ed0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8002ed4:	d92c      	bls.n	8002f30 <main+0xe4>
 8002ed6:	88fb      	ldrh	r3, [r7, #6]
 8002ed8:	f240 726b 	movw	r2, #1899	; 0x76b
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d827      	bhi.n	8002f30 <main+0xe4>
 8002ee0:	88bb      	ldrh	r3, [r7, #4]
 8002ee2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d922      	bls.n	8002f30 <main+0xe4>
 8002eea:	88bb      	ldrh	r3, [r7, #4]
 8002eec:	f640 52ab 	movw	r2, #3499	; 0xdab
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d81d      	bhi.n	8002f30 <main+0xe4>
					  Display_Text();
 8002ef4:	f7fd fa66 	bl	80003c4 <Display_Text>
					  state = 1;
 8002ef8:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <main+0xf4>)
 8002efa:	2201      	movs	r2, #1
 8002efc:	701a      	strb	r2, [r3, #0]
 8002efe:	e017      	b.n	8002f30 <main+0xe4>
				  }
			  }
			  else
			  {
				  if(xtemp > 3400 && xtemp < 3900 && ytemp > 350 && ytemp < 750) {
 8002f00:	88fb      	ldrh	r3, [r7, #6]
 8002f02:	f640 5248 	movw	r2, #3400	; 0xd48
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d912      	bls.n	8002f30 <main+0xe4>
 8002f0a:	88fb      	ldrh	r3, [r7, #6]
 8002f0c:	f640 723b 	movw	r2, #3899	; 0xf3b
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d80d      	bhi.n	8002f30 <main+0xe4>
 8002f14:	88bb      	ldrh	r3, [r7, #4]
 8002f16:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8002f1a:	d909      	bls.n	8002f30 <main+0xe4>
 8002f1c:	88bb      	ldrh	r3, [r7, #4]
 8002f1e:	f240 22ed 	movw	r2, #749	; 0x2ed
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d804      	bhi.n	8002f30 <main+0xe4>
					  Display_Menu();
 8002f26:	f7fd f9c1 	bl	80002ac <Display_Menu>
					  state = 0;
 8002f2a:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <main+0xf4>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	701a      	strb	r2, [r3, #0]
				  }
			  }

			  HAL_Delay(500);
 8002f30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f34:	f7fd fb34 	bl	80005a0 <HAL_Delay>
		  tp_dev.scan(0);
 8002f38:	e799      	b.n	8002e6e <main+0x22>
 8002f3a:	bf00      	nop
 8002f3c:	20000014 	.word	0x20000014
 8002f40:	200000bc 	.word	0x200000bc

08002f44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b090      	sub	sp, #64	; 0x40
 8002f48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f4a:	f107 0318 	add.w	r3, r7, #24
 8002f4e:	2228      	movs	r2, #40	; 0x28
 8002f50:	2100      	movs	r1, #0
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 fc30 	bl	80037b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f58:	1d3b      	adds	r3, r7, #4
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	605a      	str	r2, [r3, #4]
 8002f60:	609a      	str	r2, [r3, #8]
 8002f62:	60da      	str	r2, [r3, #12]
 8002f64:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f66:	2302      	movs	r3, #2
 8002f68:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f6e:	2310      	movs	r3, #16
 8002f70:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002f72:	2300      	movs	r3, #0
 8002f74:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f76:	f107 0318 	add.w	r3, r7, #24
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fd fdc2 	bl	8000b04 <HAL_RCC_OscConfig>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8002f86:	f000 f8ab 	bl	80030e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f8a:	230f      	movs	r3, #15
 8002f8c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f92:	2300      	movs	r3, #0
 8002f94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f96:	2300      	movs	r3, #0
 8002f98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002f9e:	1d3b      	adds	r3, r7, #4
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7fe fcb6 	bl	8001914 <HAL_RCC_ClockConfig>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002fae:	f000 f897 	bl	80030e0 <Error_Handler>
  }
}
 8002fb2:	bf00      	nop
 8002fb4:	3740      	adds	r7, #64	; 0x40
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
	...

08002fbc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002fc0:	4b1b      	ldr	r3, [pc, #108]	; (8003030 <MX_SPI1_Init+0x74>)
 8002fc2:	4a1c      	ldr	r2, [pc, #112]	; (8003034 <MX_SPI1_Init+0x78>)
 8002fc4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002fc6:	4b1a      	ldr	r3, [pc, #104]	; (8003030 <MX_SPI1_Init+0x74>)
 8002fc8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002fcc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002fce:	4b18      	ldr	r3, [pc, #96]	; (8003030 <MX_SPI1_Init+0x74>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002fd4:	4b16      	ldr	r3, [pc, #88]	; (8003030 <MX_SPI1_Init+0x74>)
 8002fd6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002fda:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fdc:	4b14      	ldr	r3, [pc, #80]	; (8003030 <MX_SPI1_Init+0x74>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002fe2:	4b13      	ldr	r3, [pc, #76]	; (8003030 <MX_SPI1_Init+0x74>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002fe8:	4b11      	ldr	r3, [pc, #68]	; (8003030 <MX_SPI1_Init+0x74>)
 8002fea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ff0:	4b0f      	ldr	r3, [pc, #60]	; (8003030 <MX_SPI1_Init+0x74>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ff6:	4b0e      	ldr	r3, [pc, #56]	; (8003030 <MX_SPI1_Init+0x74>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ffc:	4b0c      	ldr	r3, [pc, #48]	; (8003030 <MX_SPI1_Init+0x74>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003002:	4b0b      	ldr	r3, [pc, #44]	; (8003030 <MX_SPI1_Init+0x74>)
 8003004:	2200      	movs	r2, #0
 8003006:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003008:	4b09      	ldr	r3, [pc, #36]	; (8003030 <MX_SPI1_Init+0x74>)
 800300a:	2207      	movs	r2, #7
 800300c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800300e:	4b08      	ldr	r3, [pc, #32]	; (8003030 <MX_SPI1_Init+0x74>)
 8003010:	2200      	movs	r2, #0
 8003012:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003014:	4b06      	ldr	r3, [pc, #24]	; (8003030 <MX_SPI1_Init+0x74>)
 8003016:	2208      	movs	r2, #8
 8003018:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800301a:	4805      	ldr	r0, [pc, #20]	; (8003030 <MX_SPI1_Init+0x74>)
 800301c:	f7fe fe60 	bl	8001ce0 <HAL_SPI_Init>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003026:	f000 f85b 	bl	80030e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800302a:	bf00      	nop
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	200000c8 	.word	0x200000c8
 8003034:	40013000 	.word	0x40013000

08003038 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b08a      	sub	sp, #40	; 0x28
 800303c:	af00      	add	r7, sp, #0
//  __HAL_RCC_GPIOA_CLK_ENABLE();

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800303e:	4b27      	ldr	r3, [pc, #156]	; (80030dc <MX_GPIO_Init+0xa4>)
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	4a26      	ldr	r2, [pc, #152]	; (80030dc <MX_GPIO_Init+0xa4>)
 8003044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003048:	6153      	str	r3, [r2, #20]
 800304a:	4b24      	ldr	r3, [pc, #144]	; (80030dc <MX_GPIO_Init+0xa4>)
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003052:	613b      	str	r3, [r7, #16]
 8003054:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003056:	4b21      	ldr	r3, [pc, #132]	; (80030dc <MX_GPIO_Init+0xa4>)
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	4a20      	ldr	r2, [pc, #128]	; (80030dc <MX_GPIO_Init+0xa4>)
 800305c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003060:	6153      	str	r3, [r2, #20]
 8003062:	4b1e      	ldr	r3, [pc, #120]	; (80030dc <MX_GPIO_Init+0xa4>)
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800306e:	4b1b      	ldr	r3, [pc, #108]	; (80030dc <MX_GPIO_Init+0xa4>)
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	4a1a      	ldr	r2, [pc, #104]	; (80030dc <MX_GPIO_Init+0xa4>)
 8003074:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003078:	6153      	str	r3, [r2, #20]
 800307a:	4b18      	ldr	r3, [pc, #96]	; (80030dc <MX_GPIO_Init+0xa4>)
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003082:	60bb      	str	r3, [r7, #8]
 8003084:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003086:	4b15      	ldr	r3, [pc, #84]	; (80030dc <MX_GPIO_Init+0xa4>)
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	4a14      	ldr	r2, [pc, #80]	; (80030dc <MX_GPIO_Init+0xa4>)
 800308c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003090:	6153      	str	r3, [r2, #20]
 8003092:	4b12      	ldr	r3, [pc, #72]	; (80030dc <MX_GPIO_Init+0xa4>)
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800309a:	607b      	str	r3, [r7, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800309e:	4b0f      	ldr	r3, [pc, #60]	; (80030dc <MX_GPIO_Init+0xa4>)
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	4a0e      	ldr	r2, [pc, #56]	; (80030dc <MX_GPIO_Init+0xa4>)
 80030a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80030a8:	6153      	str	r3, [r2, #20]
 80030aa:	4b0c      	ldr	r3, [pc, #48]	; (80030dc <MX_GPIO_Init+0xa4>)
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030b2:	603b      	str	r3, [r7, #0]
 80030b4:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin 	= DC_Pin | CS_Pin | RESET_Pin;
 80030b6:	2307      	movs	r3, #7
 80030b8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 80030ba:	2301      	movs	r3, #1
 80030bc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 80030be:	2300      	movs	r3, #0
 80030c0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed 	= GPIO_SPEED_FREQ_LOW;
 80030c2:	2300      	movs	r3, #0
 80030c4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030c6:	f107 0314 	add.w	r3, r7, #20
 80030ca:	4619      	mov	r1, r3
 80030cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030d0:	f7fd fb6e 	bl	80007b0 <HAL_GPIO_Init>

}
 80030d4:	bf00      	nop
 80030d6:	3728      	adds	r7, #40	; 0x28
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40021000 	.word	0x40021000

080030e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80030e4:	bf00      	nop
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
	...

080030f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030f6:	4b0f      	ldr	r3, [pc, #60]	; (8003134 <HAL_MspInit+0x44>)
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	4a0e      	ldr	r2, [pc, #56]	; (8003134 <HAL_MspInit+0x44>)
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	6193      	str	r3, [r2, #24]
 8003102:	4b0c      	ldr	r3, [pc, #48]	; (8003134 <HAL_MspInit+0x44>)
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	607b      	str	r3, [r7, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800310e:	4b09      	ldr	r3, [pc, #36]	; (8003134 <HAL_MspInit+0x44>)
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	4a08      	ldr	r2, [pc, #32]	; (8003134 <HAL_MspInit+0x44>)
 8003114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003118:	61d3      	str	r3, [r2, #28]
 800311a:	4b06      	ldr	r3, [pc, #24]	; (8003134 <HAL_MspInit+0x44>)
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003122:	603b      	str	r3, [r7, #0]
 8003124:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	40021000 	.word	0x40021000

08003138 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b08a      	sub	sp, #40	; 0x28
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003140:	f107 0314 	add.w	r3, r7, #20
 8003144:	2200      	movs	r2, #0
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	605a      	str	r2, [r3, #4]
 800314a:	609a      	str	r2, [r3, #8]
 800314c:	60da      	str	r2, [r3, #12]
 800314e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a17      	ldr	r2, [pc, #92]	; (80031b4 <HAL_SPI_MspInit+0x7c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d128      	bne.n	80031ac <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800315a:	4b17      	ldr	r3, [pc, #92]	; (80031b8 <HAL_SPI_MspInit+0x80>)
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	4a16      	ldr	r2, [pc, #88]	; (80031b8 <HAL_SPI_MspInit+0x80>)
 8003160:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003164:	6193      	str	r3, [r2, #24]
 8003166:	4b14      	ldr	r3, [pc, #80]	; (80031b8 <HAL_SPI_MspInit+0x80>)
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800316e:	613b      	str	r3, [r7, #16]
 8003170:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003172:	4b11      	ldr	r3, [pc, #68]	; (80031b8 <HAL_SPI_MspInit+0x80>)
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	4a10      	ldr	r2, [pc, #64]	; (80031b8 <HAL_SPI_MspInit+0x80>)
 8003178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800317c:	6153      	str	r3, [r2, #20]
 800317e:	4b0e      	ldr	r3, [pc, #56]	; (80031b8 <HAL_SPI_MspInit+0x80>)
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003186:	60fb      	str	r3, [r7, #12]
 8003188:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800318a:	23e0      	movs	r3, #224	; 0xe0
 800318c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800318e:	2302      	movs	r3, #2
 8003190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003192:	2300      	movs	r3, #0
 8003194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003196:	2303      	movs	r3, #3
 8003198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800319a:	2305      	movs	r3, #5
 800319c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800319e:	f107 0314 	add.w	r3, r7, #20
 80031a2:	4619      	mov	r1, r3
 80031a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031a8:	f7fd fb02 	bl	80007b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80031ac:	bf00      	nop
 80031ae:	3728      	adds	r7, #40	; 0x28
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40013000 	.word	0x40013000
 80031b8:	40021000 	.word	0x40021000

080031bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80031c0:	bf00      	nop
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031ca:	b480      	push	{r7}
 80031cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031ce:	e7fe      	b.n	80031ce <HardFault_Handler+0x4>

080031d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031d4:	e7fe      	b.n	80031d4 <MemManage_Handler+0x4>

080031d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031d6:	b480      	push	{r7}
 80031d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031da:	e7fe      	b.n	80031da <BusFault_Handler+0x4>

080031dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031e0:	e7fe      	b.n	80031e0 <UsageFault_Handler+0x4>

080031e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031e2:	b480      	push	{r7}
 80031e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031e6:	bf00      	nop
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031f4:	bf00      	nop
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031fe:	b480      	push	{r7}
 8003200:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003202:	bf00      	nop
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003210:	f7fd f9a6 	bl	8000560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003214:	bf00      	nop
 8003216:	bd80      	pop	{r7, pc}

08003218 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800321c:	4b08      	ldr	r3, [pc, #32]	; (8003240 <SystemInit+0x28>)
 800321e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003222:	4a07      	ldr	r2, [pc, #28]	; (8003240 <SystemInit+0x28>)
 8003224:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003228:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800322c:	4b04      	ldr	r3, [pc, #16]	; (8003240 <SystemInit+0x28>)
 800322e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003232:	609a      	str	r2, [r3, #8]
#endif
}
 8003234:	bf00      	nop
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	e000ed00 	.word	0xe000ed00

08003244 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003244:	f8df d034 	ldr.w	sp, [pc, #52]	; 800327c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003248:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800324a:	e003      	b.n	8003254 <LoopCopyDataInit>

0800324c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800324c:	4b0c      	ldr	r3, [pc, #48]	; (8003280 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800324e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003250:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003252:	3104      	adds	r1, #4

08003254 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003254:	480b      	ldr	r0, [pc, #44]	; (8003284 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003256:	4b0c      	ldr	r3, [pc, #48]	; (8003288 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003258:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800325a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800325c:	d3f6      	bcc.n	800324c <CopyDataInit>
	ldr	r2, =_sbss
 800325e:	4a0b      	ldr	r2, [pc, #44]	; (800328c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003260:	e002      	b.n	8003268 <LoopFillZerobss>

08003262 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003262:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003264:	f842 3b04 	str.w	r3, [r2], #4

08003268 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003268:	4b09      	ldr	r3, [pc, #36]	; (8003290 <LoopForever+0x16>)
	cmp	r2, r3
 800326a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800326c:	d3f9      	bcc.n	8003262 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800326e:	f7ff ffd3 	bl	8003218 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003272:	f000 fa7d 	bl	8003770 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003276:	f7ff fde9 	bl	8002e4c <main>

0800327a <LoopForever>:

LoopForever:
    b LoopForever
 800327a:	e7fe      	b.n	800327a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800327c:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8003280:	0803af58 	.word	0x0803af58
	ldr	r0, =_sdata
 8003284:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003288:	2000003c 	.word	0x2000003c
	ldr	r2, =_sbss
 800328c:	2000003c 	.word	0x2000003c
	ldr	r3, = _ebss
 8003290:	2000012c 	.word	0x2000012c

08003294 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003294:	e7fe      	b.n	8003294 <ADC1_2_IRQHandler>
	...

08003298 <TP_Write_Byte>:
 * @function   :Write a byte data to the touch screen IC with SPI bus
 * @parameters :num:Data to be written
 * @retvalue   :None
******************************************************************************/
void TP_Write_Byte(uint8_t num)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	4603      	mov	r3, r0
 80032a0:	71fb      	strb	r3, [r7, #7]
	uint8_t count = 0;
 80032a2:	2300      	movs	r3, #0
 80032a4:	73fb      	strb	r3, [r7, #15]
	for(count = 0; count < 8; count++)
 80032a6:	2300      	movs	r3, #0
 80032a8:	73fb      	strb	r3, [r7, #15]
 80032aa:	e021      	b.n	80032f0 <TP_Write_Byte+0x58>
	{
		if(num & 0x80)
 80032ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	da05      	bge.n	80032c0 <TP_Write_Byte+0x28>
			T_DIN_ON;
 80032b4:	2201      	movs	r2, #1
 80032b6:	2110      	movs	r1, #16
 80032b8:	4811      	ldr	r0, [pc, #68]	; (8003300 <TP_Write_Byte+0x68>)
 80032ba:	f7fd fc0b 	bl	8000ad4 <HAL_GPIO_WritePin>
 80032be:	e004      	b.n	80032ca <TP_Write_Byte+0x32>
		else
			T_DIN_OFF;
 80032c0:	2200      	movs	r2, #0
 80032c2:	2110      	movs	r1, #16
 80032c4:	480e      	ldr	r0, [pc, #56]	; (8003300 <TP_Write_Byte+0x68>)
 80032c6:	f7fd fc05 	bl	8000ad4 <HAL_GPIO_WritePin>

		num <<= 1;
 80032ca:	79fb      	ldrb	r3, [r7, #7]
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	71fb      	strb	r3, [r7, #7]
		T_CLK_OFF;
 80032d0:	2200      	movs	r2, #0
 80032d2:	2101      	movs	r1, #1
 80032d4:	480b      	ldr	r0, [pc, #44]	; (8003304 <TP_Write_Byte+0x6c>)
 80032d6:	f7fd fbfd 	bl	8000ad4 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80032da:	2001      	movs	r0, #1
 80032dc:	f7fd f960 	bl	80005a0 <HAL_Delay>
		T_CLK_ON;
 80032e0:	2201      	movs	r2, #1
 80032e2:	2101      	movs	r1, #1
 80032e4:	4807      	ldr	r0, [pc, #28]	; (8003304 <TP_Write_Byte+0x6c>)
 80032e6:	f7fd fbf5 	bl	8000ad4 <HAL_GPIO_WritePin>
	for(count = 0; count < 8; count++)
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
 80032ec:	3301      	adds	r3, #1
 80032ee:	73fb      	strb	r3, [r7, #15]
 80032f0:	7bfb      	ldrb	r3, [r7, #15]
 80032f2:	2b07      	cmp	r3, #7
 80032f4:	d9da      	bls.n	80032ac <TP_Write_Byte+0x14>
	}
}
 80032f6:	bf00      	nop
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	48000800 	.word	0x48000800
 8003304:	48000400 	.word	0x48000400

08003308 <TP_Read_AD>:
 * @function   :Reading adc values from touch screen IC with SPI bus
 * @parameters :CMD:Read command,0xD0 for x,0x90 for y
 * @retvalue   :Read data
******************************************************************************/
uint16_t TP_Read_AD(uint8_t CMD)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	4603      	mov	r3, r0
 8003310:	71fb      	strb	r3, [r7, #7]
	uint8_t count = 0;
 8003312:	2300      	movs	r3, #0
 8003314:	73fb      	strb	r3, [r7, #15]
	uint16_t Num = 0;
 8003316:	2300      	movs	r3, #0
 8003318:	81bb      	strh	r3, [r7, #12]
	T_CLK_OFF;
 800331a:	2200      	movs	r2, #0
 800331c:	2101      	movs	r1, #1
 800331e:	482c      	ldr	r0, [pc, #176]	; (80033d0 <TP_Read_AD+0xc8>)
 8003320:	f7fd fbd8 	bl	8000ad4 <HAL_GPIO_WritePin>
	T_DIN_OFF;
 8003324:	2200      	movs	r2, #0
 8003326:	2110      	movs	r1, #16
 8003328:	482a      	ldr	r0, [pc, #168]	; (80033d4 <TP_Read_AD+0xcc>)
 800332a:	f7fd fbd3 	bl	8000ad4 <HAL_GPIO_WritePin>
	T_CS_OFF;
 800332e:	2200      	movs	r2, #0
 8003330:	2120      	movs	r1, #32
 8003332:	4828      	ldr	r0, [pc, #160]	; (80033d4 <TP_Read_AD+0xcc>)
 8003334:	f7fd fbce 	bl	8000ad4 <HAL_GPIO_WritePin>
	TP_Write_Byte(CMD);
 8003338:	79fb      	ldrb	r3, [r7, #7]
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff ffac 	bl	8003298 <TP_Write_Byte>
	HAL_Delay(6);
 8003340:	2006      	movs	r0, #6
 8003342:	f7fd f92d 	bl	80005a0 <HAL_Delay>
	T_CLK_OFF;
 8003346:	2200      	movs	r2, #0
 8003348:	2101      	movs	r1, #1
 800334a:	4821      	ldr	r0, [pc, #132]	; (80033d0 <TP_Read_AD+0xc8>)
 800334c:	f7fd fbc2 	bl	8000ad4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003350:	2001      	movs	r0, #1
 8003352:	f7fd f925 	bl	80005a0 <HAL_Delay>
	T_CLK_ON;
 8003356:	2201      	movs	r2, #1
 8003358:	2101      	movs	r1, #1
 800335a:	481d      	ldr	r0, [pc, #116]	; (80033d0 <TP_Read_AD+0xc8>)
 800335c:	f7fd fbba 	bl	8000ad4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003360:	2001      	movs	r0, #1
 8003362:	f7fd f91d 	bl	80005a0 <HAL_Delay>
	T_CLK_OFF;
 8003366:	2200      	movs	r2, #0
 8003368:	2101      	movs	r1, #1
 800336a:	4819      	ldr	r0, [pc, #100]	; (80033d0 <TP_Read_AD+0xc8>)
 800336c:	f7fd fbb2 	bl	8000ad4 <HAL_GPIO_WritePin>
	for(count = 0; count < 16; count++)
 8003370:	2300      	movs	r3, #0
 8003372:	73fb      	strb	r3, [r7, #15]
 8003374:	e01c      	b.n	80033b0 <TP_Read_AD+0xa8>
	{
		Num <<= 1;
 8003376:	89bb      	ldrh	r3, [r7, #12]
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	81bb      	strh	r3, [r7, #12]
		T_CLK_OFF;
 800337c:	2200      	movs	r2, #0
 800337e:	2101      	movs	r1, #1
 8003380:	4813      	ldr	r0, [pc, #76]	; (80033d0 <TP_Read_AD+0xc8>)
 8003382:	f7fd fba7 	bl	8000ad4 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8003386:	2001      	movs	r0, #1
 8003388:	f7fd f90a 	bl	80005a0 <HAL_Delay>
		T_CLK_ON;
 800338c:	2201      	movs	r2, #1
 800338e:	2101      	movs	r1, #1
 8003390:	480f      	ldr	r0, [pc, #60]	; (80033d0 <TP_Read_AD+0xc8>)
 8003392:	f7fd fb9f 	bl	8000ad4 <HAL_GPIO_WritePin>
		if(T_DO) Num++;
 8003396:	2104      	movs	r1, #4
 8003398:	480d      	ldr	r0, [pc, #52]	; (80033d0 <TP_Read_AD+0xc8>)
 800339a:	f7fd fb83 	bl	8000aa4 <HAL_GPIO_ReadPin>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <TP_Read_AD+0xa2>
 80033a4:	89bb      	ldrh	r3, [r7, #12]
 80033a6:	3301      	adds	r3, #1
 80033a8:	81bb      	strh	r3, [r7, #12]
	for(count = 0; count < 16; count++)
 80033aa:	7bfb      	ldrb	r3, [r7, #15]
 80033ac:	3301      	adds	r3, #1
 80033ae:	73fb      	strb	r3, [r7, #15]
 80033b0:	7bfb      	ldrb	r3, [r7, #15]
 80033b2:	2b0f      	cmp	r3, #15
 80033b4:	d9df      	bls.n	8003376 <TP_Read_AD+0x6e>
	}
	Num >>= 4;
 80033b6:	89bb      	ldrh	r3, [r7, #12]
 80033b8:	091b      	lsrs	r3, r3, #4
 80033ba:	81bb      	strh	r3, [r7, #12]
	T_CS_ON;
 80033bc:	2201      	movs	r2, #1
 80033be:	2120      	movs	r1, #32
 80033c0:	4804      	ldr	r0, [pc, #16]	; (80033d4 <TP_Read_AD+0xcc>)
 80033c2:	f7fd fb87 	bl	8000ad4 <HAL_GPIO_WritePin>
	return(Num);
 80033c6:	89bb      	ldrh	r3, [r7, #12]

}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	48000400 	.word	0x48000400
 80033d4:	48000800 	.word	0x48000800

080033d8 <TP_Read_XOY>:
								and take the average
 * @parameters :xy:Read command(CMD_RDX/CMD_RDY)
 * @retvalue   :Read data
******************************************************************************/
uint16_t TP_Read_XOY(uint8_t xy)
{
 80033d8:	b590      	push	{r4, r7, lr}
 80033da:	b089      	sub	sp, #36	; 0x24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	4603      	mov	r3, r0
 80033e0:	71fb      	strb	r3, [r7, #7]
	uint16_t i, j;
	uint16_t buf[READ_TIMES];
	uint16_t sum = 0;
 80033e2:	2300      	movs	r3, #0
 80033e4:	837b      	strh	r3, [r7, #26]
	uint16_t temp;
	for(i=0;i<READ_TIMES;i++) buf[i] = TP_Read_AD(xy);
 80033e6:	2300      	movs	r3, #0
 80033e8:	83fb      	strh	r3, [r7, #30]
 80033ea:	e00f      	b.n	800340c <TP_Read_XOY+0x34>
 80033ec:	8bfc      	ldrh	r4, [r7, #30]
 80033ee:	79fb      	ldrb	r3, [r7, #7]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff ff89 	bl	8003308 <TP_Read_AD>
 80033f6:	4603      	mov	r3, r0
 80033f8:	461a      	mov	r2, r3
 80033fa:	0063      	lsls	r3, r4, #1
 80033fc:	f107 0120 	add.w	r1, r7, #32
 8003400:	440b      	add	r3, r1
 8003402:	f823 2c14 	strh.w	r2, [r3, #-20]
 8003406:	8bfb      	ldrh	r3, [r7, #30]
 8003408:	3301      	adds	r3, #1
 800340a:	83fb      	strh	r3, [r7, #30]
 800340c:	8bfb      	ldrh	r3, [r7, #30]
 800340e:	2b04      	cmp	r3, #4
 8003410:	d9ec      	bls.n	80033ec <TP_Read_XOY+0x14>
	for(i=0;i<READ_TIMES-1; i++)
 8003412:	2300      	movs	r3, #0
 8003414:	83fb      	strh	r3, [r7, #30]
 8003416:	e03b      	b.n	8003490 <TP_Read_XOY+0xb8>
	{
		for(j = i+1; j < READ_TIMES; j++)
 8003418:	8bfb      	ldrh	r3, [r7, #30]
 800341a:	3301      	adds	r3, #1
 800341c:	83bb      	strh	r3, [r7, #28]
 800341e:	e031      	b.n	8003484 <TP_Read_XOY+0xac>
		{
			if(buf[i] > buf[j])
 8003420:	8bfb      	ldrh	r3, [r7, #30]
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	f107 0220 	add.w	r2, r7, #32
 8003428:	4413      	add	r3, r2
 800342a:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800342e:	8bbb      	ldrh	r3, [r7, #28]
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	f107 0120 	add.w	r1, r7, #32
 8003436:	440b      	add	r3, r1
 8003438:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800343c:	429a      	cmp	r2, r3
 800343e:	d91e      	bls.n	800347e <TP_Read_XOY+0xa6>
			{
				temp = buf[i];
 8003440:	8bfb      	ldrh	r3, [r7, #30]
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	f107 0220 	add.w	r2, r7, #32
 8003448:	4413      	add	r3, r2
 800344a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800344e:	833b      	strh	r3, [r7, #24]
				buf[i] = buf[j];
 8003450:	8bbb      	ldrh	r3, [r7, #28]
 8003452:	8bfa      	ldrh	r2, [r7, #30]
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	f107 0120 	add.w	r1, r7, #32
 800345a:	440b      	add	r3, r1
 800345c:	f833 1c14 	ldrh.w	r1, [r3, #-20]
 8003460:	0053      	lsls	r3, r2, #1
 8003462:	f107 0220 	add.w	r2, r7, #32
 8003466:	4413      	add	r3, r2
 8003468:	460a      	mov	r2, r1
 800346a:	f823 2c14 	strh.w	r2, [r3, #-20]
				buf[j] = temp;
 800346e:	8bbb      	ldrh	r3, [r7, #28]
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	f107 0220 	add.w	r2, r7, #32
 8003476:	4413      	add	r3, r2
 8003478:	8b3a      	ldrh	r2, [r7, #24]
 800347a:	f823 2c14 	strh.w	r2, [r3, #-20]
		for(j = i+1; j < READ_TIMES; j++)
 800347e:	8bbb      	ldrh	r3, [r7, #28]
 8003480:	3301      	adds	r3, #1
 8003482:	83bb      	strh	r3, [r7, #28]
 8003484:	8bbb      	ldrh	r3, [r7, #28]
 8003486:	2b04      	cmp	r3, #4
 8003488:	d9ca      	bls.n	8003420 <TP_Read_XOY+0x48>
	for(i=0;i<READ_TIMES-1; i++)
 800348a:	8bfb      	ldrh	r3, [r7, #30]
 800348c:	3301      	adds	r3, #1
 800348e:	83fb      	strh	r3, [r7, #30]
 8003490:	8bfb      	ldrh	r3, [r7, #30]
 8003492:	2b03      	cmp	r3, #3
 8003494:	d9c0      	bls.n	8003418 <TP_Read_XOY+0x40>
			}
		}
	}
	sum = 0;
 8003496:	2300      	movs	r3, #0
 8003498:	837b      	strh	r3, [r7, #26]
	for(i = LOST_VAL; i < READ_TIMES - LOST_VAL; i++) sum += buf[i];
 800349a:	2301      	movs	r3, #1
 800349c:	83fb      	strh	r3, [r7, #30]
 800349e:	e00c      	b.n	80034ba <TP_Read_XOY+0xe2>
 80034a0:	8bfb      	ldrh	r3, [r7, #30]
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	f107 0220 	add.w	r2, r7, #32
 80034a8:	4413      	add	r3, r2
 80034aa:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80034ae:	8b7b      	ldrh	r3, [r7, #26]
 80034b0:	4413      	add	r3, r2
 80034b2:	837b      	strh	r3, [r7, #26]
 80034b4:	8bfb      	ldrh	r3, [r7, #30]
 80034b6:	3301      	adds	r3, #1
 80034b8:	83fb      	strh	r3, [r7, #30]
 80034ba:	8bfb      	ldrh	r3, [r7, #30]
 80034bc:	2b03      	cmp	r3, #3
 80034be:	d9ef      	bls.n	80034a0 <TP_Read_XOY+0xc8>
	temp = sum / (READ_TIMES - 2 * LOST_VAL);
 80034c0:	8b7b      	ldrh	r3, [r7, #26]
 80034c2:	4a05      	ldr	r2, [pc, #20]	; (80034d8 <TP_Read_XOY+0x100>)
 80034c4:	fba2 2303 	umull	r2, r3, r2, r3
 80034c8:	085b      	lsrs	r3, r3, #1
 80034ca:	833b      	strh	r3, [r7, #24]
	return temp;
 80034cc:	8b3b      	ldrh	r3, [r7, #24]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3724      	adds	r7, #36	; 0x24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd90      	pop	{r4, r7, pc}
 80034d6:	bf00      	nop
 80034d8:	aaaaaaab 	.word	0xaaaaaaab

080034dc <TP_Read_XY>:
 * @parameters :x:Read x coordinate of the touch screen
								y:Read y coordinate of the touch screen
 * @retvalue   :0-fail,1-success
******************************************************************************/
uint8_t TP_Read_XY(uint16_t *x,uint16_t *y)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
	uint16_t xtemp,ytemp;
	xtemp = TP_Read_XOY(CMD_RDX);
 80034e6:	4b0c      	ldr	r3, [pc, #48]	; (8003518 <TP_Read_XY+0x3c>)
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7ff ff74 	bl	80033d8 <TP_Read_XOY>
 80034f0:	4603      	mov	r3, r0
 80034f2:	81fb      	strh	r3, [r7, #14]
	ytemp = TP_Read_XOY(CMD_RDY);
 80034f4:	4b09      	ldr	r3, [pc, #36]	; (800351c <TP_Read_XY+0x40>)
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff ff6d 	bl	80033d8 <TP_Read_XOY>
 80034fe:	4603      	mov	r3, r0
 8003500:	81bb      	strh	r3, [r7, #12]

	*x = xtemp;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	89fa      	ldrh	r2, [r7, #14]
 8003506:	801a      	strh	r2, [r3, #0]
	*y = ytemp;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	89ba      	ldrh	r2, [r7, #12]
 800350c:	801a      	strh	r2, [r3, #0]
	return 1;
 800350e:	2301      	movs	r3, #1
}
 8003510:	4618      	mov	r0, r3
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	20000038 	.word	0x20000038
 800351c:	20000039 	.word	0x20000039

08003520 <TP_Read_XY2>:
 * @parameters :x:Read x coordinate of the touch screen
								y:Read y coordinate of the touch screen
 * @retvalue   :0-fail,1-success
******************************************************************************/
uint8_t TP_Read_XY2(uint16_t *x,uint16_t *y)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
	uint16_t x1,y1;
 	uint16_t x2,y2;
 	uint8_t flag;
    flag = TP_Read_XY(&x1 ,&y1);
 800352a:	f107 0212 	add.w	r2, r7, #18
 800352e:	f107 0314 	add.w	r3, r7, #20
 8003532:	4611      	mov	r1, r2
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff ffd1 	bl	80034dc <TP_Read_XY>
 800353a:	4603      	mov	r3, r0
 800353c:	75fb      	strb	r3, [r7, #23]
    if(flag == 0)
 800353e:	7dfb      	ldrb	r3, [r7, #23]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <TP_Read_XY2+0x28>
    	return(0);
 8003544:	2300      	movs	r3, #0
 8003546:	e04d      	b.n	80035e4 <TP_Read_XY2+0xc4>
    flag = TP_Read_XY(&x2, &y2);
 8003548:	f107 020e 	add.w	r2, r7, #14
 800354c:	f107 0310 	add.w	r3, r7, #16
 8003550:	4611      	mov	r1, r2
 8003552:	4618      	mov	r0, r3
 8003554:	f7ff ffc2 	bl	80034dc <TP_Read_XY>
 8003558:	4603      	mov	r3, r0
 800355a:	75fb      	strb	r3, [r7, #23]
    if(flag == 0)
 800355c:	7dfb      	ldrb	r3, [r7, #23]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <TP_Read_XY2+0x46>
    	return(0);
 8003562:	2300      	movs	r3, #0
 8003564:	e03e      	b.n	80035e4 <TP_Read_XY2+0xc4>
    if(((x2 <= x1 && x1 < x2 + ERR_RANGE) || (x1 <= x2 && x2 < x1 + ERR_RANGE))
 8003566:	8a3a      	ldrh	r2, [r7, #16]
 8003568:	8abb      	ldrh	r3, [r7, #20]
 800356a:	429a      	cmp	r2, r3
 800356c:	d805      	bhi.n	800357a <TP_Read_XY2+0x5a>
 800356e:	8abb      	ldrh	r3, [r7, #20]
 8003570:	461a      	mov	r2, r3
 8003572:	8a3b      	ldrh	r3, [r7, #16]
 8003574:	3332      	adds	r3, #50	; 0x32
 8003576:	429a      	cmp	r2, r3
 8003578:	db09      	blt.n	800358e <TP_Read_XY2+0x6e>
 800357a:	8aba      	ldrh	r2, [r7, #20]
 800357c:	8a3b      	ldrh	r3, [r7, #16]
 800357e:	429a      	cmp	r2, r3
 8003580:	d82f      	bhi.n	80035e2 <TP_Read_XY2+0xc2>
 8003582:	8a3b      	ldrh	r3, [r7, #16]
 8003584:	461a      	mov	r2, r3
 8003586:	8abb      	ldrh	r3, [r7, #20]
 8003588:	3332      	adds	r3, #50	; 0x32
 800358a:	429a      	cmp	r2, r3
 800358c:	da29      	bge.n	80035e2 <TP_Read_XY2+0xc2>
    && ((y2 <= y1 && y1 < y2 + ERR_RANGE) || (y1 <= y2 && y2 < y1 + ERR_RANGE)))
 800358e:	89fa      	ldrh	r2, [r7, #14]
 8003590:	8a7b      	ldrh	r3, [r7, #18]
 8003592:	429a      	cmp	r2, r3
 8003594:	d805      	bhi.n	80035a2 <TP_Read_XY2+0x82>
 8003596:	8a7b      	ldrh	r3, [r7, #18]
 8003598:	461a      	mov	r2, r3
 800359a:	89fb      	ldrh	r3, [r7, #14]
 800359c:	3332      	adds	r3, #50	; 0x32
 800359e:	429a      	cmp	r2, r3
 80035a0:	db09      	blt.n	80035b6 <TP_Read_XY2+0x96>
 80035a2:	8a7a      	ldrh	r2, [r7, #18]
 80035a4:	89fb      	ldrh	r3, [r7, #14]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d81b      	bhi.n	80035e2 <TP_Read_XY2+0xc2>
 80035aa:	89fb      	ldrh	r3, [r7, #14]
 80035ac:	461a      	mov	r2, r3
 80035ae:	8a7b      	ldrh	r3, [r7, #18]
 80035b0:	3332      	adds	r3, #50	; 0x32
 80035b2:	429a      	cmp	r2, r3
 80035b4:	da15      	bge.n	80035e2 <TP_Read_XY2+0xc2>
    {
        *x = (x1 + x2) / 2;
 80035b6:	8abb      	ldrh	r3, [r7, #20]
 80035b8:	461a      	mov	r2, r3
 80035ba:	8a3b      	ldrh	r3, [r7, #16]
 80035bc:	4413      	add	r3, r2
 80035be:	0fda      	lsrs	r2, r3, #31
 80035c0:	4413      	add	r3, r2
 80035c2:	105b      	asrs	r3, r3, #1
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	801a      	strh	r2, [r3, #0]
        *y = (y1 + y2) / 2;
 80035ca:	8a7b      	ldrh	r3, [r7, #18]
 80035cc:	461a      	mov	r2, r3
 80035ce:	89fb      	ldrh	r3, [r7, #14]
 80035d0:	4413      	add	r3, r2
 80035d2:	0fda      	lsrs	r2, r3, #31
 80035d4:	4413      	add	r3, r2
 80035d6:	105b      	asrs	r3, r3, #1
 80035d8:	b29a      	uxth	r2, r3
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	801a      	strh	r2, [r3, #0]
        return 1;
 80035de:	2301      	movs	r3, #1
 80035e0:	e000      	b.n	80035e4 <TP_Read_XY2+0xc4>
    }
    else
    	return 0;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3718      	adds	r7, #24
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <TP_Scan>:
 * @retvalue   :Current touch screen status,
								0-no touch
								1-touch
******************************************************************************/
uint8_t TP_Scan(uint8_t tp)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	4603      	mov	r3, r0
 80035f4:	71fb      	strb	r3, [r7, #7]
	if(T_IRQ == 0)
 80035f6:	2102      	movs	r1, #2
 80035f8:	483f      	ldr	r0, [pc, #252]	; (80036f8 <TP_Scan+0x10c>)
 80035fa:	f7fd fa53 	bl	8000aa4 <HAL_GPIO_ReadPin>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d155      	bne.n	80036b0 <TP_Scan+0xc4>
	{
		if(tp)
 8003604:	79fb      	ldrb	r3, [r7, #7]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d004      	beq.n	8003614 <TP_Scan+0x28>
			TP_Read_XY2(&tp_dev.x,&tp_dev.y);
 800360a:	493c      	ldr	r1, [pc, #240]	; (80036fc <TP_Scan+0x110>)
 800360c:	483c      	ldr	r0, [pc, #240]	; (8003700 <TP_Scan+0x114>)
 800360e:	f7ff ff87 	bl	8003520 <TP_Read_XY2>
 8003612:	e03c      	b.n	800368e <TP_Scan+0xa2>
		else if(TP_Read_XY2(&tp_dev.x,&tp_dev.y))
 8003614:	4939      	ldr	r1, [pc, #228]	; (80036fc <TP_Scan+0x110>)
 8003616:	483a      	ldr	r0, [pc, #232]	; (8003700 <TP_Scan+0x114>)
 8003618:	f7ff ff82 	bl	8003520 <TP_Read_XY2>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d035      	beq.n	800368e <TP_Scan+0xa2>
		{
	 		tp_dev.x = tp_dev.xfac * tp_dev.x + tp_dev.xoff;
 8003622:	4b38      	ldr	r3, [pc, #224]	; (8003704 <TP_Scan+0x118>)
 8003624:	ed93 7a05 	vldr	s14, [r3, #20]
 8003628:	4b36      	ldr	r3, [pc, #216]	; (8003704 <TP_Scan+0x118>)
 800362a:	899b      	ldrh	r3, [r3, #12]
 800362c:	ee07 3a90 	vmov	s15, r3
 8003630:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003634:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003638:	4b32      	ldr	r3, [pc, #200]	; (8003704 <TP_Scan+0x118>)
 800363a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800363e:	ee07 3a90 	vmov	s15, r3
 8003642:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003646:	ee77 7a27 	vadd.f32	s15, s14, s15
 800364a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800364e:	ee17 3a90 	vmov	r3, s15
 8003652:	b29a      	uxth	r2, r3
 8003654:	4b2b      	ldr	r3, [pc, #172]	; (8003704 <TP_Scan+0x118>)
 8003656:	819a      	strh	r2, [r3, #12]
			tp_dev.y = tp_dev.yfac * tp_dev.y + tp_dev.yoff;
 8003658:	4b2a      	ldr	r3, [pc, #168]	; (8003704 <TP_Scan+0x118>)
 800365a:	ed93 7a06 	vldr	s14, [r3, #24]
 800365e:	4b29      	ldr	r3, [pc, #164]	; (8003704 <TP_Scan+0x118>)
 8003660:	89db      	ldrh	r3, [r3, #14]
 8003662:	ee07 3a90 	vmov	s15, r3
 8003666:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800366a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800366e:	4b25      	ldr	r3, [pc, #148]	; (8003704 <TP_Scan+0x118>)
 8003670:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8003674:	ee07 3a90 	vmov	s15, r3
 8003678:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800367c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003680:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003684:	ee17 3a90 	vmov	r3, s15
 8003688:	b29a      	uxth	r2, r3
 800368a:	4b1e      	ldr	r3, [pc, #120]	; (8003704 <TP_Scan+0x118>)
 800368c:	81da      	strh	r2, [r3, #14]
	 	}
		if((tp_dev.sta & TP_PRES_DOWN) == 0)
 800368e:	4b1d      	ldr	r3, [pc, #116]	; (8003704 <TP_Scan+0x118>)
 8003690:	7c1b      	ldrb	r3, [r3, #16]
 8003692:	b25b      	sxtb	r3, r3
 8003694:	2b00      	cmp	r3, #0
 8003696:	db26      	blt.n	80036e6 <TP_Scan+0xfa>
		{
			tp_dev.sta = TP_PRES_DOWN | TP_CATH_PRES;
 8003698:	4b1a      	ldr	r3, [pc, #104]	; (8003704 <TP_Scan+0x118>)
 800369a:	22c0      	movs	r2, #192	; 0xc0
 800369c:	741a      	strb	r2, [r3, #16]
			tp_dev.x0 = tp_dev.x;
 800369e:	4b19      	ldr	r3, [pc, #100]	; (8003704 <TP_Scan+0x118>)
 80036a0:	899a      	ldrh	r2, [r3, #12]
 80036a2:	4b18      	ldr	r3, [pc, #96]	; (8003704 <TP_Scan+0x118>)
 80036a4:	811a      	strh	r2, [r3, #8]
			tp_dev.y0 = tp_dev.y;
 80036a6:	4b17      	ldr	r3, [pc, #92]	; (8003704 <TP_Scan+0x118>)
 80036a8:	89da      	ldrh	r2, [r3, #14]
 80036aa:	4b16      	ldr	r3, [pc, #88]	; (8003704 <TP_Scan+0x118>)
 80036ac:	815a      	strh	r2, [r3, #10]
 80036ae:	e01a      	b.n	80036e6 <TP_Scan+0xfa>
		}
	}
	else
	{
		if(tp_dev.sta & TP_PRES_DOWN)
 80036b0:	4b14      	ldr	r3, [pc, #80]	; (8003704 <TP_Scan+0x118>)
 80036b2:	7c1b      	ldrb	r3, [r3, #16]
 80036b4:	b25b      	sxtb	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	da07      	bge.n	80036ca <TP_Scan+0xde>
		{
			tp_dev.sta&=~(1<<7);
 80036ba:	4b12      	ldr	r3, [pc, #72]	; (8003704 <TP_Scan+0x118>)
 80036bc:	7c1b      	ldrb	r3, [r3, #16]
 80036be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036c2:	b2da      	uxtb	r2, r3
 80036c4:	4b0f      	ldr	r3, [pc, #60]	; (8003704 <TP_Scan+0x118>)
 80036c6:	741a      	strb	r2, [r3, #16]
 80036c8:	e00d      	b.n	80036e6 <TP_Scan+0xfa>
		}
		else
		{
			tp_dev.x0 	= 0;
 80036ca:	4b0e      	ldr	r3, [pc, #56]	; (8003704 <TP_Scan+0x118>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	811a      	strh	r2, [r3, #8]
			tp_dev.y0 	= 0;
 80036d0:	4b0c      	ldr	r3, [pc, #48]	; (8003704 <TP_Scan+0x118>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	815a      	strh	r2, [r3, #10]
			tp_dev.x  	= 0xffff;
 80036d6:	4b0b      	ldr	r3, [pc, #44]	; (8003704 <TP_Scan+0x118>)
 80036d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036dc:	819a      	strh	r2, [r3, #12]
			tp_dev.y 	= 0xffff;
 80036de:	4b09      	ldr	r3, [pc, #36]	; (8003704 <TP_Scan+0x118>)
 80036e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036e4:	81da      	strh	r2, [r3, #14]
		}
	}
	return tp_dev.sta & TP_PRES_DOWN;
 80036e6:	4b07      	ldr	r3, [pc, #28]	; (8003704 <TP_Scan+0x118>)
 80036e8:	7c1b      	ldrb	r3, [r3, #16]
 80036ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80036ee:	b2db      	uxtb	r3, r3
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	48000400 	.word	0x48000400
 80036fc:	20000022 	.word	0x20000022
 8003700:	20000020 	.word	0x20000020
 8003704:	20000014 	.word	0x20000014

08003708 <TP_Init>:
 * @parameters :None
 * @retvalue   :0-no calibration
								1-Has been calibrated
******************************************************************************/
uint8_t TP_Init(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin 	= T_IRQ_Pin | T_DO_Pin;
 800370e:	2306      	movs	r3, #6
 8003710:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode 	= GPIO_MODE_INPUT;
 8003712:	2300      	movs	r3, #0
 8003714:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8003716:	2300      	movs	r3, #0
 8003718:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed 	= GPIO_SPEED_FREQ_LOW;
 800371a:	2300      	movs	r3, #0
 800371c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800371e:	1d3b      	adds	r3, r7, #4
 8003720:	4619      	mov	r1, r3
 8003722:	4811      	ldr	r0, [pc, #68]	; (8003768 <TP_Init+0x60>)
 8003724:	f7fd f844 	bl	80007b0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	= T_CLK_Pin;
 8003728:	2301      	movs	r3, #1
 800372a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 800372c:	2301      	movs	r3, #1
 800372e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8003730:	2300      	movs	r3, #0
 8003732:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed 	= GPIO_SPEED_FREQ_LOW;
 8003734:	2300      	movs	r3, #0
 8003736:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003738:	1d3b      	adds	r3, r7, #4
 800373a:	4619      	mov	r1, r3
 800373c:	480a      	ldr	r0, [pc, #40]	; (8003768 <TP_Init+0x60>)
 800373e:	f7fd f837 	bl	80007b0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	= T_DIN_Pin | T_CS_Pin;
 8003742:	2330      	movs	r3, #48	; 0x30
 8003744:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8003746:	2301      	movs	r3, #1
 8003748:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 800374a:	2300      	movs	r3, #0
 800374c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed 	= GPIO_SPEED_FREQ_LOW;
 800374e:	2300      	movs	r3, #0
 8003750:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003752:	1d3b      	adds	r3, r7, #4
 8003754:	4619      	mov	r1, r3
 8003756:	4805      	ldr	r0, [pc, #20]	; (800376c <TP_Init+0x64>)
 8003758:	f7fd f82a 	bl	80007b0 <HAL_GPIO_Init>

	return 1;
 800375c:	2301      	movs	r3, #1
}
 800375e:	4618      	mov	r0, r3
 8003760:	3718      	adds	r7, #24
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	48000400 	.word	0x48000400
 800376c:	48000800 	.word	0x48000800

08003770 <__libc_init_array>:
 8003770:	b570      	push	{r4, r5, r6, lr}
 8003772:	4e0d      	ldr	r6, [pc, #52]	; (80037a8 <__libc_init_array+0x38>)
 8003774:	4c0d      	ldr	r4, [pc, #52]	; (80037ac <__libc_init_array+0x3c>)
 8003776:	1ba4      	subs	r4, r4, r6
 8003778:	10a4      	asrs	r4, r4, #2
 800377a:	2500      	movs	r5, #0
 800377c:	42a5      	cmp	r5, r4
 800377e:	d109      	bne.n	8003794 <__libc_init_array+0x24>
 8003780:	4e0b      	ldr	r6, [pc, #44]	; (80037b0 <__libc_init_array+0x40>)
 8003782:	4c0c      	ldr	r4, [pc, #48]	; (80037b4 <__libc_init_array+0x44>)
 8003784:	f000 f820 	bl	80037c8 <_init>
 8003788:	1ba4      	subs	r4, r4, r6
 800378a:	10a4      	asrs	r4, r4, #2
 800378c:	2500      	movs	r5, #0
 800378e:	42a5      	cmp	r5, r4
 8003790:	d105      	bne.n	800379e <__libc_init_array+0x2e>
 8003792:	bd70      	pop	{r4, r5, r6, pc}
 8003794:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003798:	4798      	blx	r3
 800379a:	3501      	adds	r5, #1
 800379c:	e7ee      	b.n	800377c <__libc_init_array+0xc>
 800379e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037a2:	4798      	blx	r3
 80037a4:	3501      	adds	r5, #1
 80037a6:	e7f2      	b.n	800378e <__libc_init_array+0x1e>
 80037a8:	0803af50 	.word	0x0803af50
 80037ac:	0803af50 	.word	0x0803af50
 80037b0:	0803af50 	.word	0x0803af50
 80037b4:	0803af54 	.word	0x0803af54

080037b8 <memset>:
 80037b8:	4402      	add	r2, r0
 80037ba:	4603      	mov	r3, r0
 80037bc:	4293      	cmp	r3, r2
 80037be:	d100      	bne.n	80037c2 <memset+0xa>
 80037c0:	4770      	bx	lr
 80037c2:	f803 1b01 	strb.w	r1, [r3], #1
 80037c6:	e7f9      	b.n	80037bc <memset+0x4>

080037c8 <_init>:
 80037c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ca:	bf00      	nop
 80037cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ce:	bc08      	pop	{r3}
 80037d0:	469e      	mov	lr, r3
 80037d2:	4770      	bx	lr

080037d4 <_fini>:
 80037d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037d6:	bf00      	nop
 80037d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037da:	bc08      	pop	{r3}
 80037dc:	469e      	mov	lr, r3
 80037de:	4770      	bx	lr
